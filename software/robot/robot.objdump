
robot.elf:     file format elf32-littlenios2
robot.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c9b8 memsz 0x0000c9b8 flags r-x
    LOAD off    0x0000d9d8 vaddr 0x0000c9d8 paddr 0x0000e4b8 align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x0000ff98 vaddr 0x0000ff98 paddr 0x0000ff98 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c48c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  0000c640  0000c640  0000d640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  0000c9d8  0000e4b8  0000d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0000ff98  0000ff98  0000ff98  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f4b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c78  00000000  00000000  0000f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001360  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002258d  00000000  00000000  000114b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000077b5  00000000  00000000  00033a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000132de  00000000  00000000  0003b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000184c  00000000  00000000  0004e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000212b  00000000  00000000  0004fd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bd49  00000000  00000000  00051e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005db98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000614a1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000614a4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000614a7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000614a8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000614a9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000614ad  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000614b1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000614b5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000614be  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000614c7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000614d0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003e  00000000  00000000  000614db  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa2  00000000  00000000  00061519  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00043214  00000000  00000000  00065fbb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000c640 l    d  .rodata	00000000 .rodata
0000c9d8 l    d  .rwdata	00000000 .rwdata
0000ff98 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main_program.c
00000000 l    df *ABS*	00000000 montimer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000059c l     F .text	00000058 __sprint_r
0000c6de l     O .rodata	00000010 blanks.3452
0000c6ce l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002600 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003ffc l     F .text	00000058 std
00004108 l     F .text	00000008 __fp_lock
00004110 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c9d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000e484 l     O .rwdata	00000004 charset
0000c714 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000c85c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008310 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000943c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009cb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009d10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009e10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009f30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a010 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a16c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000e4a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a634 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d394 l     O .rwdata	00001060 JTAG_UART
0000e3f4 l     O .rwdata	0000002c capt3_0
0000e420 l     O .rwdata	0000002c capt6_4
0000e44c l     O .rwdata	0000002c CTR_MOTEUR
0000a748 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a988 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000abb0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b22c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000b974 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bab0 l     F .text	000000dc alt_file_locked
0000bd14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c428 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c5dc l     F .text	00000040 alt_sim_halt
00005db8 g     F .text	00000094 _mprec_log10
00005ea4 g     F .text	00000088 __any_on
00007624 g     F .text	00000070 _isatty_r
0000c834 g     O .rodata	00000028 __mprec_tinytens
0000a1cc g     F .text	0000006c alt_main
0000fff8 g     O .bss	00000100 alt_irq
00007694 g     F .text	00000078 _lseek_r
0000e4b8 g       *ABS*	00000000 __flash_rwdata_start
00008e30 g     F .text	00000088 __eqdf2
000004c4 g     F .text	00000060 getsnapdif
00010288 g       *ABS*	00000000 __alt_heap_start
00000524 g     F .text	00000044 printf
0000707c g     F .text	00000068 __sseek
00004064 g     F .text	000000a4 __sinit
00004d3c g     F .text	00000084 _setlocale_r
00004164 g     F .text	00000068 __sfmoreglue
0000a258 g     F .text	00000020 __malloc_unlock
00005834 g     F .text	000000e0 memmove
00004154 g     F .text	00000010 _cleanup
00005f2c g     F .text	000000bc _Balloc
00008f40 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000474 g     F .text	00000050 getsnap
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000075b0 g     F .text	00000074 _fstat_r
0000ffb4 g     O .bss	00000004 errno
0000ffbc g     O .bss	00000004 alt_argv
00016478 g       *ABS*	00000000 _gp
0000d214 g     O .rwdata	00000180 alt_fd_list
0000bf38 g     F .text	00000094 alt_find_dev
00005794 g     F .text	000000a0 memcpy
00004148 g     F .text	0000000c _cleanup_r
000090d8 g     F .text	000000f8 __floatsidf
0000ba38 g     F .text	00000078 alt_io_redirect
00009050 g     F .text	00000088 __ltdf2
0000c640 g       *ABS*	00000000 __DTOR_END__
00005d08 g     F .text	000000b0 __ratio
0000adc8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000568 g     F .text	00000034 _printf_r
00009578 g     F .text	00000008 __udivsi3
00009e70 g     F .text	000000c0 isatty
0000c744 g     O .rodata	000000c8 __mprec_tens
00004d18 g     F .text	00000008 __locale_charset
0000c1a4 g     F .text	00000090 alt_icache_flush
0000ffa8 g     O .bss	00000004 __malloc_top_pad
0000e480 g     O .rwdata	00000004 __mb_cur_max
00004d20 g     F .text	0000000c _localeconv_r
00006624 g     F .text	0000003c __i2b
000046fc g     F .text	0000049c __sfvwrite_r
00007004 g     F .text	00000070 _sbrk_r
0000770c g     F .text	00000078 _read_r
0000cdd8 g     O .rwdata	0000000c __lc_ctype
0000e4a0 g     O .rwdata	00000004 alt_max_fd
000099b4 g     F .text	00000138 __unpack_d
0000748c g     F .text	00000110 _fclose_r
00003fc8 g     F .text	00000034 fflush
0000ffac g     O .bss	00000004 __malloc_max_sbrked_mem
000087a0 g     F .text	00000074 __adddf3
00005be8 g     F .text	00000120 __b2d
00007d60 g     F .text	000005b0 __umoddi3
0000a07c g     F .text	000000f0 lseek
0000e47c g     O .rwdata	00000004 _global_impure_ptr
000069a0 g     F .text	000005f4 _realloc_r
00010288 g       *ABS*	00000000 __bss_end
0000b87c g     F .text	000000f8 alt_iic_isr_register
0000be0c g     F .text	0000010c alt_tick
00007784 g     F .text	000005dc __udivdi3
0000c80c g     O .rodata	00000028 __mprec_bigtens
00006880 g     F .text	00000120 __s2b
000092a8 g     F .text	00000194 __floatunsidf
00005b08 g     F .text	00000060 __mcmp
00004130 g     F .text	00000018 __fp_lock_all
0000b834 g     F .text	00000048 alt_ic_irq_enabled
0000bd74 g     F .text	00000098 alt_alarm_stop
0000ffc4 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000d1ec g     O .rwdata	00000028 alt_dev_null
0000b480 g     F .text	0000001c alt_dcache_flush_all
000059d4 g     F .text	00000070 __hi0bits
000091d0 g     F .text	000000d8 __fixdfsi
0000e4b8 g       *ABS*	00000000 __ram_rwdata_end
0000e498 g     O .rwdata	00000008 alt_dev_list
0000a514 g     F .text	00000120 write
0000c9d8 g       *ABS*	00000000 __ram_rodata_end
00009d3c g     F .text	000000d4 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00006760 g     F .text	00000120 __pow5mult
0000ff9c g     O .bss	00000004 __nlocale_changed
00009580 g     F .text	00000008 __umodsi3
00010288 g       *ABS*	00000000 end
0000a8c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000c63c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000b29c g     F .text	00000090 alt_avalon_timer_sc_init
00009620 g     F .text	00000080 __clzsi2
0000afec g     F .text	00000240 altera_avalon_jtag_uart_write
00004054 g     F .text	00000004 __sfp_lock_acquire
000056b0 g     F .text	000000e4 memchr
000005f4 g     F .text	00001eac ___vfprintf_internal_r
000043e8 g     F .text	00000314 _free_r
0000c42c g     F .text	000001b0 __call_exitprocs
0000ffa0 g     O .bss	00000004 __mlocale_changed
0000e48c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
0000ffc8 g     O .bss	00000004 _alt_tick_rate
000062f0 g     F .text	0000014c __lshift
0000ffcc g     O .bss	00000004 _alt_nticks
0000a278 g     F .text	00000120 read
0000a6c8 g     F .text	00000080 alt_sys_init
0000c2f4 g     F .text	00000134 __register_exitproc
0000643c g     F .text	000001e8 __multiply
0000ac60 g     F .text	00000074 altera_avalon_jtag_uart_close
0000c9d8 g       *ABS*	00000000 __ram_rwdata_start
0000c640 g       *ABS*	00000000 __ram_rodata_start
0000ffd0 g     O .bss	00000028 __malloc_current_mallinfo
00005fe8 g     F .text	0000017c __d2b
0000ff98 g     O .bss	00000004 Timer_period
0000a780 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c0ec g     F .text	000000b8 alt_get_fd
00009aec g     F .text	000000c8 __fpcmp_parts_d
0000741c g     F .text	00000070 _close_r
0000c280 g     F .text	00000074 memcmp
0000a830 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010288 g       *ABS*	00000000 __alt_stack_base
0000a878 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000024c4 g     F .text	0000013c __swsetup_r
00008bd8 g     F .text	00000258 __divdf3
000041cc g     F .text	000000f0 __sfp
00005e4c g     F .text	00000058 __copybits
0000cde4 g     O .rwdata	00000408 __malloc_av_
00004060 g     F .text	00000004 __sinit_lock_release
00008814 g     F .text	000003c4 __muldf3
00007160 g     F .text	00000060 __sread
0000bfcc g     F .text	00000120 alt_find_file
0000b49c g     F .text	000000b4 alt_dev_llist_insert
0000a238 g     F .text	00000020 __malloc_lock
0000a458 g     F .text	000000bc sbrk
00003dcc g     F .text	000001fc _fflush_r
00007368 g     F .text	000000b4 _calloc_r
0000ff98 g       *ABS*	00000000 __bss_start
00005914 g     F .text	00000098 memset
000001f0 g     F .text	0000020c main
0000ffc0 g     O .bss	00000004 alt_envp
0000ffb0 g     O .bss	00000004 __malloc_max_total_mem
0000a7d8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007074 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000759c g     F .text	00000014 fclose
000100f8 g     O .bss	00000190 _atexit0
00002818 g     F .text	000015b4 _dtoa_r
00004f70 g     F .text	00000740 _malloc_r
0000e4a4 g     O .rwdata	00000004 alt_errno
00004c60 g     F .text	000000b8 _fwalk
000003fc g     F .text	0000004c getperiod
000094b8 g     F .text	00000060 __divsi3
0000c868 g     O .rodata	00000014 __thenan_df
000042bc g     F .text	0000012c _malloc_trim_r
0000c640 g       *ABS*	00000000 __CTOR_END__
000071c0 g     F .text	000000bc strcmp
0000c640 g       *ABS*	00000000 __flash_rodata_start
0000c640 g       *ABS*	00000000 __DTOR_LIST__
00008eb8 g     F .text	00000088 __nedf2
0000a694 g     F .text	00000034 alt_irq_init
0000a3f8 g     F .text	00000060 alt_release_fd
0000c87c g     O .rodata	00000100 __clz_tab
0000ffa4 g     O .bss	00000004 _PathLocale
0000c234 g     F .text	00000014 atexit
000072f0 g     F .text	00000078 _write_r
00004dc0 g     F .text	0000001c setlocale
0000e478 g     O .rwdata	00000004 _impure_ptr
0000ffb8 g     O .bss	00000004 alt_argc
0000b614 g     F .text	00000064 _do_dtors
00000448 g     F .text	0000002c start_timer
00000020 g       .exceptions	00000000 alt_irq_entry
00005b68 g     F .text	00000080 __ulp
00006f94 g     F .text	00000040 __isinfd
00004118 g     F .text	00000018 __fp_unlock_all
0000e490 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004d2c g     F .text	00000010 localeconv
0000b6a8 g     F .text	00000050 alt_ic_isr_register
0000e4b8 g       *ABS*	00000000 _edata
00010288 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000acd4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b794 g     F .text	000000a0 alt_ic_irq_disable
000070e4 g     F .text	0000007c __swrite
0000e488 g     O .rwdata	00000004 __malloc_trim_threshold
0000bf18 g     F .text	00000020 altera_nios2_qsys_irq_init
0000c248 g     F .text	00000038 exit
00004b98 g     F .text	000000c8 _fwalk_reent
00006164 g     F .text	0000018c __mdiff
00009518 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004058 g     F .text	00000004 __sfp_lock_release
0000c61c g     F .text	00000020 _exit
00006fd4 g     F .text	00000030 __isnand
0000b32c g     F .text	00000154 alt_alarm_start
00009588 g     F .text	00000098 __muldi3
00004ddc g     F .text	00000194 __smakebuf_r
0000727c g     F .text	00000074 strlen
0000bb8c g     F .text	00000188 open
00008fc8 g     F .text	00000088 __gedf2
0000b678 g     F .text	00000030 alt_icache_flush_all
0000e4ac g     O .rwdata	00000004 alt_priority_mask
0000b6f8 g     F .text	0000009c alt_ic_irq_enable
000024a0 g     F .text	00000024 __vfprintf_internal
00008720 g     F .text	00000080 __subdf3
00005a44 g     F .text	000000c4 __lo0bits
0000e4b0 g     O .rwdata	00000008 alt_alarm_list
0000b5b0 g     F .text	00000064 _do_ctors
00009bb4 g     F .text	000000fc close
00009f90 g     F .text	00000080 alt_load
000096a0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0000405c g     F .text	00000004 __sinit_lock_acquire
00006660 g     F .text	00000100 __multadd
000059ac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18fffe04 	addi	r3,r3,-8
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18fffe04 	addi	r3,r3,-8
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6991e14 	ori	gp,gp,25720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10bfe614 	ori	r2,r2,65432

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c0a214 	ori	r3,r3,648

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0009f900 	call	9f90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a1cc0 	call	a1cc <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
/*********************************************************/
//   Fonctions  



int main(){
     1f0:	defff204 	addi	sp,sp,-56
     1f4:	dfc00d15 	stw	ra,52(sp)
     1f8:	df000c15 	stw	fp,48(sp)
     1fc:	df000c04 	addi	fp,sp,48
// initialiser Timer de mesure du temps
  getperiod();
     200:	00003fc0 	call	3fc <getperiod>
  start_timer();
     204:	00004480 	call	448 <start_timer>
  int t1,t2,t3;
/*******************/
  //unsigned char det;
  unsigned char det2;
  t1 = getsnap();
     208:	00004740 	call	474 <getsnap>
     20c:	e0bfff15 	stw	r2,-4(fp)
  int posd,posp;
  int erreur=0;
     210:	e03ff915 	stw	zero,-28(fp)
  posd=0;
     214:	e03ffb15 	stw	zero,-20(fp)
  posp=0;
     218:	e03ffa15 	stw	zero,-24(fp)
     21c:	00000006 	br	220 <main+0x30>
  unsigned char motg, motd;
  while(1)
  {
	  t2 = getsnap();
     220:	00004740 	call	474 <getsnap>
     224:	e0bffe15 	stw	r2,-8(fp)
	  if(getsnapdif(t1,t2)>1000000)
     228:	e13fff17 	ldw	r4,-4(fp)
     22c:	e17ffe17 	ldw	r5,-8(fp)
     230:	00004c40 	call	4c4 <getsnapdif>
     234:	1007883a 	mov	r3,r2
     238:	008003f4 	movhi	r2,15
     23c:	10909004 	addi	r2,r2,16960
     240:	10fff72e 	bgeu	r2,r3,220 <main+0x30>
	  {
		  t1 = getsnap();
     244:	00004740 	call	474 <getsnap>
     248:	e0bfff15 	stw	r2,-4(fp)

			int premier = 0;
     24c:	e03ff715 	stw	zero,-36(fp)
			int dernier = 0;
     250:	e03ff615 	stw	zero,-40(fp)
			int i;
			int nbr = 0;
     254:	e03ff415 	stw	zero,-48(fp)
			for(i=0;i<7;i++)
     258:	e03ff515 	stw	zero,-44(fp)
     25c:	00001206 	br	2a8 <main+0xb8>
			{
				det2=(det>>i);
     260:	00a08034 	movhi	r2,33280
     264:	108004c4 	addi	r2,r2,19
     268:	10800003 	ldbu	r2,0(r2)
     26c:	10c03fcc 	andi	r3,r2,255
     270:	e0bff517 	ldw	r2,-44(fp)
     274:	1885d83a 	sra	r2,r3,r2
     278:	e0bffc05 	stb	r2,-16(fp)
				if(((det2) & (unsigned char)0x01 )==1)
     27c:	e0bffc03 	ldbu	r2,-16(fp)
     280:	1080004c 	andi	r2,r2,1
     284:	10803fcc 	andi	r2,r2,255
     288:	1005003a 	cmpeq	r2,r2,zero
     28c:	1000031e 	bne	r2,zero,29c <main+0xac>
				{
					premier=i;
     290:	e0bff517 	ldw	r2,-44(fp)
     294:	e0bff715 	stw	r2,-36(fp)
					break;
     298:	00000606 	br	2b4 <main+0xc4>

			int premier = 0;
			int dernier = 0;
			int i;
			int nbr = 0;
			for(i=0;i<7;i++)
     29c:	e0bff517 	ldw	r2,-44(fp)
     2a0:	10800044 	addi	r2,r2,1
     2a4:	e0bff515 	stw	r2,-44(fp)
     2a8:	e0bff517 	ldw	r2,-44(fp)
     2ac:	108001d0 	cmplti	r2,r2,7
     2b0:	103feb1e 	bne	r2,zero,260 <main+0x70>
				{
					premier=i;
					break;
				}
			}
			for(i=0;i<8;i++)
     2b4:	e03ff515 	stw	zero,-44(fp)
     2b8:	00001506 	br	310 <main+0x120>
			{
				det2=(det<<i);
     2bc:	00a08034 	movhi	r2,33280
     2c0:	108004c4 	addi	r2,r2,19
     2c4:	10800003 	ldbu	r2,0(r2)
     2c8:	10c03fcc 	andi	r3,r2,255
     2cc:	e0bff517 	ldw	r2,-44(fp)
     2d0:	1884983a 	sll	r2,r3,r2
     2d4:	e0bffc05 	stb	r2,-16(fp)
				if((det2) & (unsigned char)0x80)
     2d8:	e0bffc03 	ldbu	r2,-16(fp)
     2dc:	10803fcc 	andi	r2,r2,255
     2e0:	1080201c 	xori	r2,r2,128
     2e4:	10bfe004 	addi	r2,r2,-128
     2e8:	1004403a 	cmpge	r2,r2,zero
     2ec:	1000051e 	bne	r2,zero,304 <main+0x114>
				{
					dernier = 7-i;
     2f0:	008001c4 	movi	r2,7
     2f4:	e0fff517 	ldw	r3,-44(fp)
     2f8:	10c5c83a 	sub	r2,r2,r3
     2fc:	e0bff615 	stw	r2,-40(fp)
					break;
     300:	00000606 	br	31c <main+0x12c>
				{
					premier=i;
					break;
				}
			}
			for(i=0;i<8;i++)
     304:	e0bff517 	ldw	r2,-44(fp)
     308:	10800044 	addi	r2,r2,1
     30c:	e0bff515 	stw	r2,-44(fp)
     310:	e0bff517 	ldw	r2,-44(fp)
     314:	10800210 	cmplti	r2,r2,8
     318:	103fe81e 	bne	r2,zero,2bc <main+0xcc>
					dernier = 7-i;
					break;
				}

			}
			nbr=dernier-premier+1;
     31c:	e0fff617 	ldw	r3,-40(fp)
     320:	e0bff717 	ldw	r2,-36(fp)
     324:	1885c83a 	sub	r2,r3,r2
     328:	10800044 	addi	r2,r2,1
     32c:	e0bff415 	stw	r2,-48(fp)
			  printf("premier= %d \t dernier= %d \n",premier,dernier);
     330:	01000074 	movhi	r4,1
     334:	21319004 	addi	r4,r4,-14784
     338:	e17ff717 	ldw	r5,-36(fp)
     33c:	e1bff617 	ldw	r6,-40(fp)
     340:	00005240 	call	524 <printf>
			  OMOTEUR=0x29402940;
     344:	00e08034 	movhi	r3,33280
     348:	008a5034 	movhi	r2,10560
     34c:	108a5004 	addi	r2,r2,10560
     350:	18800015 	stw	r2,0(r3)
			  erreur = premier +dernier - 6;
     354:	e0fff717 	ldw	r3,-36(fp)
     358:	e0bff617 	ldw	r2,-40(fp)
     35c:	1885883a 	add	r2,r3,r2
     360:	10bffe84 	addi	r2,r2,-6
     364:	e0bff915 	stw	r2,-28(fp)
			  printf("erreur %d \n",erreur);
     368:	01000074 	movhi	r4,1
     36c:	21319704 	addi	r4,r4,-14756
     370:	e17ff917 	ldw	r5,-28(fp)
     374:	00005240 	call	524 <printf>
			  if(erreur>=0)
     378:	e0bff917 	ldw	r2,-28(fp)
     37c:	1004803a 	cmplt	r2,r2,zero
     380:	1000051e 	bne	r2,zero,398 <main+0x1a8>
				  motg = 0x2940+ (96*erreur);
     384:	e0bff917 	ldw	r2,-28(fp)
     388:	10801824 	muli	r2,r2,96
     38c:	10801004 	addi	r2,r2,64
     390:	e0bff845 	stb	r2,-31(fp)
     394:	00000906 	br	3bc <main+0x1cc>
			  else if(erreur<0)
     398:	e0bff917 	ldw	r2,-28(fp)
     39c:	1004403a 	cmpge	r2,r2,zero
     3a0:	1000061e 	bne	r2,zero,3bc <main+0x1cc>
				  motd = 0x2940- (96*erreur);
     3a4:	e0bff917 	ldw	r2,-28(fp)
     3a8:	10801824 	muli	r2,r2,96
     3ac:	1007883a 	mov	r3,r2
     3b0:	00801004 	movi	r2,64
     3b4:	10c5c83a 	sub	r2,r2,r3
     3b8:	e0bff805 	stb	r2,-32(fp)
			  OMOTEUR = (motg<<16)+motd;
     3bc:	01208034 	movhi	r4,33280
     3c0:	e0bff843 	ldbu	r2,-31(fp)
     3c4:	1006943a 	slli	r3,r2,16
     3c8:	e0bff803 	ldbu	r2,-32(fp)
     3cc:	1885883a 	add	r2,r3,r2
     3d0:	20800015 	stw	r2,0(r4)
			  //char output[9];
			  //sprintf(output,"%x", OMOTEUR);
				//printf("OMOTEUR %u \n",OMOTEUR);
			  //printf("%s\n",output);
			  t3 = getsnap();
     3d4:	00004740 	call	474 <getsnap>
     3d8:	e0bffd15 	stw	r2,-12(fp)
			  printf("t= %d \n",getsnapdif(t1,t3));
     3dc:	e13fff17 	ldw	r4,-4(fp)
     3e0:	e17ffd17 	ldw	r5,-12(fp)
     3e4:	00004c40 	call	4c4 <getsnapdif>
     3e8:	100b883a 	mov	r5,r2
     3ec:	01000074 	movhi	r4,1
     3f0:	21319a04 	addi	r4,r4,-14744
     3f4:	00005240 	call	524 <printf>
	  	  }

	}
     3f8:	003f8906 	br	220 <main+0x30>

000003fc <getperiod>:
#define INTERVAL_TIMER_BASE 0x90002000
// description de fonctions pour la gestion du temps
unsigned int Timer_period;

int getperiod() {
     3fc:	defffe04 	addi	sp,sp,-8
     400:	df000115 	stw	fp,4(sp)
     404:	df000104 	addi	fp,sp,4
	int val= *(((volatile unsigned int*)INTERVAL_TIMER_BASE)+2)|
			(*(((volatile unsigned int*)INTERVAL_TIMER_BASE)+3)<<16);
     408:	00a40034 	movhi	r2,36864
     40c:	10880204 	addi	r2,r2,8200
     410:	10c00017 	ldw	r3,0(r2)
     414:	00a40034 	movhi	r2,36864
     418:	10880304 	addi	r2,r2,8204
     41c:	10800017 	ldw	r2,0(r2)
     420:	1004943a 	slli	r2,r2,16
     424:	1884b03a 	or	r2,r3,r2
     428:	e0bfff15 	stw	r2,-4(fp)
	Timer_period=val;
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	d0a6c815 	stw	r2,-25824(gp)
	return val;
     434:	e0bfff17 	ldw	r2,-4(fp)
}
     438:	e037883a 	mov	sp,fp
     43c:	df000017 	ldw	fp,0(sp)
     440:	dec00104 	addi	sp,sp,4
     444:	f800283a 	ret

00000448 <start_timer>:

void start_timer() {
     448:	deffff04 	addi	sp,sp,-4
     44c:	df000015 	stw	fp,0(sp)
     450:	d839883a 	mov	fp,sp
	*(((volatile unsigned int*)INTERVAL_TIMER_BASE)+1)=0x06;
     454:	00e40034 	movhi	r3,36864
     458:	18c80104 	addi	r3,r3,8196
     45c:	00800184 	movi	r2,6
     460:	18800015 	stw	r2,0(r3)
}
     464:	e037883a 	mov	sp,fp
     468:	df000017 	ldw	fp,0(sp)
     46c:	dec00104 	addi	sp,sp,4
     470:	f800283a 	ret

00000474 <getsnap>:

unsigned int getsnap() {
     474:	defffe04 	addi	sp,sp,-8
     478:	df000115 	stw	fp,4(sp)
     47c:	df000104 	addi	fp,sp,4
	*(((volatile unsigned int*)INTERVAL_TIMER_BASE)+4)=0;
     480:	00a40034 	movhi	r2,36864
     484:	10880404 	addi	r2,r2,8208
     488:	10000015 	stw	zero,0(r2)
	unsigned int val= *((volatile unsigned int*)(INTERVAL_TIMER_BASE)+4)|
			(*(((volatile unsigned int*)INTERVAL_TIMER_BASE)+5)<<16);
     48c:	00a40034 	movhi	r2,36864
     490:	10880404 	addi	r2,r2,8208
     494:	10c00017 	ldw	r3,0(r2)
     498:	00a40034 	movhi	r2,36864
     49c:	10880504 	addi	r2,r2,8212
     4a0:	10800017 	ldw	r2,0(r2)
     4a4:	1004943a 	slli	r2,r2,16
     4a8:	1884b03a 	or	r2,r3,r2
     4ac:	e0bfff15 	stw	r2,-4(fp)
	return val;
     4b0:	e0bfff17 	ldw	r2,-4(fp)
}
     4b4:	e037883a 	mov	sp,fp
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00104 	addi	sp,sp,4
     4c0:	f800283a 	ret

000004c4 <getsnapdif>:
unsigned int getsnapdif(unsigned int v1,unsigned int v2){
     4c4:	defffc04 	addi	sp,sp,-16
     4c8:	df000315 	stw	fp,12(sp)
     4cc:	df000304 	addi	fp,sp,12
     4d0:	e13ffd15 	stw	r4,-12(fp)
     4d4:	e17ffe15 	stw	r5,-8(fp)
  return ((v1>=v2) ? (v1-v2) :(Timer_period-v2+v1));
     4d8:	e0fffd17 	ldw	r3,-12(fp)
     4dc:	e0bffe17 	ldw	r2,-8(fp)
     4e0:	18800536 	bltu	r3,r2,4f8 <getsnapdif+0x34>
     4e4:	e0fffd17 	ldw	r3,-12(fp)
     4e8:	e0bffe17 	ldw	r2,-8(fp)
     4ec:	1887c83a 	sub	r3,r3,r2
     4f0:	e0ffff15 	stw	r3,-4(fp)
     4f4:	00000606 	br	510 <getsnapdif+0x4c>
     4f8:	d0e6c817 	ldw	r3,-25824(gp)
     4fc:	e0bffe17 	ldw	r2,-8(fp)
     500:	1887c83a 	sub	r3,r3,r2
     504:	e0bffd17 	ldw	r2,-12(fp)
     508:	1887883a 	add	r3,r3,r2
     50c:	e0ffff15 	stw	r3,-4(fp)
     510:	e0bfff17 	ldw	r2,-4(fp)
}
     514:	e037883a 	mov	sp,fp
     518:	df000017 	ldw	fp,0(sp)
     51c:	dec00104 	addi	sp,sp,4
     520:	f800283a 	ret

00000524 <printf>:
     524:	defffb04 	addi	sp,sp,-20
     528:	dfc00115 	stw	ra,4(sp)
     52c:	d9400215 	stw	r5,8(sp)
     530:	d9800315 	stw	r6,12(sp)
     534:	d9c00415 	stw	r7,16(sp)
     538:	00800074 	movhi	r2,1
     53c:	10b91e04 	addi	r2,r2,-7048
     540:	10c00017 	ldw	r3,0(r2)
     544:	200b883a 	mov	r5,r4
     548:	d8800204 	addi	r2,sp,8
     54c:	19000217 	ldw	r4,8(r3)
     550:	100d883a 	mov	r6,r2
     554:	d8800015 	stw	r2,0(sp)
     558:	00024a00 	call	24a0 <__vfprintf_internal>
     55c:	dfc00117 	ldw	ra,4(sp)
     560:	dec00504 	addi	sp,sp,20
     564:	f800283a 	ret

00000568 <_printf_r>:
     568:	defffc04 	addi	sp,sp,-16
     56c:	dfc00115 	stw	ra,4(sp)
     570:	d9800215 	stw	r6,8(sp)
     574:	d9c00315 	stw	r7,12(sp)
     578:	280d883a 	mov	r6,r5
     57c:	21400217 	ldw	r5,8(r4)
     580:	d8c00204 	addi	r3,sp,8
     584:	180f883a 	mov	r7,r3
     588:	d8c00015 	stw	r3,0(sp)
     58c:	00005f40 	call	5f4 <___vfprintf_internal_r>
     590:	dfc00117 	ldw	ra,4(sp)
     594:	dec00404 	addi	sp,sp,16
     598:	f800283a 	ret

0000059c <__sprint_r>:
     59c:	30800217 	ldw	r2,8(r6)
     5a0:	defffe04 	addi	sp,sp,-8
     5a4:	dc000015 	stw	r16,0(sp)
     5a8:	dfc00115 	stw	ra,4(sp)
     5ac:	3021883a 	mov	r16,r6
     5b0:	0007883a 	mov	r3,zero
     5b4:	1000061e 	bne	r2,zero,5d0 <__sprint_r+0x34>
     5b8:	1805883a 	mov	r2,r3
     5bc:	30000115 	stw	zero,4(r6)
     5c0:	dfc00117 	ldw	ra,4(sp)
     5c4:	dc000017 	ldw	r16,0(sp)
     5c8:	dec00204 	addi	sp,sp,8
     5cc:	f800283a 	ret
     5d0:	00046fc0 	call	46fc <__sfvwrite_r>
     5d4:	1007883a 	mov	r3,r2
     5d8:	1805883a 	mov	r2,r3
     5dc:	80000115 	stw	zero,4(r16)
     5e0:	80000215 	stw	zero,8(r16)
     5e4:	dfc00117 	ldw	ra,4(sp)
     5e8:	dc000017 	ldw	r16,0(sp)
     5ec:	dec00204 	addi	sp,sp,8
     5f0:	f800283a 	ret

000005f4 <___vfprintf_internal_r>:
     5f4:	defea404 	addi	sp,sp,-1392
     5f8:	dd815815 	stw	r22,1376(sp)
     5fc:	dc015215 	stw	r16,1352(sp)
     600:	d9c15115 	stw	r7,1348(sp)
     604:	dfc15b15 	stw	ra,1388(sp)
     608:	df015a15 	stw	fp,1384(sp)
     60c:	ddc15915 	stw	r23,1380(sp)
     610:	dd415715 	stw	r21,1372(sp)
     614:	dd015615 	stw	r20,1368(sp)
     618:	dcc15515 	stw	r19,1364(sp)
     61c:	dc815415 	stw	r18,1360(sp)
     620:	dc415315 	stw	r17,1356(sp)
     624:	282d883a 	mov	r22,r5
     628:	3021883a 	mov	r16,r6
     62c:	d9014f15 	stw	r4,1340(sp)
     630:	0004d200 	call	4d20 <_localeconv_r>
     634:	10800017 	ldw	r2,0(r2)
     638:	d9c15117 	ldw	r7,1348(sp)
     63c:	d8814915 	stw	r2,1316(sp)
     640:	d8814f17 	ldw	r2,1340(sp)
     644:	10000226 	beq	r2,zero,650 <___vfprintf_internal_r+0x5c>
     648:	10800e17 	ldw	r2,56(r2)
     64c:	10020d26 	beq	r2,zero,e84 <___vfprintf_internal_r+0x890>
     650:	b080030b 	ldhu	r2,12(r22)
     654:	1080020c 	andi	r2,r2,8
     658:	10020e26 	beq	r2,zero,e94 <___vfprintf_internal_r+0x8a0>
     65c:	b0800417 	ldw	r2,16(r22)
     660:	10020c26 	beq	r2,zero,e94 <___vfprintf_internal_r+0x8a0>
     664:	b200030b 	ldhu	r8,12(r22)
     668:	00800284 	movi	r2,10
     66c:	40c0068c 	andi	r3,r8,26
     670:	18802f1e 	bne	r3,r2,730 <___vfprintf_internal_r+0x13c>
     674:	b080038f 	ldh	r2,14(r22)
     678:	10002d16 	blt	r2,zero,730 <___vfprintf_internal_r+0x13c>
     67c:	b240038b 	ldhu	r9,14(r22)
     680:	b2800717 	ldw	r10,28(r22)
     684:	b2c00917 	ldw	r11,36(r22)
     688:	d9014f17 	ldw	r4,1340(sp)
     68c:	dc402904 	addi	r17,sp,164
     690:	d8804004 	addi	r2,sp,256
     694:	00c10004 	movi	r3,1024
     698:	423fff4c 	andi	r8,r8,65533
     69c:	800d883a 	mov	r6,r16
     6a0:	880b883a 	mov	r5,r17
     6a4:	da002c0d 	sth	r8,176(sp)
     6a8:	da402c8d 	sth	r9,178(sp)
     6ac:	da803015 	stw	r10,192(sp)
     6b0:	dac03215 	stw	r11,200(sp)
     6b4:	d8802d15 	stw	r2,180(sp)
     6b8:	d8c02e15 	stw	r3,184(sp)
     6bc:	d8802915 	stw	r2,164(sp)
     6c0:	d8c02b15 	stw	r3,172(sp)
     6c4:	d8002f15 	stw	zero,188(sp)
     6c8:	00005f40 	call	5f4 <___vfprintf_internal_r>
     6cc:	d8814b15 	stw	r2,1324(sp)
     6d0:	10000416 	blt	r2,zero,6e4 <___vfprintf_internal_r+0xf0>
     6d4:	d9014f17 	ldw	r4,1340(sp)
     6d8:	880b883a 	mov	r5,r17
     6dc:	0003dcc0 	call	3dcc <_fflush_r>
     6e0:	1002321e 	bne	r2,zero,fac <___vfprintf_internal_r+0x9b8>
     6e4:	d8802c0b 	ldhu	r2,176(sp)
     6e8:	1080100c 	andi	r2,r2,64
     6ec:	10000326 	beq	r2,zero,6fc <___vfprintf_internal_r+0x108>
     6f0:	b080030b 	ldhu	r2,12(r22)
     6f4:	10801014 	ori	r2,r2,64
     6f8:	b080030d 	sth	r2,12(r22)
     6fc:	d8814b17 	ldw	r2,1324(sp)
     700:	dfc15b17 	ldw	ra,1388(sp)
     704:	df015a17 	ldw	fp,1384(sp)
     708:	ddc15917 	ldw	r23,1380(sp)
     70c:	dd815817 	ldw	r22,1376(sp)
     710:	dd415717 	ldw	r21,1372(sp)
     714:	dd015617 	ldw	r20,1368(sp)
     718:	dcc15517 	ldw	r19,1364(sp)
     71c:	dc815417 	ldw	r18,1360(sp)
     720:	dc415317 	ldw	r17,1356(sp)
     724:	dc015217 	ldw	r16,1352(sp)
     728:	dec15c04 	addi	sp,sp,1392
     72c:	f800283a 	ret
     730:	0005883a 	mov	r2,zero
     734:	0007883a 	mov	r3,zero
     738:	dd401904 	addi	r21,sp,100
     73c:	d8814215 	stw	r2,1288(sp)
     740:	802f883a 	mov	r23,r16
     744:	d8c14315 	stw	r3,1292(sp)
     748:	d8014b15 	stw	zero,1324(sp)
     74c:	d8014815 	stw	zero,1312(sp)
     750:	d8014415 	stw	zero,1296(sp)
     754:	d8014715 	stw	zero,1308(sp)
     758:	dd400c15 	stw	r21,48(sp)
     75c:	d8000e15 	stw	zero,56(sp)
     760:	d8000d15 	stw	zero,52(sp)
     764:	b8800007 	ldb	r2,0(r23)
     768:	10001926 	beq	r2,zero,7d0 <___vfprintf_internal_r+0x1dc>
     76c:	00c00944 	movi	r3,37
     770:	10c01726 	beq	r2,r3,7d0 <___vfprintf_internal_r+0x1dc>
     774:	b821883a 	mov	r16,r23
     778:	00000106 	br	780 <___vfprintf_internal_r+0x18c>
     77c:	10c00326 	beq	r2,r3,78c <___vfprintf_internal_r+0x198>
     780:	84000044 	addi	r16,r16,1
     784:	80800007 	ldb	r2,0(r16)
     788:	103ffc1e 	bne	r2,zero,77c <___vfprintf_internal_r+0x188>
     78c:	85e7c83a 	sub	r19,r16,r23
     790:	98000e26 	beq	r19,zero,7cc <___vfprintf_internal_r+0x1d8>
     794:	dc800e17 	ldw	r18,56(sp)
     798:	dc400d17 	ldw	r17,52(sp)
     79c:	008001c4 	movi	r2,7
     7a0:	94e5883a 	add	r18,r18,r19
     7a4:	8c400044 	addi	r17,r17,1
     7a8:	adc00015 	stw	r23,0(r21)
     7ac:	dc800e15 	stw	r18,56(sp)
     7b0:	acc00115 	stw	r19,4(r21)
     7b4:	dc400d15 	stw	r17,52(sp)
     7b8:	14428b16 	blt	r2,r17,11e8 <___vfprintf_internal_r+0xbf4>
     7bc:	ad400204 	addi	r21,r21,8
     7c0:	d9014b17 	ldw	r4,1324(sp)
     7c4:	24c9883a 	add	r4,r4,r19
     7c8:	d9014b15 	stw	r4,1324(sp)
     7cc:	802f883a 	mov	r23,r16
     7d0:	b8800007 	ldb	r2,0(r23)
     7d4:	10013c26 	beq	r2,zero,cc8 <___vfprintf_internal_r+0x6d4>
     7d8:	bdc00044 	addi	r23,r23,1
     7dc:	d8000405 	stb	zero,16(sp)
     7e0:	b8c00007 	ldb	r3,0(r23)
     7e4:	04ffffc4 	movi	r19,-1
     7e8:	d8014c15 	stw	zero,1328(sp)
     7ec:	d8014a15 	stw	zero,1320(sp)
     7f0:	d8c14d15 	stw	r3,1332(sp)
     7f4:	bdc00044 	addi	r23,r23,1
     7f8:	d9414d17 	ldw	r5,1332(sp)
     7fc:	00801604 	movi	r2,88
     800:	28fff804 	addi	r3,r5,-32
     804:	10c06036 	bltu	r2,r3,988 <___vfprintf_internal_r+0x394>
     808:	18c5883a 	add	r2,r3,r3
     80c:	1085883a 	add	r2,r2,r2
     810:	00c00034 	movhi	r3,0
     814:	18c20904 	addi	r3,r3,2084
     818:	10c5883a 	add	r2,r2,r3
     81c:	11000017 	ldw	r4,0(r2)
     820:	2000683a 	jmp	r4
     824:	00001798 	cmpnei	zero,zero,94
     828:	00000988 	cmpgei	zero,zero,38
     82c:	00000988 	cmpgei	zero,zero,38
     830:	00001784 	movi	zero,94
     834:	00000988 	cmpgei	zero,zero,38
     838:	00000988 	cmpgei	zero,zero,38
     83c:	00000988 	cmpgei	zero,zero,38
     840:	00000988 	cmpgei	zero,zero,38
     844:	00000988 	cmpgei	zero,zero,38
     848:	00000988 	cmpgei	zero,zero,38
     84c:	00001564 	muli	zero,zero,85
     850:	00001774 	movhi	zero,93
     854:	00000988 	cmpgei	zero,zero,38
     858:	0000157c 	xorhi	zero,zero,85
     85c:	00001810 	cmplti	zero,zero,96
     860:	00000988 	cmpgei	zero,zero,38
     864:	000017fc 	xorhi	zero,zero,95
     868:	000017c4 	movi	zero,95
     86c:	000017c4 	movi	zero,95
     870:	000017c4 	movi	zero,95
     874:	000017c4 	movi	zero,95
     878:	000017c4 	movi	zero,95
     87c:	000017c4 	movi	zero,95
     880:	000017c4 	movi	zero,95
     884:	000017c4 	movi	zero,95
     888:	000017c4 	movi	zero,95
     88c:	00000988 	cmpgei	zero,zero,38
     890:	00000988 	cmpgei	zero,zero,38
     894:	00000988 	cmpgei	zero,zero,38
     898:	00000988 	cmpgei	zero,zero,38
     89c:	00000988 	cmpgei	zero,zero,38
     8a0:	00000988 	cmpgei	zero,zero,38
     8a4:	00000988 	cmpgei	zero,zero,38
     8a8:	00000988 	cmpgei	zero,zero,38
     8ac:	00000988 	cmpgei	zero,zero,38
     8b0:	00000988 	cmpgei	zero,zero,38
     8b4:	00000fe0 	cmpeqi	zero,zero,63
     8b8:	0000164c 	andi	zero,zero,89
     8bc:	00000988 	cmpgei	zero,zero,38
     8c0:	0000164c 	andi	zero,zero,89
     8c4:	00000988 	cmpgei	zero,zero,38
     8c8:	00000988 	cmpgei	zero,zero,38
     8cc:	00000988 	cmpgei	zero,zero,38
     8d0:	00000988 	cmpgei	zero,zero,38
     8d4:	000017b0 	cmpltui	zero,zero,94
     8d8:	00000988 	cmpgei	zero,zero,38
     8dc:	00000988 	cmpgei	zero,zero,38
     8e0:	00001094 	movui	zero,66
     8e4:	00000988 	cmpgei	zero,zero,38
     8e8:	00000988 	cmpgei	zero,zero,38
     8ec:	00000988 	cmpgei	zero,zero,38
     8f0:	00000988 	cmpgei	zero,zero,38
     8f4:	00000988 	cmpgei	zero,zero,38
     8f8:	000010e0 	cmpeqi	zero,zero,67
     8fc:	00000988 	cmpgei	zero,zero,38
     900:	00000988 	cmpgei	zero,zero,38
     904:	00001700 	call	170 <alt_irq_handler+0x84>
     908:	00000988 	cmpgei	zero,zero,38
     90c:	00000988 	cmpgei	zero,zero,38
     910:	00000988 	cmpgei	zero,zero,38
     914:	00000988 	cmpgei	zero,zero,38
     918:	00000988 	cmpgei	zero,zero,38
     91c:	00000988 	cmpgei	zero,zero,38
     920:	00000988 	cmpgei	zero,zero,38
     924:	00000988 	cmpgei	zero,zero,38
     928:	00000988 	cmpgei	zero,zero,38
     92c:	00000988 	cmpgei	zero,zero,38
     930:	000016d4 	movui	zero,91
     934:	00000fec 	andhi	zero,zero,63
     938:	0000164c 	andi	zero,zero,89
     93c:	0000164c 	andi	zero,zero,89
     940:	0000164c 	andi	zero,zero,89
     944:	00001638 	rdprs	zero,zero,88
     948:	00000fec 	andhi	zero,zero,63
     94c:	00000988 	cmpgei	zero,zero,38
     950:	00000988 	cmpgei	zero,zero,38
     954:	000015c0 	call	15c <alt_irq_handler+0x70>
     958:	00000988 	cmpgei	zero,zero,38
     95c:	00001590 	cmplti	zero,zero,86
     960:	000010a0 	cmpeqi	zero,zero,66
     964:	000015f0 	cmpltui	zero,zero,87
     968:	000015dc 	xori	zero,zero,87
     96c:	00000988 	cmpgei	zero,zero,38
     970:	0000186c 	andhi	zero,zero,97
     974:	00000988 	cmpgei	zero,zero,38
     978:	000010ec 	andhi	zero,zero,67
     97c:	00000988 	cmpgei	zero,zero,38
     980:	00000988 	cmpgei	zero,zero,38
     984:	00001764 	muli	zero,zero,93
     988:	d9014d17 	ldw	r4,1332(sp)
     98c:	2000ce26 	beq	r4,zero,cc8 <___vfprintf_internal_r+0x6d4>
     990:	01400044 	movi	r5,1
     994:	d9800f04 	addi	r6,sp,60
     998:	d9c14015 	stw	r7,1280(sp)
     99c:	d9414515 	stw	r5,1300(sp)
     9a0:	d9814115 	stw	r6,1284(sp)
     9a4:	280f883a 	mov	r7,r5
     9a8:	d9000f05 	stb	r4,60(sp)
     9ac:	d8000405 	stb	zero,16(sp)
     9b0:	d8014615 	stw	zero,1304(sp)
     9b4:	d8c14c17 	ldw	r3,1328(sp)
     9b8:	1880008c 	andi	r2,r3,2
     9bc:	1005003a 	cmpeq	r2,r2,zero
     9c0:	d8815015 	stw	r2,1344(sp)
     9c4:	1000031e 	bne	r2,zero,9d4 <___vfprintf_internal_r+0x3e0>
     9c8:	d9014517 	ldw	r4,1300(sp)
     9cc:	21000084 	addi	r4,r4,2
     9d0:	d9014515 	stw	r4,1300(sp)
     9d4:	d9414c17 	ldw	r5,1328(sp)
     9d8:	2940210c 	andi	r5,r5,132
     9dc:	d9414e15 	stw	r5,1336(sp)
     9e0:	28002d1e 	bne	r5,zero,a98 <___vfprintf_internal_r+0x4a4>
     9e4:	d9814a17 	ldw	r6,1320(sp)
     9e8:	d8814517 	ldw	r2,1300(sp)
     9ec:	30a1c83a 	sub	r16,r6,r2
     9f0:	0400290e 	bge	zero,r16,a98 <___vfprintf_internal_r+0x4a4>
     9f4:	00800404 	movi	r2,16
     9f8:	1404580e 	bge	r2,r16,1b5c <___vfprintf_internal_r+0x1568>
     9fc:	dc800e17 	ldw	r18,56(sp)
     a00:	dc400d17 	ldw	r17,52(sp)
     a04:	1027883a 	mov	r19,r2
     a08:	07000074 	movhi	fp,1
     a0c:	e731b784 	addi	fp,fp,-14626
     a10:	050001c4 	movi	r20,7
     a14:	00000306 	br	a24 <___vfprintf_internal_r+0x430>
     a18:	843ffc04 	addi	r16,r16,-16
     a1c:	ad400204 	addi	r21,r21,8
     a20:	9c00130e 	bge	r19,r16,a70 <___vfprintf_internal_r+0x47c>
     a24:	94800404 	addi	r18,r18,16
     a28:	8c400044 	addi	r17,r17,1
     a2c:	af000015 	stw	fp,0(r21)
     a30:	acc00115 	stw	r19,4(r21)
     a34:	dc800e15 	stw	r18,56(sp)
     a38:	dc400d15 	stw	r17,52(sp)
     a3c:	a47ff60e 	bge	r20,r17,a18 <___vfprintf_internal_r+0x424>
     a40:	d9014f17 	ldw	r4,1340(sp)
     a44:	b00b883a 	mov	r5,r22
     a48:	d9800c04 	addi	r6,sp,48
     a4c:	d9c15115 	stw	r7,1348(sp)
     a50:	000059c0 	call	59c <__sprint_r>
     a54:	d9c15117 	ldw	r7,1348(sp)
     a58:	10009e1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     a5c:	843ffc04 	addi	r16,r16,-16
     a60:	dc800e17 	ldw	r18,56(sp)
     a64:	dc400d17 	ldw	r17,52(sp)
     a68:	dd401904 	addi	r21,sp,100
     a6c:	9c3fed16 	blt	r19,r16,a24 <___vfprintf_internal_r+0x430>
     a70:	9425883a 	add	r18,r18,r16
     a74:	8c400044 	addi	r17,r17,1
     a78:	008001c4 	movi	r2,7
     a7c:	af000015 	stw	fp,0(r21)
     a80:	ac000115 	stw	r16,4(r21)
     a84:	dc800e15 	stw	r18,56(sp)
     a88:	dc400d15 	stw	r17,52(sp)
     a8c:	1441f516 	blt	r2,r17,1264 <___vfprintf_internal_r+0xc70>
     a90:	ad400204 	addi	r21,r21,8
     a94:	00000206 	br	aa0 <___vfprintf_internal_r+0x4ac>
     a98:	dc800e17 	ldw	r18,56(sp)
     a9c:	dc400d17 	ldw	r17,52(sp)
     aa0:	d8800407 	ldb	r2,16(sp)
     aa4:	10000b26 	beq	r2,zero,ad4 <___vfprintf_internal_r+0x4e0>
     aa8:	00800044 	movi	r2,1
     aac:	94800044 	addi	r18,r18,1
     ab0:	8c400044 	addi	r17,r17,1
     ab4:	a8800115 	stw	r2,4(r21)
     ab8:	d8c00404 	addi	r3,sp,16
     abc:	008001c4 	movi	r2,7
     ac0:	a8c00015 	stw	r3,0(r21)
     ac4:	dc800e15 	stw	r18,56(sp)
     ac8:	dc400d15 	stw	r17,52(sp)
     acc:	1441da16 	blt	r2,r17,1238 <___vfprintf_internal_r+0xc44>
     ad0:	ad400204 	addi	r21,r21,8
     ad4:	d9015017 	ldw	r4,1344(sp)
     ad8:	20000b1e 	bne	r4,zero,b08 <___vfprintf_internal_r+0x514>
     adc:	d8800444 	addi	r2,sp,17
     ae0:	94800084 	addi	r18,r18,2
     ae4:	8c400044 	addi	r17,r17,1
     ae8:	a8800015 	stw	r2,0(r21)
     aec:	00c00084 	movi	r3,2
     af0:	008001c4 	movi	r2,7
     af4:	a8c00115 	stw	r3,4(r21)
     af8:	dc800e15 	stw	r18,56(sp)
     afc:	dc400d15 	stw	r17,52(sp)
     b00:	1441c216 	blt	r2,r17,120c <___vfprintf_internal_r+0xc18>
     b04:	ad400204 	addi	r21,r21,8
     b08:	d9414e17 	ldw	r5,1336(sp)
     b0c:	00802004 	movi	r2,128
     b10:	2880b126 	beq	r5,r2,dd8 <___vfprintf_internal_r+0x7e4>
     b14:	d8c14617 	ldw	r3,1304(sp)
     b18:	19e1c83a 	sub	r16,r3,r7
     b1c:	0400260e 	bge	zero,r16,bb8 <___vfprintf_internal_r+0x5c4>
     b20:	00800404 	movi	r2,16
     b24:	1403c90e 	bge	r2,r16,1a4c <___vfprintf_internal_r+0x1458>
     b28:	1027883a 	mov	r19,r2
     b2c:	07000074 	movhi	fp,1
     b30:	e731b384 	addi	fp,fp,-14642
     b34:	050001c4 	movi	r20,7
     b38:	00000306 	br	b48 <___vfprintf_internal_r+0x554>
     b3c:	843ffc04 	addi	r16,r16,-16
     b40:	ad400204 	addi	r21,r21,8
     b44:	9c00130e 	bge	r19,r16,b94 <___vfprintf_internal_r+0x5a0>
     b48:	94800404 	addi	r18,r18,16
     b4c:	8c400044 	addi	r17,r17,1
     b50:	af000015 	stw	fp,0(r21)
     b54:	acc00115 	stw	r19,4(r21)
     b58:	dc800e15 	stw	r18,56(sp)
     b5c:	dc400d15 	stw	r17,52(sp)
     b60:	a47ff60e 	bge	r20,r17,b3c <___vfprintf_internal_r+0x548>
     b64:	d9014f17 	ldw	r4,1340(sp)
     b68:	b00b883a 	mov	r5,r22
     b6c:	d9800c04 	addi	r6,sp,48
     b70:	d9c15115 	stw	r7,1348(sp)
     b74:	000059c0 	call	59c <__sprint_r>
     b78:	d9c15117 	ldw	r7,1348(sp)
     b7c:	1000551e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     b80:	843ffc04 	addi	r16,r16,-16
     b84:	dc800e17 	ldw	r18,56(sp)
     b88:	dc400d17 	ldw	r17,52(sp)
     b8c:	dd401904 	addi	r21,sp,100
     b90:	9c3fed16 	blt	r19,r16,b48 <___vfprintf_internal_r+0x554>
     b94:	9425883a 	add	r18,r18,r16
     b98:	8c400044 	addi	r17,r17,1
     b9c:	008001c4 	movi	r2,7
     ba0:	af000015 	stw	fp,0(r21)
     ba4:	ac000115 	stw	r16,4(r21)
     ba8:	dc800e15 	stw	r18,56(sp)
     bac:	dc400d15 	stw	r17,52(sp)
     bb0:	14418216 	blt	r2,r17,11bc <___vfprintf_internal_r+0xbc8>
     bb4:	ad400204 	addi	r21,r21,8
     bb8:	d9014c17 	ldw	r4,1328(sp)
     bbc:	2080400c 	andi	r2,r4,256
     bc0:	10004a1e 	bne	r2,zero,cec <___vfprintf_internal_r+0x6f8>
     bc4:	d9414117 	ldw	r5,1284(sp)
     bc8:	91e5883a 	add	r18,r18,r7
     bcc:	8c400044 	addi	r17,r17,1
     bd0:	008001c4 	movi	r2,7
     bd4:	a9400015 	stw	r5,0(r21)
     bd8:	a9c00115 	stw	r7,4(r21)
     bdc:	dc800e15 	stw	r18,56(sp)
     be0:	dc400d15 	stw	r17,52(sp)
     be4:	14416716 	blt	r2,r17,1184 <___vfprintf_internal_r+0xb90>
     be8:	a8c00204 	addi	r3,r21,8
     bec:	d9814c17 	ldw	r6,1328(sp)
     bf0:	3080010c 	andi	r2,r6,4
     bf4:	10002826 	beq	r2,zero,c98 <___vfprintf_internal_r+0x6a4>
     bf8:	d8814a17 	ldw	r2,1320(sp)
     bfc:	d9014517 	ldw	r4,1300(sp)
     c00:	1121c83a 	sub	r16,r2,r4
     c04:	0400240e 	bge	zero,r16,c98 <___vfprintf_internal_r+0x6a4>
     c08:	00800404 	movi	r2,16
     c0c:	14044f0e 	bge	r2,r16,1d4c <___vfprintf_internal_r+0x1758>
     c10:	dc400d17 	ldw	r17,52(sp)
     c14:	1027883a 	mov	r19,r2
     c18:	07000074 	movhi	fp,1
     c1c:	e731b784 	addi	fp,fp,-14626
     c20:	050001c4 	movi	r20,7
     c24:	00000306 	br	c34 <___vfprintf_internal_r+0x640>
     c28:	843ffc04 	addi	r16,r16,-16
     c2c:	18c00204 	addi	r3,r3,8
     c30:	9c00110e 	bge	r19,r16,c78 <___vfprintf_internal_r+0x684>
     c34:	94800404 	addi	r18,r18,16
     c38:	8c400044 	addi	r17,r17,1
     c3c:	1f000015 	stw	fp,0(r3)
     c40:	1cc00115 	stw	r19,4(r3)
     c44:	dc800e15 	stw	r18,56(sp)
     c48:	dc400d15 	stw	r17,52(sp)
     c4c:	a47ff60e 	bge	r20,r17,c28 <___vfprintf_internal_r+0x634>
     c50:	d9014f17 	ldw	r4,1340(sp)
     c54:	b00b883a 	mov	r5,r22
     c58:	d9800c04 	addi	r6,sp,48
     c5c:	000059c0 	call	59c <__sprint_r>
     c60:	10001c1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     c64:	843ffc04 	addi	r16,r16,-16
     c68:	dc800e17 	ldw	r18,56(sp)
     c6c:	dc400d17 	ldw	r17,52(sp)
     c70:	d8c01904 	addi	r3,sp,100
     c74:	9c3fef16 	blt	r19,r16,c34 <___vfprintf_internal_r+0x640>
     c78:	9425883a 	add	r18,r18,r16
     c7c:	8c400044 	addi	r17,r17,1
     c80:	008001c4 	movi	r2,7
     c84:	1f000015 	stw	fp,0(r3)
     c88:	1c000115 	stw	r16,4(r3)
     c8c:	dc800e15 	stw	r18,56(sp)
     c90:	dc400d15 	stw	r17,52(sp)
     c94:	1440cb16 	blt	r2,r17,fc4 <___vfprintf_internal_r+0x9d0>
     c98:	d8814a17 	ldw	r2,1320(sp)
     c9c:	d9414517 	ldw	r5,1300(sp)
     ca0:	1140010e 	bge	r2,r5,ca8 <___vfprintf_internal_r+0x6b4>
     ca4:	2805883a 	mov	r2,r5
     ca8:	d9814b17 	ldw	r6,1324(sp)
     cac:	308d883a 	add	r6,r6,r2
     cb0:	d9814b15 	stw	r6,1324(sp)
     cb4:	90013b1e 	bne	r18,zero,11a4 <___vfprintf_internal_r+0xbb0>
     cb8:	d9c14017 	ldw	r7,1280(sp)
     cbc:	dd401904 	addi	r21,sp,100
     cc0:	d8000d15 	stw	zero,52(sp)
     cc4:	003ea706 	br	764 <___vfprintf_internal_r+0x170>
     cc8:	d8800e17 	ldw	r2,56(sp)
     ccc:	10053f1e 	bne	r2,zero,21cc <___vfprintf_internal_r+0x1bd8>
     cd0:	d8000d15 	stw	zero,52(sp)
     cd4:	b080030b 	ldhu	r2,12(r22)
     cd8:	1080100c 	andi	r2,r2,64
     cdc:	103e8726 	beq	r2,zero,6fc <___vfprintf_internal_r+0x108>
     ce0:	00bfffc4 	movi	r2,-1
     ce4:	d8814b15 	stw	r2,1324(sp)
     ce8:	003e8406 	br	6fc <___vfprintf_internal_r+0x108>
     cec:	d9814d17 	ldw	r6,1332(sp)
     cf0:	00801944 	movi	r2,101
     cf4:	11806e16 	blt	r2,r6,eb0 <___vfprintf_internal_r+0x8bc>
     cf8:	d9414717 	ldw	r5,1308(sp)
     cfc:	00c00044 	movi	r3,1
     d00:	1943430e 	bge	r3,r5,1a10 <___vfprintf_internal_r+0x141c>
     d04:	d8814117 	ldw	r2,1284(sp)
     d08:	94800044 	addi	r18,r18,1
     d0c:	8c400044 	addi	r17,r17,1
     d10:	a8800015 	stw	r2,0(r21)
     d14:	008001c4 	movi	r2,7
     d18:	a8c00115 	stw	r3,4(r21)
     d1c:	dc800e15 	stw	r18,56(sp)
     d20:	dc400d15 	stw	r17,52(sp)
     d24:	1441ca16 	blt	r2,r17,1450 <___vfprintf_internal_r+0xe5c>
     d28:	a8c00204 	addi	r3,r21,8
     d2c:	d9014917 	ldw	r4,1316(sp)
     d30:	00800044 	movi	r2,1
     d34:	94800044 	addi	r18,r18,1
     d38:	8c400044 	addi	r17,r17,1
     d3c:	18800115 	stw	r2,4(r3)
     d40:	008001c4 	movi	r2,7
     d44:	19000015 	stw	r4,0(r3)
     d48:	dc800e15 	stw	r18,56(sp)
     d4c:	dc400d15 	stw	r17,52(sp)
     d50:	1441b616 	blt	r2,r17,142c <___vfprintf_internal_r+0xe38>
     d54:	1cc00204 	addi	r19,r3,8
     d58:	d9014217 	ldw	r4,1288(sp)
     d5c:	d9414317 	ldw	r5,1292(sp)
     d60:	000d883a 	mov	r6,zero
     d64:	000f883a 	mov	r7,zero
     d68:	0008eb80 	call	8eb8 <__nedf2>
     d6c:	10017426 	beq	r2,zero,1340 <___vfprintf_internal_r+0xd4c>
     d70:	d9414717 	ldw	r5,1308(sp)
     d74:	d9814117 	ldw	r6,1284(sp)
     d78:	8c400044 	addi	r17,r17,1
     d7c:	2c85883a 	add	r2,r5,r18
     d80:	14bfffc4 	addi	r18,r2,-1
     d84:	28bfffc4 	addi	r2,r5,-1
     d88:	30c00044 	addi	r3,r6,1
     d8c:	98800115 	stw	r2,4(r19)
     d90:	008001c4 	movi	r2,7
     d94:	98c00015 	stw	r3,0(r19)
     d98:	dc800e15 	stw	r18,56(sp)
     d9c:	dc400d15 	stw	r17,52(sp)
     da0:	14418e16 	blt	r2,r17,13dc <___vfprintf_internal_r+0xde8>
     da4:	9cc00204 	addi	r19,r19,8
     da8:	d9414817 	ldw	r5,1312(sp)
     dac:	d8800804 	addi	r2,sp,32
     db0:	8c400044 	addi	r17,r17,1
     db4:	9165883a 	add	r18,r18,r5
     db8:	98800015 	stw	r2,0(r19)
     dbc:	008001c4 	movi	r2,7
     dc0:	99400115 	stw	r5,4(r19)
     dc4:	dc800e15 	stw	r18,56(sp)
     dc8:	dc400d15 	stw	r17,52(sp)
     dcc:	1440ed16 	blt	r2,r17,1184 <___vfprintf_internal_r+0xb90>
     dd0:	98c00204 	addi	r3,r19,8
     dd4:	003f8506 	br	bec <___vfprintf_internal_r+0x5f8>
     dd8:	d9814a17 	ldw	r6,1320(sp)
     ddc:	d8814517 	ldw	r2,1300(sp)
     de0:	30a1c83a 	sub	r16,r6,r2
     de4:	043f4b0e 	bge	zero,r16,b14 <___vfprintf_internal_r+0x520>
     de8:	00800404 	movi	r2,16
     dec:	1404340e 	bge	r2,r16,1ec0 <___vfprintf_internal_r+0x18cc>
     df0:	1027883a 	mov	r19,r2
     df4:	07000074 	movhi	fp,1
     df8:	e731b384 	addi	fp,fp,-14642
     dfc:	050001c4 	movi	r20,7
     e00:	00000306 	br	e10 <___vfprintf_internal_r+0x81c>
     e04:	843ffc04 	addi	r16,r16,-16
     e08:	ad400204 	addi	r21,r21,8
     e0c:	9c00130e 	bge	r19,r16,e5c <___vfprintf_internal_r+0x868>
     e10:	94800404 	addi	r18,r18,16
     e14:	8c400044 	addi	r17,r17,1
     e18:	af000015 	stw	fp,0(r21)
     e1c:	acc00115 	stw	r19,4(r21)
     e20:	dc800e15 	stw	r18,56(sp)
     e24:	dc400d15 	stw	r17,52(sp)
     e28:	a47ff60e 	bge	r20,r17,e04 <___vfprintf_internal_r+0x810>
     e2c:	d9014f17 	ldw	r4,1340(sp)
     e30:	b00b883a 	mov	r5,r22
     e34:	d9800c04 	addi	r6,sp,48
     e38:	d9c15115 	stw	r7,1348(sp)
     e3c:	000059c0 	call	59c <__sprint_r>
     e40:	d9c15117 	ldw	r7,1348(sp)
     e44:	103fa31e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     e48:	843ffc04 	addi	r16,r16,-16
     e4c:	dc800e17 	ldw	r18,56(sp)
     e50:	dc400d17 	ldw	r17,52(sp)
     e54:	dd401904 	addi	r21,sp,100
     e58:	9c3fed16 	blt	r19,r16,e10 <___vfprintf_internal_r+0x81c>
     e5c:	9425883a 	add	r18,r18,r16
     e60:	8c400044 	addi	r17,r17,1
     e64:	008001c4 	movi	r2,7
     e68:	af000015 	stw	fp,0(r21)
     e6c:	ac000115 	stw	r16,4(r21)
     e70:	dc800e15 	stw	r18,56(sp)
     e74:	dc400d15 	stw	r17,52(sp)
     e78:	14416116 	blt	r2,r17,1400 <___vfprintf_internal_r+0xe0c>
     e7c:	ad400204 	addi	r21,r21,8
     e80:	003f2406 	br	b14 <___vfprintf_internal_r+0x520>
     e84:	d9014f17 	ldw	r4,1340(sp)
     e88:	00040640 	call	4064 <__sinit>
     e8c:	d9c15117 	ldw	r7,1348(sp)
     e90:	003def06 	br	650 <___vfprintf_internal_r+0x5c>
     e94:	d9014f17 	ldw	r4,1340(sp)
     e98:	b00b883a 	mov	r5,r22
     e9c:	d9c15115 	stw	r7,1348(sp)
     ea0:	00024c40 	call	24c4 <__swsetup_r>
     ea4:	d9c15117 	ldw	r7,1348(sp)
     ea8:	103dee26 	beq	r2,zero,664 <___vfprintf_internal_r+0x70>
     eac:	003f8c06 	br	ce0 <___vfprintf_internal_r+0x6ec>
     eb0:	d9014217 	ldw	r4,1288(sp)
     eb4:	d9414317 	ldw	r5,1292(sp)
     eb8:	000d883a 	mov	r6,zero
     ebc:	000f883a 	mov	r7,zero
     ec0:	0008e300 	call	8e30 <__eqdf2>
     ec4:	1000f21e 	bne	r2,zero,1290 <___vfprintf_internal_r+0xc9c>
     ec8:	00800074 	movhi	r2,1
     ecc:	10b1b304 	addi	r2,r2,-14644
     ed0:	94800044 	addi	r18,r18,1
     ed4:	8c400044 	addi	r17,r17,1
     ed8:	a8800015 	stw	r2,0(r21)
     edc:	00c00044 	movi	r3,1
     ee0:	008001c4 	movi	r2,7
     ee4:	a8c00115 	stw	r3,4(r21)
     ee8:	dc800e15 	stw	r18,56(sp)
     eec:	dc400d15 	stw	r17,52(sp)
     ef0:	1442fa16 	blt	r2,r17,1adc <___vfprintf_internal_r+0x14e8>
     ef4:	a8c00204 	addi	r3,r21,8
     ef8:	d8800517 	ldw	r2,20(sp)
     efc:	d9014717 	ldw	r4,1308(sp)
     f00:	11015c0e 	bge	r2,r4,1474 <___vfprintf_internal_r+0xe80>
     f04:	dc400d17 	ldw	r17,52(sp)
     f08:	d9814917 	ldw	r6,1316(sp)
     f0c:	00800044 	movi	r2,1
     f10:	94800044 	addi	r18,r18,1
     f14:	8c400044 	addi	r17,r17,1
     f18:	18800115 	stw	r2,4(r3)
     f1c:	008001c4 	movi	r2,7
     f20:	19800015 	stw	r6,0(r3)
     f24:	dc800e15 	stw	r18,56(sp)
     f28:	dc400d15 	stw	r17,52(sp)
     f2c:	14431016 	blt	r2,r17,1b70 <___vfprintf_internal_r+0x157c>
     f30:	18c00204 	addi	r3,r3,8
     f34:	d8814717 	ldw	r2,1308(sp)
     f38:	143fffc4 	addi	r16,r2,-1
     f3c:	043f2b0e 	bge	zero,r16,bec <___vfprintf_internal_r+0x5f8>
     f40:	00800404 	movi	r2,16
     f44:	1402a20e 	bge	r2,r16,19d0 <___vfprintf_internal_r+0x13dc>
     f48:	dc400d17 	ldw	r17,52(sp)
     f4c:	1027883a 	mov	r19,r2
     f50:	07000074 	movhi	fp,1
     f54:	e731b384 	addi	fp,fp,-14642
     f58:	050001c4 	movi	r20,7
     f5c:	00000306 	br	f6c <___vfprintf_internal_r+0x978>
     f60:	18c00204 	addi	r3,r3,8
     f64:	843ffc04 	addi	r16,r16,-16
     f68:	9c029c0e 	bge	r19,r16,19dc <___vfprintf_internal_r+0x13e8>
     f6c:	94800404 	addi	r18,r18,16
     f70:	8c400044 	addi	r17,r17,1
     f74:	1f000015 	stw	fp,0(r3)
     f78:	1cc00115 	stw	r19,4(r3)
     f7c:	dc800e15 	stw	r18,56(sp)
     f80:	dc400d15 	stw	r17,52(sp)
     f84:	a47ff60e 	bge	r20,r17,f60 <___vfprintf_internal_r+0x96c>
     f88:	d9014f17 	ldw	r4,1340(sp)
     f8c:	b00b883a 	mov	r5,r22
     f90:	d9800c04 	addi	r6,sp,48
     f94:	000059c0 	call	59c <__sprint_r>
     f98:	103f4e1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     f9c:	dc800e17 	ldw	r18,56(sp)
     fa0:	dc400d17 	ldw	r17,52(sp)
     fa4:	d8c01904 	addi	r3,sp,100
     fa8:	003fee06 	br	f64 <___vfprintf_internal_r+0x970>
     fac:	d8802c0b 	ldhu	r2,176(sp)
     fb0:	00ffffc4 	movi	r3,-1
     fb4:	d8c14b15 	stw	r3,1324(sp)
     fb8:	1080100c 	andi	r2,r2,64
     fbc:	103dcc1e 	bne	r2,zero,6f0 <___vfprintf_internal_r+0xfc>
     fc0:	003dce06 	br	6fc <___vfprintf_internal_r+0x108>
     fc4:	d9014f17 	ldw	r4,1340(sp)
     fc8:	b00b883a 	mov	r5,r22
     fcc:	d9800c04 	addi	r6,sp,48
     fd0:	000059c0 	call	59c <__sprint_r>
     fd4:	103f3f1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
     fd8:	dc800e17 	ldw	r18,56(sp)
     fdc:	003f2e06 	br	c98 <___vfprintf_internal_r+0x6a4>
     fe0:	d9414c17 	ldw	r5,1328(sp)
     fe4:	29400414 	ori	r5,r5,16
     fe8:	d9414c15 	stw	r5,1328(sp)
     fec:	d9814c17 	ldw	r6,1328(sp)
     ff0:	3080080c 	andi	r2,r6,32
     ff4:	10014f1e 	bne	r2,zero,1534 <___vfprintf_internal_r+0xf40>
     ff8:	d8c14c17 	ldw	r3,1328(sp)
     ffc:	1880040c 	andi	r2,r3,16
    1000:	1002ea1e 	bne	r2,zero,1bac <___vfprintf_internal_r+0x15b8>
    1004:	d9014c17 	ldw	r4,1328(sp)
    1008:	2080100c 	andi	r2,r4,64
    100c:	1002e726 	beq	r2,zero,1bac <___vfprintf_internal_r+0x15b8>
    1010:	3880000f 	ldh	r2,0(r7)
    1014:	39c00104 	addi	r7,r7,4
    1018:	d9c14015 	stw	r7,1280(sp)
    101c:	1023d7fa 	srai	r17,r2,31
    1020:	1021883a 	mov	r16,r2
    1024:	88037216 	blt	r17,zero,1df0 <___vfprintf_internal_r+0x17fc>
    1028:	01000044 	movi	r4,1
    102c:	98000416 	blt	r19,zero,1040 <___vfprintf_internal_r+0xa4c>
    1030:	d8c14c17 	ldw	r3,1328(sp)
    1034:	00bfdfc4 	movi	r2,-129
    1038:	1886703a 	and	r3,r3,r2
    103c:	d8c14c15 	stw	r3,1328(sp)
    1040:	8444b03a 	or	r2,r16,r17
    1044:	1002261e 	bne	r2,zero,18e0 <___vfprintf_internal_r+0x12ec>
    1048:	9802251e 	bne	r19,zero,18e0 <___vfprintf_internal_r+0x12ec>
    104c:	20803fcc 	andi	r2,r4,255
    1050:	10029b26 	beq	r2,zero,1ac0 <___vfprintf_internal_r+0x14cc>
    1054:	d8c01904 	addi	r3,sp,100
    1058:	dd000f04 	addi	r20,sp,60
    105c:	d8c14115 	stw	r3,1284(sp)
    1060:	d8c14117 	ldw	r3,1284(sp)
    1064:	dcc14515 	stw	r19,1300(sp)
    1068:	a0c5c83a 	sub	r2,r20,r3
    106c:	11c00a04 	addi	r7,r2,40
    1070:	99c0010e 	bge	r19,r7,1078 <___vfprintf_internal_r+0xa84>
    1074:	d9c14515 	stw	r7,1300(sp)
    1078:	dcc14615 	stw	r19,1304(sp)
    107c:	d8800407 	ldb	r2,16(sp)
    1080:	103e4c26 	beq	r2,zero,9b4 <___vfprintf_internal_r+0x3c0>
    1084:	d8814517 	ldw	r2,1300(sp)
    1088:	10800044 	addi	r2,r2,1
    108c:	d8814515 	stw	r2,1300(sp)
    1090:	003e4806 	br	9b4 <___vfprintf_internal_r+0x3c0>
    1094:	d9814c17 	ldw	r6,1328(sp)
    1098:	31800414 	ori	r6,r6,16
    109c:	d9814c15 	stw	r6,1328(sp)
    10a0:	d8c14c17 	ldw	r3,1328(sp)
    10a4:	1880080c 	andi	r2,r3,32
    10a8:	1001271e 	bne	r2,zero,1548 <___vfprintf_internal_r+0xf54>
    10ac:	d9414c17 	ldw	r5,1328(sp)
    10b0:	2880040c 	andi	r2,r5,16
    10b4:	1002b61e 	bne	r2,zero,1b90 <___vfprintf_internal_r+0x159c>
    10b8:	d9814c17 	ldw	r6,1328(sp)
    10bc:	3080100c 	andi	r2,r6,64
    10c0:	1002b326 	beq	r2,zero,1b90 <___vfprintf_internal_r+0x159c>
    10c4:	3c00000b 	ldhu	r16,0(r7)
    10c8:	0009883a 	mov	r4,zero
    10cc:	39c00104 	addi	r7,r7,4
    10d0:	0023883a 	mov	r17,zero
    10d4:	d9c14015 	stw	r7,1280(sp)
    10d8:	d8000405 	stb	zero,16(sp)
    10dc:	003fd306 	br	102c <___vfprintf_internal_r+0xa38>
    10e0:	d9014c17 	ldw	r4,1328(sp)
    10e4:	21000414 	ori	r4,r4,16
    10e8:	d9014c15 	stw	r4,1328(sp)
    10ec:	d9414c17 	ldw	r5,1328(sp)
    10f0:	2880080c 	andi	r2,r5,32
    10f4:	1001081e 	bne	r2,zero,1518 <___vfprintf_internal_r+0xf24>
    10f8:	d8c14c17 	ldw	r3,1328(sp)
    10fc:	1880040c 	andi	r2,r3,16
    1100:	1002b01e 	bne	r2,zero,1bc4 <___vfprintf_internal_r+0x15d0>
    1104:	d9014c17 	ldw	r4,1328(sp)
    1108:	2080100c 	andi	r2,r4,64
    110c:	1002ad26 	beq	r2,zero,1bc4 <___vfprintf_internal_r+0x15d0>
    1110:	3c00000b 	ldhu	r16,0(r7)
    1114:	01000044 	movi	r4,1
    1118:	39c00104 	addi	r7,r7,4
    111c:	0023883a 	mov	r17,zero
    1120:	d9c14015 	stw	r7,1280(sp)
    1124:	d8000405 	stb	zero,16(sp)
    1128:	003fc006 	br	102c <___vfprintf_internal_r+0xa38>
    112c:	d9014f17 	ldw	r4,1340(sp)
    1130:	b00b883a 	mov	r5,r22
    1134:	d9800c04 	addi	r6,sp,48
    1138:	000059c0 	call	59c <__sprint_r>
    113c:	103ee51e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1140:	dc800e17 	ldw	r18,56(sp)
    1144:	d8c01904 	addi	r3,sp,100
    1148:	d9814c17 	ldw	r6,1328(sp)
    114c:	3080004c 	andi	r2,r6,1
    1150:	1005003a 	cmpeq	r2,r2,zero
    1154:	103ea51e 	bne	r2,zero,bec <___vfprintf_internal_r+0x5f8>
    1158:	00800044 	movi	r2,1
    115c:	dc400d17 	ldw	r17,52(sp)
    1160:	18800115 	stw	r2,4(r3)
    1164:	d8814917 	ldw	r2,1316(sp)
    1168:	94800044 	addi	r18,r18,1
    116c:	8c400044 	addi	r17,r17,1
    1170:	18800015 	stw	r2,0(r3)
    1174:	008001c4 	movi	r2,7
    1178:	dc800e15 	stw	r18,56(sp)
    117c:	dc400d15 	stw	r17,52(sp)
    1180:	14421e0e 	bge	r2,r17,19fc <___vfprintf_internal_r+0x1408>
    1184:	d9014f17 	ldw	r4,1340(sp)
    1188:	b00b883a 	mov	r5,r22
    118c:	d9800c04 	addi	r6,sp,48
    1190:	000059c0 	call	59c <__sprint_r>
    1194:	103ecf1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1198:	dc800e17 	ldw	r18,56(sp)
    119c:	d8c01904 	addi	r3,sp,100
    11a0:	003e9206 	br	bec <___vfprintf_internal_r+0x5f8>
    11a4:	d9014f17 	ldw	r4,1340(sp)
    11a8:	b00b883a 	mov	r5,r22
    11ac:	d9800c04 	addi	r6,sp,48
    11b0:	000059c0 	call	59c <__sprint_r>
    11b4:	103ec026 	beq	r2,zero,cb8 <___vfprintf_internal_r+0x6c4>
    11b8:	003ec606 	br	cd4 <___vfprintf_internal_r+0x6e0>
    11bc:	d9014f17 	ldw	r4,1340(sp)
    11c0:	b00b883a 	mov	r5,r22
    11c4:	d9800c04 	addi	r6,sp,48
    11c8:	d9c15115 	stw	r7,1348(sp)
    11cc:	000059c0 	call	59c <__sprint_r>
    11d0:	d9c15117 	ldw	r7,1348(sp)
    11d4:	103ebf1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    11d8:	dc800e17 	ldw	r18,56(sp)
    11dc:	dc400d17 	ldw	r17,52(sp)
    11e0:	dd401904 	addi	r21,sp,100
    11e4:	003e7406 	br	bb8 <___vfprintf_internal_r+0x5c4>
    11e8:	d9014f17 	ldw	r4,1340(sp)
    11ec:	b00b883a 	mov	r5,r22
    11f0:	d9800c04 	addi	r6,sp,48
    11f4:	d9c15115 	stw	r7,1348(sp)
    11f8:	000059c0 	call	59c <__sprint_r>
    11fc:	d9c15117 	ldw	r7,1348(sp)
    1200:	103eb41e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1204:	dd401904 	addi	r21,sp,100
    1208:	003d6d06 	br	7c0 <___vfprintf_internal_r+0x1cc>
    120c:	d9014f17 	ldw	r4,1340(sp)
    1210:	b00b883a 	mov	r5,r22
    1214:	d9800c04 	addi	r6,sp,48
    1218:	d9c15115 	stw	r7,1348(sp)
    121c:	000059c0 	call	59c <__sprint_r>
    1220:	d9c15117 	ldw	r7,1348(sp)
    1224:	103eab1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1228:	dc800e17 	ldw	r18,56(sp)
    122c:	dc400d17 	ldw	r17,52(sp)
    1230:	dd401904 	addi	r21,sp,100
    1234:	003e3406 	br	b08 <___vfprintf_internal_r+0x514>
    1238:	d9014f17 	ldw	r4,1340(sp)
    123c:	b00b883a 	mov	r5,r22
    1240:	d9800c04 	addi	r6,sp,48
    1244:	d9c15115 	stw	r7,1348(sp)
    1248:	000059c0 	call	59c <__sprint_r>
    124c:	d9c15117 	ldw	r7,1348(sp)
    1250:	103ea01e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1254:	dc800e17 	ldw	r18,56(sp)
    1258:	dc400d17 	ldw	r17,52(sp)
    125c:	dd401904 	addi	r21,sp,100
    1260:	003e1c06 	br	ad4 <___vfprintf_internal_r+0x4e0>
    1264:	d9014f17 	ldw	r4,1340(sp)
    1268:	b00b883a 	mov	r5,r22
    126c:	d9800c04 	addi	r6,sp,48
    1270:	d9c15115 	stw	r7,1348(sp)
    1274:	000059c0 	call	59c <__sprint_r>
    1278:	d9c15117 	ldw	r7,1348(sp)
    127c:	103e951e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1280:	dc800e17 	ldw	r18,56(sp)
    1284:	dc400d17 	ldw	r17,52(sp)
    1288:	dd401904 	addi	r21,sp,100
    128c:	003e0406 	br	aa0 <___vfprintf_internal_r+0x4ac>
    1290:	d9000517 	ldw	r4,20(sp)
    1294:	0102520e 	bge	zero,r4,1be0 <___vfprintf_internal_r+0x15ec>
    1298:	d9814717 	ldw	r6,1308(sp)
    129c:	21807a16 	blt	r4,r6,1488 <___vfprintf_internal_r+0xe94>
    12a0:	d8814117 	ldw	r2,1284(sp)
    12a4:	91a5883a 	add	r18,r18,r6
    12a8:	8c400044 	addi	r17,r17,1
    12ac:	a8800015 	stw	r2,0(r21)
    12b0:	008001c4 	movi	r2,7
    12b4:	a9800115 	stw	r6,4(r21)
    12b8:	dc800e15 	stw	r18,56(sp)
    12bc:	dc400d15 	stw	r17,52(sp)
    12c0:	1442f616 	blt	r2,r17,1e9c <___vfprintf_internal_r+0x18a8>
    12c4:	a8c00204 	addi	r3,r21,8
    12c8:	d9414717 	ldw	r5,1308(sp)
    12cc:	2161c83a 	sub	r16,r4,r5
    12d0:	043f9d0e 	bge	zero,r16,1148 <___vfprintf_internal_r+0xb54>
    12d4:	00800404 	movi	r2,16
    12d8:	1402130e 	bge	r2,r16,1b28 <___vfprintf_internal_r+0x1534>
    12dc:	dc400d17 	ldw	r17,52(sp)
    12e0:	1027883a 	mov	r19,r2
    12e4:	07000074 	movhi	fp,1
    12e8:	e731b384 	addi	fp,fp,-14642
    12ec:	050001c4 	movi	r20,7
    12f0:	00000306 	br	1300 <___vfprintf_internal_r+0xd0c>
    12f4:	18c00204 	addi	r3,r3,8
    12f8:	843ffc04 	addi	r16,r16,-16
    12fc:	9c020d0e 	bge	r19,r16,1b34 <___vfprintf_internal_r+0x1540>
    1300:	94800404 	addi	r18,r18,16
    1304:	8c400044 	addi	r17,r17,1
    1308:	1f000015 	stw	fp,0(r3)
    130c:	1cc00115 	stw	r19,4(r3)
    1310:	dc800e15 	stw	r18,56(sp)
    1314:	dc400d15 	stw	r17,52(sp)
    1318:	a47ff60e 	bge	r20,r17,12f4 <___vfprintf_internal_r+0xd00>
    131c:	d9014f17 	ldw	r4,1340(sp)
    1320:	b00b883a 	mov	r5,r22
    1324:	d9800c04 	addi	r6,sp,48
    1328:	000059c0 	call	59c <__sprint_r>
    132c:	103e691e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1330:	dc800e17 	ldw	r18,56(sp)
    1334:	dc400d17 	ldw	r17,52(sp)
    1338:	d8c01904 	addi	r3,sp,100
    133c:	003fee06 	br	12f8 <___vfprintf_internal_r+0xd04>
    1340:	d8814717 	ldw	r2,1308(sp)
    1344:	143fffc4 	addi	r16,r2,-1
    1348:	043e970e 	bge	zero,r16,da8 <___vfprintf_internal_r+0x7b4>
    134c:	00800404 	movi	r2,16
    1350:	1400180e 	bge	r2,r16,13b4 <___vfprintf_internal_r+0xdc0>
    1354:	1029883a 	mov	r20,r2
    1358:	07000074 	movhi	fp,1
    135c:	e731b384 	addi	fp,fp,-14642
    1360:	054001c4 	movi	r21,7
    1364:	00000306 	br	1374 <___vfprintf_internal_r+0xd80>
    1368:	9cc00204 	addi	r19,r19,8
    136c:	843ffc04 	addi	r16,r16,-16
    1370:	a400120e 	bge	r20,r16,13bc <___vfprintf_internal_r+0xdc8>
    1374:	94800404 	addi	r18,r18,16
    1378:	8c400044 	addi	r17,r17,1
    137c:	9f000015 	stw	fp,0(r19)
    1380:	9d000115 	stw	r20,4(r19)
    1384:	dc800e15 	stw	r18,56(sp)
    1388:	dc400d15 	stw	r17,52(sp)
    138c:	ac7ff60e 	bge	r21,r17,1368 <___vfprintf_internal_r+0xd74>
    1390:	d9014f17 	ldw	r4,1340(sp)
    1394:	b00b883a 	mov	r5,r22
    1398:	d9800c04 	addi	r6,sp,48
    139c:	000059c0 	call	59c <__sprint_r>
    13a0:	103e4c1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    13a4:	dc800e17 	ldw	r18,56(sp)
    13a8:	dc400d17 	ldw	r17,52(sp)
    13ac:	dcc01904 	addi	r19,sp,100
    13b0:	003fee06 	br	136c <___vfprintf_internal_r+0xd78>
    13b4:	07000074 	movhi	fp,1
    13b8:	e731b384 	addi	fp,fp,-14642
    13bc:	9425883a 	add	r18,r18,r16
    13c0:	8c400044 	addi	r17,r17,1
    13c4:	008001c4 	movi	r2,7
    13c8:	9f000015 	stw	fp,0(r19)
    13cc:	9c000115 	stw	r16,4(r19)
    13d0:	dc800e15 	stw	r18,56(sp)
    13d4:	dc400d15 	stw	r17,52(sp)
    13d8:	147e720e 	bge	r2,r17,da4 <___vfprintf_internal_r+0x7b0>
    13dc:	d9014f17 	ldw	r4,1340(sp)
    13e0:	b00b883a 	mov	r5,r22
    13e4:	d9800c04 	addi	r6,sp,48
    13e8:	000059c0 	call	59c <__sprint_r>
    13ec:	103e391e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    13f0:	dc800e17 	ldw	r18,56(sp)
    13f4:	dc400d17 	ldw	r17,52(sp)
    13f8:	dcc01904 	addi	r19,sp,100
    13fc:	003e6a06 	br	da8 <___vfprintf_internal_r+0x7b4>
    1400:	d9014f17 	ldw	r4,1340(sp)
    1404:	b00b883a 	mov	r5,r22
    1408:	d9800c04 	addi	r6,sp,48
    140c:	d9c15115 	stw	r7,1348(sp)
    1410:	000059c0 	call	59c <__sprint_r>
    1414:	d9c15117 	ldw	r7,1348(sp)
    1418:	103e2e1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    141c:	dc800e17 	ldw	r18,56(sp)
    1420:	dc400d17 	ldw	r17,52(sp)
    1424:	dd401904 	addi	r21,sp,100
    1428:	003dba06 	br	b14 <___vfprintf_internal_r+0x520>
    142c:	d9014f17 	ldw	r4,1340(sp)
    1430:	b00b883a 	mov	r5,r22
    1434:	d9800c04 	addi	r6,sp,48
    1438:	000059c0 	call	59c <__sprint_r>
    143c:	103e251e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1440:	dc800e17 	ldw	r18,56(sp)
    1444:	dc400d17 	ldw	r17,52(sp)
    1448:	dcc01904 	addi	r19,sp,100
    144c:	003e4206 	br	d58 <___vfprintf_internal_r+0x764>
    1450:	d9014f17 	ldw	r4,1340(sp)
    1454:	b00b883a 	mov	r5,r22
    1458:	d9800c04 	addi	r6,sp,48
    145c:	000059c0 	call	59c <__sprint_r>
    1460:	103e1c1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1464:	dc800e17 	ldw	r18,56(sp)
    1468:	dc400d17 	ldw	r17,52(sp)
    146c:	d8c01904 	addi	r3,sp,100
    1470:	003e2e06 	br	d2c <___vfprintf_internal_r+0x738>
    1474:	d9414c17 	ldw	r5,1328(sp)
    1478:	2880004c 	andi	r2,r5,1
    147c:	1005003a 	cmpeq	r2,r2,zero
    1480:	103dda1e 	bne	r2,zero,bec <___vfprintf_internal_r+0x5f8>
    1484:	003e9f06 	br	f04 <___vfprintf_internal_r+0x910>
    1488:	d8c14117 	ldw	r3,1284(sp)
    148c:	9125883a 	add	r18,r18,r4
    1490:	8c400044 	addi	r17,r17,1
    1494:	008001c4 	movi	r2,7
    1498:	a8c00015 	stw	r3,0(r21)
    149c:	a9000115 	stw	r4,4(r21)
    14a0:	dc800e15 	stw	r18,56(sp)
    14a4:	dc400d15 	stw	r17,52(sp)
    14a8:	14426616 	blt	r2,r17,1e44 <___vfprintf_internal_r+0x1850>
    14ac:	a8c00204 	addi	r3,r21,8
    14b0:	d9414917 	ldw	r5,1316(sp)
    14b4:	00800044 	movi	r2,1
    14b8:	94800044 	addi	r18,r18,1
    14bc:	8c400044 	addi	r17,r17,1
    14c0:	18800115 	stw	r2,4(r3)
    14c4:	008001c4 	movi	r2,7
    14c8:	19400015 	stw	r5,0(r3)
    14cc:	dc800e15 	stw	r18,56(sp)
    14d0:	dc400d15 	stw	r17,52(sp)
    14d4:	2021883a 	mov	r16,r4
    14d8:	14425016 	blt	r2,r17,1e1c <___vfprintf_internal_r+0x1828>
    14dc:	19400204 	addi	r5,r3,8
    14e0:	d9814717 	ldw	r6,1308(sp)
    14e4:	8c400044 	addi	r17,r17,1
    14e8:	dc400d15 	stw	r17,52(sp)
    14ec:	3107c83a 	sub	r3,r6,r4
    14f0:	d9014117 	ldw	r4,1284(sp)
    14f4:	90e5883a 	add	r18,r18,r3
    14f8:	28c00115 	stw	r3,4(r5)
    14fc:	8105883a 	add	r2,r16,r4
    1500:	28800015 	stw	r2,0(r5)
    1504:	008001c4 	movi	r2,7
    1508:	dc800e15 	stw	r18,56(sp)
    150c:	147f1d16 	blt	r2,r17,1184 <___vfprintf_internal_r+0xb90>
    1510:	28c00204 	addi	r3,r5,8
    1514:	003db506 	br	bec <___vfprintf_internal_r+0x5f8>
    1518:	3c000017 	ldw	r16,0(r7)
    151c:	3c400117 	ldw	r17,4(r7)
    1520:	39800204 	addi	r6,r7,8
    1524:	01000044 	movi	r4,1
    1528:	d9814015 	stw	r6,1280(sp)
    152c:	d8000405 	stb	zero,16(sp)
    1530:	003ebe06 	br	102c <___vfprintf_internal_r+0xa38>
    1534:	3c000017 	ldw	r16,0(r7)
    1538:	3c400117 	ldw	r17,4(r7)
    153c:	38800204 	addi	r2,r7,8
    1540:	d8814015 	stw	r2,1280(sp)
    1544:	003eb706 	br	1024 <___vfprintf_internal_r+0xa30>
    1548:	3c000017 	ldw	r16,0(r7)
    154c:	3c400117 	ldw	r17,4(r7)
    1550:	39000204 	addi	r4,r7,8
    1554:	d9014015 	stw	r4,1280(sp)
    1558:	0009883a 	mov	r4,zero
    155c:	d8000405 	stb	zero,16(sp)
    1560:	003eb206 	br	102c <___vfprintf_internal_r+0xa38>
    1564:	38c00017 	ldw	r3,0(r7)
    1568:	39c00104 	addi	r7,r7,4
    156c:	d8c14a15 	stw	r3,1320(sp)
    1570:	1800d10e 	bge	r3,zero,18b8 <___vfprintf_internal_r+0x12c4>
    1574:	00c7c83a 	sub	r3,zero,r3
    1578:	d8c14a15 	stw	r3,1320(sp)
    157c:	d9014c17 	ldw	r4,1328(sp)
    1580:	b8c00007 	ldb	r3,0(r23)
    1584:	21000114 	ori	r4,r4,4
    1588:	d9014c15 	stw	r4,1328(sp)
    158c:	003c9806 	br	7f0 <___vfprintf_internal_r+0x1fc>
    1590:	d9814c17 	ldw	r6,1328(sp)
    1594:	3080080c 	andi	r2,r6,32
    1598:	1001f026 	beq	r2,zero,1d5c <___vfprintf_internal_r+0x1768>
    159c:	d9014b17 	ldw	r4,1324(sp)
    15a0:	38800017 	ldw	r2,0(r7)
    15a4:	39c00104 	addi	r7,r7,4
    15a8:	d9c14015 	stw	r7,1280(sp)
    15ac:	2007d7fa 	srai	r3,r4,31
    15b0:	d9c14017 	ldw	r7,1280(sp)
    15b4:	11000015 	stw	r4,0(r2)
    15b8:	10c00115 	stw	r3,4(r2)
    15bc:	003c6906 	br	764 <___vfprintf_internal_r+0x170>
    15c0:	b8c00007 	ldb	r3,0(r23)
    15c4:	00801b04 	movi	r2,108
    15c8:	18824f26 	beq	r3,r2,1f08 <___vfprintf_internal_r+0x1914>
    15cc:	d9414c17 	ldw	r5,1328(sp)
    15d0:	29400414 	ori	r5,r5,16
    15d4:	d9414c15 	stw	r5,1328(sp)
    15d8:	003c8506 	br	7f0 <___vfprintf_internal_r+0x1fc>
    15dc:	d9814c17 	ldw	r6,1328(sp)
    15e0:	b8c00007 	ldb	r3,0(r23)
    15e4:	31800814 	ori	r6,r6,32
    15e8:	d9814c15 	stw	r6,1328(sp)
    15ec:	003c8006 	br	7f0 <___vfprintf_internal_r+0x1fc>
    15f0:	d8814c17 	ldw	r2,1328(sp)
    15f4:	3c000017 	ldw	r16,0(r7)
    15f8:	00c01e04 	movi	r3,120
    15fc:	10800094 	ori	r2,r2,2
    1600:	d8814c15 	stw	r2,1328(sp)
    1604:	39c00104 	addi	r7,r7,4
    1608:	01400074 	movhi	r5,1
    160c:	29719c04 	addi	r5,r5,-14736
    1610:	00800c04 	movi	r2,48
    1614:	0023883a 	mov	r17,zero
    1618:	01000084 	movi	r4,2
    161c:	d9c14015 	stw	r7,1280(sp)
    1620:	d8c14d15 	stw	r3,1332(sp)
    1624:	d9414415 	stw	r5,1296(sp)
    1628:	d8800445 	stb	r2,17(sp)
    162c:	d8c00485 	stb	r3,18(sp)
    1630:	d8000405 	stb	zero,16(sp)
    1634:	003e7d06 	br	102c <___vfprintf_internal_r+0xa38>
    1638:	d8814c17 	ldw	r2,1328(sp)
    163c:	b8c00007 	ldb	r3,0(r23)
    1640:	10801014 	ori	r2,r2,64
    1644:	d8814c15 	stw	r2,1328(sp)
    1648:	003c6906 	br	7f0 <___vfprintf_internal_r+0x1fc>
    164c:	d9414c17 	ldw	r5,1328(sp)
    1650:	2880020c 	andi	r2,r5,8
    1654:	1001df26 	beq	r2,zero,1dd4 <___vfprintf_internal_r+0x17e0>
    1658:	39800017 	ldw	r6,0(r7)
    165c:	38800204 	addi	r2,r7,8
    1660:	d8814015 	stw	r2,1280(sp)
    1664:	d9814215 	stw	r6,1288(sp)
    1668:	39c00117 	ldw	r7,4(r7)
    166c:	d9c14315 	stw	r7,1292(sp)
    1670:	d9014217 	ldw	r4,1288(sp)
    1674:	d9414317 	ldw	r5,1292(sp)
    1678:	0006f940 	call	6f94 <__isinfd>
    167c:	10021726 	beq	r2,zero,1edc <___vfprintf_internal_r+0x18e8>
    1680:	d9014217 	ldw	r4,1288(sp)
    1684:	d9414317 	ldw	r5,1292(sp)
    1688:	000d883a 	mov	r6,zero
    168c:	000f883a 	mov	r7,zero
    1690:	00090500 	call	9050 <__ltdf2>
    1694:	1002ca16 	blt	r2,zero,21c0 <___vfprintf_internal_r+0x1bcc>
    1698:	d9414d17 	ldw	r5,1332(sp)
    169c:	008011c4 	movi	r2,71
    16a0:	11420a16 	blt	r2,r5,1ecc <___vfprintf_internal_r+0x18d8>
    16a4:	01800074 	movhi	r6,1
    16a8:	31b1a104 	addi	r6,r6,-14716
    16ac:	d9814115 	stw	r6,1284(sp)
    16b0:	d9014c17 	ldw	r4,1328(sp)
    16b4:	00c000c4 	movi	r3,3
    16b8:	00bfdfc4 	movi	r2,-129
    16bc:	2088703a 	and	r4,r4,r2
    16c0:	180f883a 	mov	r7,r3
    16c4:	d8c14515 	stw	r3,1300(sp)
    16c8:	d9014c15 	stw	r4,1328(sp)
    16cc:	d8014615 	stw	zero,1304(sp)
    16d0:	003e6a06 	br	107c <___vfprintf_internal_r+0xa88>
    16d4:	38800017 	ldw	r2,0(r7)
    16d8:	00c00044 	movi	r3,1
    16dc:	39c00104 	addi	r7,r7,4
    16e0:	d9c14015 	stw	r7,1280(sp)
    16e4:	d9000f04 	addi	r4,sp,60
    16e8:	180f883a 	mov	r7,r3
    16ec:	d8c14515 	stw	r3,1300(sp)
    16f0:	d9014115 	stw	r4,1284(sp)
    16f4:	d8800f05 	stb	r2,60(sp)
    16f8:	d8000405 	stb	zero,16(sp)
    16fc:	003cac06 	br	9b0 <___vfprintf_internal_r+0x3bc>
    1700:	01400074 	movhi	r5,1
    1704:	2971a704 	addi	r5,r5,-14692
    1708:	d9414415 	stw	r5,1296(sp)
    170c:	d9814c17 	ldw	r6,1328(sp)
    1710:	3080080c 	andi	r2,r6,32
    1714:	1000f926 	beq	r2,zero,1afc <___vfprintf_internal_r+0x1508>
    1718:	3c000017 	ldw	r16,0(r7)
    171c:	3c400117 	ldw	r17,4(r7)
    1720:	38800204 	addi	r2,r7,8
    1724:	d8814015 	stw	r2,1280(sp)
    1728:	d9414c17 	ldw	r5,1328(sp)
    172c:	2880004c 	andi	r2,r5,1
    1730:	1005003a 	cmpeq	r2,r2,zero
    1734:	1000b31e 	bne	r2,zero,1a04 <___vfprintf_internal_r+0x1410>
    1738:	8444b03a 	or	r2,r16,r17
    173c:	1000b126 	beq	r2,zero,1a04 <___vfprintf_internal_r+0x1410>
    1740:	d9814d17 	ldw	r6,1332(sp)
    1744:	29400094 	ori	r5,r5,2
    1748:	00800c04 	movi	r2,48
    174c:	01000084 	movi	r4,2
    1750:	d9414c15 	stw	r5,1328(sp)
    1754:	d8800445 	stb	r2,17(sp)
    1758:	d9800485 	stb	r6,18(sp)
    175c:	d8000405 	stb	zero,16(sp)
    1760:	003e3206 	br	102c <___vfprintf_internal_r+0xa38>
    1764:	01800074 	movhi	r6,1
    1768:	31b19c04 	addi	r6,r6,-14736
    176c:	d9814415 	stw	r6,1296(sp)
    1770:	003fe606 	br	170c <___vfprintf_internal_r+0x1118>
    1774:	00800ac4 	movi	r2,43
    1778:	d8800405 	stb	r2,16(sp)
    177c:	b8c00007 	ldb	r3,0(r23)
    1780:	003c1b06 	br	7f0 <___vfprintf_internal_r+0x1fc>
    1784:	d8814c17 	ldw	r2,1328(sp)
    1788:	b8c00007 	ldb	r3,0(r23)
    178c:	10800054 	ori	r2,r2,1
    1790:	d8814c15 	stw	r2,1328(sp)
    1794:	003c1606 	br	7f0 <___vfprintf_internal_r+0x1fc>
    1798:	d8800407 	ldb	r2,16(sp)
    179c:	1000461e 	bne	r2,zero,18b8 <___vfprintf_internal_r+0x12c4>
    17a0:	00800804 	movi	r2,32
    17a4:	d8800405 	stb	r2,16(sp)
    17a8:	b8c00007 	ldb	r3,0(r23)
    17ac:	003c1006 	br	7f0 <___vfprintf_internal_r+0x1fc>
    17b0:	d9814c17 	ldw	r6,1328(sp)
    17b4:	b8c00007 	ldb	r3,0(r23)
    17b8:	31800214 	ori	r6,r6,8
    17bc:	d9814c15 	stw	r6,1328(sp)
    17c0:	003c0b06 	br	7f0 <___vfprintf_internal_r+0x1fc>
    17c4:	0007883a 	mov	r3,zero
    17c8:	01000244 	movi	r4,9
    17cc:	188002a4 	muli	r2,r3,10
    17d0:	b8c00007 	ldb	r3,0(r23)
    17d4:	d9814d17 	ldw	r6,1332(sp)
    17d8:	bdc00044 	addi	r23,r23,1
    17dc:	d8c14d15 	stw	r3,1332(sp)
    17e0:	d9414d17 	ldw	r5,1332(sp)
    17e4:	3085883a 	add	r2,r6,r2
    17e8:	10fff404 	addi	r3,r2,-48
    17ec:	28bff404 	addi	r2,r5,-48
    17f0:	20bff62e 	bgeu	r4,r2,17cc <___vfprintf_internal_r+0x11d8>
    17f4:	d8c14a15 	stw	r3,1320(sp)
    17f8:	003bff06 	br	7f8 <___vfprintf_internal_r+0x204>
    17fc:	d9414c17 	ldw	r5,1328(sp)
    1800:	b8c00007 	ldb	r3,0(r23)
    1804:	29402014 	ori	r5,r5,128
    1808:	d9414c15 	stw	r5,1328(sp)
    180c:	003bf806 	br	7f0 <___vfprintf_internal_r+0x1fc>
    1810:	b8c00007 	ldb	r3,0(r23)
    1814:	00800a84 	movi	r2,42
    1818:	bdc00044 	addi	r23,r23,1
    181c:	18831526 	beq	r3,r2,2474 <___vfprintf_internal_r+0x1e80>
    1820:	d8c14d15 	stw	r3,1332(sp)
    1824:	18bff404 	addi	r2,r3,-48
    1828:	00c00244 	movi	r3,9
    182c:	18827836 	bltu	r3,r2,2210 <___vfprintf_internal_r+0x1c1c>
    1830:	000d883a 	mov	r6,zero
    1834:	308002a4 	muli	r2,r6,10
    1838:	b9800007 	ldb	r6,0(r23)
    183c:	d9414d17 	ldw	r5,1332(sp)
    1840:	bdc00044 	addi	r23,r23,1
    1844:	d9814d15 	stw	r6,1332(sp)
    1848:	d9014d17 	ldw	r4,1332(sp)
    184c:	1145883a 	add	r2,r2,r5
    1850:	11bff404 	addi	r6,r2,-48
    1854:	20bff404 	addi	r2,r4,-48
    1858:	18bff62e 	bgeu	r3,r2,1834 <___vfprintf_internal_r+0x1240>
    185c:	3027883a 	mov	r19,r6
    1860:	303be50e 	bge	r6,zero,7f8 <___vfprintf_internal_r+0x204>
    1864:	04ffffc4 	movi	r19,-1
    1868:	003be306 	br	7f8 <___vfprintf_internal_r+0x204>
    186c:	d8000405 	stb	zero,16(sp)
    1870:	39800017 	ldw	r6,0(r7)
    1874:	39c00104 	addi	r7,r7,4
    1878:	d9c14015 	stw	r7,1280(sp)
    187c:	d9814115 	stw	r6,1284(sp)
    1880:	3001c926 	beq	r6,zero,1fa8 <___vfprintf_internal_r+0x19b4>
    1884:	98000e16 	blt	r19,zero,18c0 <___vfprintf_internal_r+0x12cc>
    1888:	d9014117 	ldw	r4,1284(sp)
    188c:	000b883a 	mov	r5,zero
    1890:	980d883a 	mov	r6,r19
    1894:	00056b00 	call	56b0 <memchr>
    1898:	10025926 	beq	r2,zero,2200 <___vfprintf_internal_r+0x1c0c>
    189c:	d8c14117 	ldw	r3,1284(sp)
    18a0:	10cfc83a 	sub	r7,r2,r3
    18a4:	99c19e16 	blt	r19,r7,1f20 <___vfprintf_internal_r+0x192c>
    18a8:	d9c14515 	stw	r7,1300(sp)
    18ac:	38000916 	blt	r7,zero,18d4 <___vfprintf_internal_r+0x12e0>
    18b0:	d8014615 	stw	zero,1304(sp)
    18b4:	003df106 	br	107c <___vfprintf_internal_r+0xa88>
    18b8:	b8c00007 	ldb	r3,0(r23)
    18bc:	003bcc06 	br	7f0 <___vfprintf_internal_r+0x1fc>
    18c0:	d9014117 	ldw	r4,1284(sp)
    18c4:	000727c0 	call	727c <strlen>
    18c8:	d8814515 	stw	r2,1300(sp)
    18cc:	100f883a 	mov	r7,r2
    18d0:	103ff70e 	bge	r2,zero,18b0 <___vfprintf_internal_r+0x12bc>
    18d4:	d8014515 	stw	zero,1300(sp)
    18d8:	d8014615 	stw	zero,1304(sp)
    18dc:	003de706 	br	107c <___vfprintf_internal_r+0xa88>
    18e0:	20c03fcc 	andi	r3,r4,255
    18e4:	00800044 	movi	r2,1
    18e8:	18802d26 	beq	r3,r2,19a0 <___vfprintf_internal_r+0x13ac>
    18ec:	18800e36 	bltu	r3,r2,1928 <___vfprintf_internal_r+0x1334>
    18f0:	00800084 	movi	r2,2
    18f4:	1880fa26 	beq	r3,r2,1ce0 <___vfprintf_internal_r+0x16ec>
    18f8:	01000074 	movhi	r4,1
    18fc:	2131ac04 	addi	r4,r4,-14672
    1900:	000727c0 	call	727c <strlen>
    1904:	100f883a 	mov	r7,r2
    1908:	dcc14515 	stw	r19,1300(sp)
    190c:	9880010e 	bge	r19,r2,1914 <___vfprintf_internal_r+0x1320>
    1910:	d8814515 	stw	r2,1300(sp)
    1914:	00800074 	movhi	r2,1
    1918:	10b1ac04 	addi	r2,r2,-14672
    191c:	dcc14615 	stw	r19,1304(sp)
    1920:	d8814115 	stw	r2,1284(sp)
    1924:	003dd506 	br	107c <___vfprintf_internal_r+0xa88>
    1928:	d9401904 	addi	r5,sp,100
    192c:	dd000f04 	addi	r20,sp,60
    1930:	d9414115 	stw	r5,1284(sp)
    1934:	880a977a 	slli	r5,r17,29
    1938:	d9814117 	ldw	r6,1284(sp)
    193c:	8004d0fa 	srli	r2,r16,3
    1940:	8806d0fa 	srli	r3,r17,3
    1944:	810001cc 	andi	r4,r16,7
    1948:	2884b03a 	or	r2,r5,r2
    194c:	31bfffc4 	addi	r6,r6,-1
    1950:	21000c04 	addi	r4,r4,48
    1954:	d9814115 	stw	r6,1284(sp)
    1958:	10cab03a 	or	r5,r2,r3
    195c:	31000005 	stb	r4,0(r6)
    1960:	1021883a 	mov	r16,r2
    1964:	1823883a 	mov	r17,r3
    1968:	283ff21e 	bne	r5,zero,1934 <___vfprintf_internal_r+0x1340>
    196c:	d8c14c17 	ldw	r3,1328(sp)
    1970:	1880004c 	andi	r2,r3,1
    1974:	1005003a 	cmpeq	r2,r2,zero
    1978:	103db91e 	bne	r2,zero,1060 <___vfprintf_internal_r+0xa6c>
    197c:	20803fcc 	andi	r2,r4,255
    1980:	1080201c 	xori	r2,r2,128
    1984:	10bfe004 	addi	r2,r2,-128
    1988:	00c00c04 	movi	r3,48
    198c:	10fdb426 	beq	r2,r3,1060 <___vfprintf_internal_r+0xa6c>
    1990:	31bfffc4 	addi	r6,r6,-1
    1994:	d9814115 	stw	r6,1284(sp)
    1998:	30c00005 	stb	r3,0(r6)
    199c:	003db006 	br	1060 <___vfprintf_internal_r+0xa6c>
    19a0:	88800068 	cmpgeui	r2,r17,1
    19a4:	10002c1e 	bne	r2,zero,1a58 <___vfprintf_internal_r+0x1464>
    19a8:	8800021e 	bne	r17,zero,19b4 <___vfprintf_internal_r+0x13c0>
    19ac:	00800244 	movi	r2,9
    19b0:	14002936 	bltu	r2,r16,1a58 <___vfprintf_internal_r+0x1464>
    19b4:	d90018c4 	addi	r4,sp,99
    19b8:	dd000f04 	addi	r20,sp,60
    19bc:	d9014115 	stw	r4,1284(sp)
    19c0:	d9014117 	ldw	r4,1284(sp)
    19c4:	80800c04 	addi	r2,r16,48
    19c8:	20800005 	stb	r2,0(r4)
    19cc:	003da406 	br	1060 <___vfprintf_internal_r+0xa6c>
    19d0:	dc400d17 	ldw	r17,52(sp)
    19d4:	07000074 	movhi	fp,1
    19d8:	e731b384 	addi	fp,fp,-14642
    19dc:	9425883a 	add	r18,r18,r16
    19e0:	8c400044 	addi	r17,r17,1
    19e4:	008001c4 	movi	r2,7
    19e8:	1f000015 	stw	fp,0(r3)
    19ec:	1c000115 	stw	r16,4(r3)
    19f0:	dc800e15 	stw	r18,56(sp)
    19f4:	dc400d15 	stw	r17,52(sp)
    19f8:	147de216 	blt	r2,r17,1184 <___vfprintf_internal_r+0xb90>
    19fc:	18c00204 	addi	r3,r3,8
    1a00:	003c7a06 	br	bec <___vfprintf_internal_r+0x5f8>
    1a04:	01000084 	movi	r4,2
    1a08:	d8000405 	stb	zero,16(sp)
    1a0c:	003d8706 	br	102c <___vfprintf_internal_r+0xa38>
    1a10:	d9814c17 	ldw	r6,1328(sp)
    1a14:	30c4703a 	and	r2,r6,r3
    1a18:	1005003a 	cmpeq	r2,r2,zero
    1a1c:	103cb926 	beq	r2,zero,d04 <___vfprintf_internal_r+0x710>
    1a20:	d9014117 	ldw	r4,1284(sp)
    1a24:	94800044 	addi	r18,r18,1
    1a28:	8c400044 	addi	r17,r17,1
    1a2c:	008001c4 	movi	r2,7
    1a30:	a9000015 	stw	r4,0(r21)
    1a34:	a8c00115 	stw	r3,4(r21)
    1a38:	dc800e15 	stw	r18,56(sp)
    1a3c:	dc400d15 	stw	r17,52(sp)
    1a40:	147e6616 	blt	r2,r17,13dc <___vfprintf_internal_r+0xde8>
    1a44:	acc00204 	addi	r19,r21,8
    1a48:	003cd706 	br	da8 <___vfprintf_internal_r+0x7b4>
    1a4c:	07000074 	movhi	fp,1
    1a50:	e731b384 	addi	fp,fp,-14642
    1a54:	003c4f06 	br	b94 <___vfprintf_internal_r+0x5a0>
    1a58:	dd000f04 	addi	r20,sp,60
    1a5c:	dc801904 	addi	r18,sp,100
    1a60:	8009883a 	mov	r4,r16
    1a64:	880b883a 	mov	r5,r17
    1a68:	01800284 	movi	r6,10
    1a6c:	000f883a 	mov	r7,zero
    1a70:	0007d600 	call	7d60 <__umoddi3>
    1a74:	12000c04 	addi	r8,r2,48
    1a78:	94bfffc4 	addi	r18,r18,-1
    1a7c:	8009883a 	mov	r4,r16
    1a80:	880b883a 	mov	r5,r17
    1a84:	01800284 	movi	r6,10
    1a88:	000f883a 	mov	r7,zero
    1a8c:	92000005 	stb	r8,0(r18)
    1a90:	00077840 	call	7784 <__udivdi3>
    1a94:	1009883a 	mov	r4,r2
    1a98:	1021883a 	mov	r16,r2
    1a9c:	18800068 	cmpgeui	r2,r3,1
    1aa0:	1823883a 	mov	r17,r3
    1aa4:	103fee1e 	bne	r2,zero,1a60 <___vfprintf_internal_r+0x146c>
    1aa8:	1800021e 	bne	r3,zero,1ab4 <___vfprintf_internal_r+0x14c0>
    1aac:	00800244 	movi	r2,9
    1ab0:	113feb36 	bltu	r2,r4,1a60 <___vfprintf_internal_r+0x146c>
    1ab4:	94bfffc4 	addi	r18,r18,-1
    1ab8:	dc814115 	stw	r18,1284(sp)
    1abc:	003fc006 	br	19c0 <___vfprintf_internal_r+0x13cc>
    1ac0:	d9014c17 	ldw	r4,1328(sp)
    1ac4:	2080004c 	andi	r2,r4,1
    1ac8:	10009a1e 	bne	r2,zero,1d34 <___vfprintf_internal_r+0x1740>
    1acc:	d9401904 	addi	r5,sp,100
    1ad0:	dd000f04 	addi	r20,sp,60
    1ad4:	d9414115 	stw	r5,1284(sp)
    1ad8:	003d6106 	br	1060 <___vfprintf_internal_r+0xa6c>
    1adc:	d9014f17 	ldw	r4,1340(sp)
    1ae0:	b00b883a 	mov	r5,r22
    1ae4:	d9800c04 	addi	r6,sp,48
    1ae8:	000059c0 	call	59c <__sprint_r>
    1aec:	103c791e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1af0:	dc800e17 	ldw	r18,56(sp)
    1af4:	d8c01904 	addi	r3,sp,100
    1af8:	003cff06 	br	ef8 <___vfprintf_internal_r+0x904>
    1afc:	d8c14c17 	ldw	r3,1328(sp)
    1b00:	1880040c 	andi	r2,r3,16
    1b04:	1000711e 	bne	r2,zero,1ccc <___vfprintf_internal_r+0x16d8>
    1b08:	d9014c17 	ldw	r4,1328(sp)
    1b0c:	2080100c 	andi	r2,r4,64
    1b10:	10006e26 	beq	r2,zero,1ccc <___vfprintf_internal_r+0x16d8>
    1b14:	3c00000b 	ldhu	r16,0(r7)
    1b18:	0023883a 	mov	r17,zero
    1b1c:	39c00104 	addi	r7,r7,4
    1b20:	d9c14015 	stw	r7,1280(sp)
    1b24:	003f0006 	br	1728 <___vfprintf_internal_r+0x1134>
    1b28:	dc400d17 	ldw	r17,52(sp)
    1b2c:	07000074 	movhi	fp,1
    1b30:	e731b384 	addi	fp,fp,-14642
    1b34:	9425883a 	add	r18,r18,r16
    1b38:	8c400044 	addi	r17,r17,1
    1b3c:	008001c4 	movi	r2,7
    1b40:	1f000015 	stw	fp,0(r3)
    1b44:	1c000115 	stw	r16,4(r3)
    1b48:	dc800e15 	stw	r18,56(sp)
    1b4c:	dc400d15 	stw	r17,52(sp)
    1b50:	147d7616 	blt	r2,r17,112c <___vfprintf_internal_r+0xb38>
    1b54:	18c00204 	addi	r3,r3,8
    1b58:	003d7b06 	br	1148 <___vfprintf_internal_r+0xb54>
    1b5c:	dc800e17 	ldw	r18,56(sp)
    1b60:	dc400d17 	ldw	r17,52(sp)
    1b64:	07000074 	movhi	fp,1
    1b68:	e731b784 	addi	fp,fp,-14626
    1b6c:	003bc006 	br	a70 <___vfprintf_internal_r+0x47c>
    1b70:	d9014f17 	ldw	r4,1340(sp)
    1b74:	b00b883a 	mov	r5,r22
    1b78:	d9800c04 	addi	r6,sp,48
    1b7c:	000059c0 	call	59c <__sprint_r>
    1b80:	103c541e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1b84:	dc800e17 	ldw	r18,56(sp)
    1b88:	d8c01904 	addi	r3,sp,100
    1b8c:	003ce906 	br	f34 <___vfprintf_internal_r+0x940>
    1b90:	3c000017 	ldw	r16,0(r7)
    1b94:	0009883a 	mov	r4,zero
    1b98:	39c00104 	addi	r7,r7,4
    1b9c:	0023883a 	mov	r17,zero
    1ba0:	d9c14015 	stw	r7,1280(sp)
    1ba4:	d8000405 	stb	zero,16(sp)
    1ba8:	003d2006 	br	102c <___vfprintf_internal_r+0xa38>
    1bac:	38800017 	ldw	r2,0(r7)
    1bb0:	39c00104 	addi	r7,r7,4
    1bb4:	d9c14015 	stw	r7,1280(sp)
    1bb8:	1023d7fa 	srai	r17,r2,31
    1bbc:	1021883a 	mov	r16,r2
    1bc0:	003d1806 	br	1024 <___vfprintf_internal_r+0xa30>
    1bc4:	3c000017 	ldw	r16,0(r7)
    1bc8:	01000044 	movi	r4,1
    1bcc:	39c00104 	addi	r7,r7,4
    1bd0:	0023883a 	mov	r17,zero
    1bd4:	d9c14015 	stw	r7,1280(sp)
    1bd8:	d8000405 	stb	zero,16(sp)
    1bdc:	003d1306 	br	102c <___vfprintf_internal_r+0xa38>
    1be0:	00800074 	movhi	r2,1
    1be4:	10b1b304 	addi	r2,r2,-14644
    1be8:	94800044 	addi	r18,r18,1
    1bec:	8c400044 	addi	r17,r17,1
    1bf0:	a8800015 	stw	r2,0(r21)
    1bf4:	00c00044 	movi	r3,1
    1bf8:	008001c4 	movi	r2,7
    1bfc:	a8c00115 	stw	r3,4(r21)
    1c00:	dc800e15 	stw	r18,56(sp)
    1c04:	dc400d15 	stw	r17,52(sp)
    1c08:	1440ca16 	blt	r2,r17,1f34 <___vfprintf_internal_r+0x1940>
    1c0c:	a8c00204 	addi	r3,r21,8
    1c10:	2000061e 	bne	r4,zero,1c2c <___vfprintf_internal_r+0x1638>
    1c14:	d9414717 	ldw	r5,1308(sp)
    1c18:	2800041e 	bne	r5,zero,1c2c <___vfprintf_internal_r+0x1638>
    1c1c:	d9814c17 	ldw	r6,1328(sp)
    1c20:	3080004c 	andi	r2,r6,1
    1c24:	1005003a 	cmpeq	r2,r2,zero
    1c28:	103bf01e 	bne	r2,zero,bec <___vfprintf_internal_r+0x5f8>
    1c2c:	00800044 	movi	r2,1
    1c30:	dc400d17 	ldw	r17,52(sp)
    1c34:	18800115 	stw	r2,4(r3)
    1c38:	d8814917 	ldw	r2,1316(sp)
    1c3c:	94800044 	addi	r18,r18,1
    1c40:	8c400044 	addi	r17,r17,1
    1c44:	18800015 	stw	r2,0(r3)
    1c48:	008001c4 	movi	r2,7
    1c4c:	dc800e15 	stw	r18,56(sp)
    1c50:	dc400d15 	stw	r17,52(sp)
    1c54:	1440ca16 	blt	r2,r17,1f80 <___vfprintf_internal_r+0x198c>
    1c58:	18c00204 	addi	r3,r3,8
    1c5c:	0121c83a 	sub	r16,zero,r4
    1c60:	0400500e 	bge	zero,r16,1da4 <___vfprintf_internal_r+0x17b0>
    1c64:	00800404 	movi	r2,16
    1c68:	1400800e 	bge	r2,r16,1e6c <___vfprintf_internal_r+0x1878>
    1c6c:	1027883a 	mov	r19,r2
    1c70:	07000074 	movhi	fp,1
    1c74:	e731b384 	addi	fp,fp,-14642
    1c78:	050001c4 	movi	r20,7
    1c7c:	00000306 	br	1c8c <___vfprintf_internal_r+0x1698>
    1c80:	18c00204 	addi	r3,r3,8
    1c84:	843ffc04 	addi	r16,r16,-16
    1c88:	9c007a0e 	bge	r19,r16,1e74 <___vfprintf_internal_r+0x1880>
    1c8c:	94800404 	addi	r18,r18,16
    1c90:	8c400044 	addi	r17,r17,1
    1c94:	1f000015 	stw	fp,0(r3)
    1c98:	1cc00115 	stw	r19,4(r3)
    1c9c:	dc800e15 	stw	r18,56(sp)
    1ca0:	dc400d15 	stw	r17,52(sp)
    1ca4:	a47ff60e 	bge	r20,r17,1c80 <___vfprintf_internal_r+0x168c>
    1ca8:	d9014f17 	ldw	r4,1340(sp)
    1cac:	b00b883a 	mov	r5,r22
    1cb0:	d9800c04 	addi	r6,sp,48
    1cb4:	000059c0 	call	59c <__sprint_r>
    1cb8:	103c061e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1cbc:	dc800e17 	ldw	r18,56(sp)
    1cc0:	dc400d17 	ldw	r17,52(sp)
    1cc4:	d8c01904 	addi	r3,sp,100
    1cc8:	003fee06 	br	1c84 <___vfprintf_internal_r+0x1690>
    1ccc:	3c000017 	ldw	r16,0(r7)
    1cd0:	0023883a 	mov	r17,zero
    1cd4:	39c00104 	addi	r7,r7,4
    1cd8:	d9c14015 	stw	r7,1280(sp)
    1cdc:	003e9206 	br	1728 <___vfprintf_internal_r+0x1134>
    1ce0:	d9401904 	addi	r5,sp,100
    1ce4:	dd000f04 	addi	r20,sp,60
    1ce8:	d9414115 	stw	r5,1284(sp)
    1cec:	d9814417 	ldw	r6,1296(sp)
    1cf0:	880a973a 	slli	r5,r17,28
    1cf4:	8004d13a 	srli	r2,r16,4
    1cf8:	810003cc 	andi	r4,r16,15
    1cfc:	3109883a 	add	r4,r6,r4
    1d00:	2884b03a 	or	r2,r5,r2
    1d04:	21400003 	ldbu	r5,0(r4)
    1d08:	d9014117 	ldw	r4,1284(sp)
    1d0c:	8806d13a 	srli	r3,r17,4
    1d10:	1021883a 	mov	r16,r2
    1d14:	213fffc4 	addi	r4,r4,-1
    1d18:	d9014115 	stw	r4,1284(sp)
    1d1c:	d9814117 	ldw	r6,1284(sp)
    1d20:	10c8b03a 	or	r4,r2,r3
    1d24:	1823883a 	mov	r17,r3
    1d28:	31400005 	stb	r5,0(r6)
    1d2c:	203fef1e 	bne	r4,zero,1cec <___vfprintf_internal_r+0x16f8>
    1d30:	003ccb06 	br	1060 <___vfprintf_internal_r+0xa6c>
    1d34:	00800c04 	movi	r2,48
    1d38:	d98018c4 	addi	r6,sp,99
    1d3c:	dd000f04 	addi	r20,sp,60
    1d40:	d88018c5 	stb	r2,99(sp)
    1d44:	d9814115 	stw	r6,1284(sp)
    1d48:	003cc506 	br	1060 <___vfprintf_internal_r+0xa6c>
    1d4c:	dc400d17 	ldw	r17,52(sp)
    1d50:	07000074 	movhi	fp,1
    1d54:	e731b784 	addi	fp,fp,-14626
    1d58:	003bc706 	br	c78 <___vfprintf_internal_r+0x684>
    1d5c:	d9414c17 	ldw	r5,1328(sp)
    1d60:	2880040c 	andi	r2,r5,16
    1d64:	10007c26 	beq	r2,zero,1f58 <___vfprintf_internal_r+0x1964>
    1d68:	38800017 	ldw	r2,0(r7)
    1d6c:	39c00104 	addi	r7,r7,4
    1d70:	d9c14015 	stw	r7,1280(sp)
    1d74:	d9814b17 	ldw	r6,1324(sp)
    1d78:	d9c14017 	ldw	r7,1280(sp)
    1d7c:	11800015 	stw	r6,0(r2)
    1d80:	003a7806 	br	764 <___vfprintf_internal_r+0x170>
    1d84:	d9014f17 	ldw	r4,1340(sp)
    1d88:	b00b883a 	mov	r5,r22
    1d8c:	d9800c04 	addi	r6,sp,48
    1d90:	000059c0 	call	59c <__sprint_r>
    1d94:	103bcf1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1d98:	dc800e17 	ldw	r18,56(sp)
    1d9c:	dc400d17 	ldw	r17,52(sp)
    1da0:	d8c01904 	addi	r3,sp,100
    1da4:	d9014717 	ldw	r4,1308(sp)
    1da8:	d9414117 	ldw	r5,1284(sp)
    1dac:	8c400044 	addi	r17,r17,1
    1db0:	9125883a 	add	r18,r18,r4
    1db4:	008001c4 	movi	r2,7
    1db8:	19400015 	stw	r5,0(r3)
    1dbc:	19000115 	stw	r4,4(r3)
    1dc0:	dc800e15 	stw	r18,56(sp)
    1dc4:	dc400d15 	stw	r17,52(sp)
    1dc8:	147cee16 	blt	r2,r17,1184 <___vfprintf_internal_r+0xb90>
    1dcc:	18c00204 	addi	r3,r3,8
    1dd0:	003b8606 	br	bec <___vfprintf_internal_r+0x5f8>
    1dd4:	38c00017 	ldw	r3,0(r7)
    1dd8:	39000204 	addi	r4,r7,8
    1ddc:	d9014015 	stw	r4,1280(sp)
    1de0:	d8c14215 	stw	r3,1288(sp)
    1de4:	39c00117 	ldw	r7,4(r7)
    1de8:	d9c14315 	stw	r7,1292(sp)
    1dec:	003e2006 	br	1670 <___vfprintf_internal_r+0x107c>
    1df0:	0005883a 	mov	r2,zero
    1df4:	1409c83a 	sub	r4,r2,r16
    1df8:	1105803a 	cmpltu	r2,r2,r4
    1dfc:	044bc83a 	sub	r5,zero,r17
    1e00:	2885c83a 	sub	r2,r5,r2
    1e04:	2021883a 	mov	r16,r4
    1e08:	1023883a 	mov	r17,r2
    1e0c:	01000044 	movi	r4,1
    1e10:	00800b44 	movi	r2,45
    1e14:	d8800405 	stb	r2,16(sp)
    1e18:	003c8406 	br	102c <___vfprintf_internal_r+0xa38>
    1e1c:	d9014f17 	ldw	r4,1340(sp)
    1e20:	b00b883a 	mov	r5,r22
    1e24:	d9800c04 	addi	r6,sp,48
    1e28:	000059c0 	call	59c <__sprint_r>
    1e2c:	103ba91e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1e30:	dc800e17 	ldw	r18,56(sp)
    1e34:	dc400d17 	ldw	r17,52(sp)
    1e38:	d9000517 	ldw	r4,20(sp)
    1e3c:	d9401904 	addi	r5,sp,100
    1e40:	003da706 	br	14e0 <___vfprintf_internal_r+0xeec>
    1e44:	d9014f17 	ldw	r4,1340(sp)
    1e48:	b00b883a 	mov	r5,r22
    1e4c:	d9800c04 	addi	r6,sp,48
    1e50:	000059c0 	call	59c <__sprint_r>
    1e54:	103b9f1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1e58:	dc800e17 	ldw	r18,56(sp)
    1e5c:	dc400d17 	ldw	r17,52(sp)
    1e60:	d9000517 	ldw	r4,20(sp)
    1e64:	d8c01904 	addi	r3,sp,100
    1e68:	003d9106 	br	14b0 <___vfprintf_internal_r+0xebc>
    1e6c:	07000074 	movhi	fp,1
    1e70:	e731b384 	addi	fp,fp,-14642
    1e74:	9425883a 	add	r18,r18,r16
    1e78:	8c400044 	addi	r17,r17,1
    1e7c:	008001c4 	movi	r2,7
    1e80:	1f000015 	stw	fp,0(r3)
    1e84:	1c000115 	stw	r16,4(r3)
    1e88:	dc800e15 	stw	r18,56(sp)
    1e8c:	dc400d15 	stw	r17,52(sp)
    1e90:	147fbc16 	blt	r2,r17,1d84 <___vfprintf_internal_r+0x1790>
    1e94:	18c00204 	addi	r3,r3,8
    1e98:	003fc206 	br	1da4 <___vfprintf_internal_r+0x17b0>
    1e9c:	d9014f17 	ldw	r4,1340(sp)
    1ea0:	b00b883a 	mov	r5,r22
    1ea4:	d9800c04 	addi	r6,sp,48
    1ea8:	000059c0 	call	59c <__sprint_r>
    1eac:	103b891e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1eb0:	dc800e17 	ldw	r18,56(sp)
    1eb4:	d9000517 	ldw	r4,20(sp)
    1eb8:	d8c01904 	addi	r3,sp,100
    1ebc:	003d0206 	br	12c8 <___vfprintf_internal_r+0xcd4>
    1ec0:	07000074 	movhi	fp,1
    1ec4:	e731b384 	addi	fp,fp,-14642
    1ec8:	003be406 	br	e5c <___vfprintf_internal_r+0x868>
    1ecc:	00800074 	movhi	r2,1
    1ed0:	10b1a204 	addi	r2,r2,-14712
    1ed4:	d8814115 	stw	r2,1284(sp)
    1ed8:	003df506 	br	16b0 <___vfprintf_internal_r+0x10bc>
    1edc:	d9014217 	ldw	r4,1288(sp)
    1ee0:	d9414317 	ldw	r5,1292(sp)
    1ee4:	0006fd40 	call	6fd4 <__isnand>
    1ee8:	10003926 	beq	r2,zero,1fd0 <___vfprintf_internal_r+0x19dc>
    1eec:	d9414d17 	ldw	r5,1332(sp)
    1ef0:	008011c4 	movi	r2,71
    1ef4:	1140ce16 	blt	r2,r5,2230 <___vfprintf_internal_r+0x1c3c>
    1ef8:	01800074 	movhi	r6,1
    1efc:	31b1a304 	addi	r6,r6,-14708
    1f00:	d9814115 	stw	r6,1284(sp)
    1f04:	003dea06 	br	16b0 <___vfprintf_internal_r+0x10bc>
    1f08:	d9014c17 	ldw	r4,1328(sp)
    1f0c:	bdc00044 	addi	r23,r23,1
    1f10:	b8c00007 	ldb	r3,0(r23)
    1f14:	21000814 	ori	r4,r4,32
    1f18:	d9014c15 	stw	r4,1328(sp)
    1f1c:	003a3406 	br	7f0 <___vfprintf_internal_r+0x1fc>
    1f20:	dcc14515 	stw	r19,1300(sp)
    1f24:	98011016 	blt	r19,zero,2368 <___vfprintf_internal_r+0x1d74>
    1f28:	980f883a 	mov	r7,r19
    1f2c:	d8014615 	stw	zero,1304(sp)
    1f30:	003c5206 	br	107c <___vfprintf_internal_r+0xa88>
    1f34:	d9014f17 	ldw	r4,1340(sp)
    1f38:	b00b883a 	mov	r5,r22
    1f3c:	d9800c04 	addi	r6,sp,48
    1f40:	000059c0 	call	59c <__sprint_r>
    1f44:	103b631e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1f48:	dc800e17 	ldw	r18,56(sp)
    1f4c:	d9000517 	ldw	r4,20(sp)
    1f50:	d8c01904 	addi	r3,sp,100
    1f54:	003f2e06 	br	1c10 <___vfprintf_internal_r+0x161c>
    1f58:	d8c14c17 	ldw	r3,1328(sp)
    1f5c:	1880100c 	andi	r2,r3,64
    1f60:	1000a026 	beq	r2,zero,21e4 <___vfprintf_internal_r+0x1bf0>
    1f64:	38800017 	ldw	r2,0(r7)
    1f68:	39c00104 	addi	r7,r7,4
    1f6c:	d9c14015 	stw	r7,1280(sp)
    1f70:	d9014b17 	ldw	r4,1324(sp)
    1f74:	d9c14017 	ldw	r7,1280(sp)
    1f78:	1100000d 	sth	r4,0(r2)
    1f7c:	0039f906 	br	764 <___vfprintf_internal_r+0x170>
    1f80:	d9014f17 	ldw	r4,1340(sp)
    1f84:	b00b883a 	mov	r5,r22
    1f88:	d9800c04 	addi	r6,sp,48
    1f8c:	000059c0 	call	59c <__sprint_r>
    1f90:	103b501e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    1f94:	dc800e17 	ldw	r18,56(sp)
    1f98:	dc400d17 	ldw	r17,52(sp)
    1f9c:	d9000517 	ldw	r4,20(sp)
    1fa0:	d8c01904 	addi	r3,sp,100
    1fa4:	003f2d06 	br	1c5c <___vfprintf_internal_r+0x1668>
    1fa8:	00800184 	movi	r2,6
    1fac:	14c09a36 	bltu	r2,r19,2218 <___vfprintf_internal_r+0x1c24>
    1fb0:	dcc14515 	stw	r19,1300(sp)
    1fb4:	9800010e 	bge	r19,zero,1fbc <___vfprintf_internal_r+0x19c8>
    1fb8:	d8014515 	stw	zero,1300(sp)
    1fbc:	00800074 	movhi	r2,1
    1fc0:	10b1a504 	addi	r2,r2,-14700
    1fc4:	980f883a 	mov	r7,r19
    1fc8:	d8814115 	stw	r2,1284(sp)
    1fcc:	003a7806 	br	9b0 <___vfprintf_internal_r+0x3bc>
    1fd0:	00bfffc4 	movi	r2,-1
    1fd4:	9880e226 	beq	r19,r2,2360 <___vfprintf_internal_r+0x1d6c>
    1fd8:	d9414d17 	ldw	r5,1332(sp)
    1fdc:	008019c4 	movi	r2,103
    1fe0:	2880dc26 	beq	r5,r2,2354 <___vfprintf_internal_r+0x1d60>
    1fe4:	008011c4 	movi	r2,71
    1fe8:	2880da26 	beq	r5,r2,2354 <___vfprintf_internal_r+0x1d60>
    1fec:	d9414c17 	ldw	r5,1328(sp)
    1ff0:	d9014317 	ldw	r4,1292(sp)
    1ff4:	d9814217 	ldw	r6,1288(sp)
    1ff8:	29404014 	ori	r5,r5,256
    1ffc:	d9414c15 	stw	r5,1328(sp)
    2000:	2000cc16 	blt	r4,zero,2334 <___vfprintf_internal_r+0x1d40>
    2004:	3021883a 	mov	r16,r6
    2008:	2023883a 	mov	r17,r4
    200c:	0039883a 	mov	fp,zero
    2010:	d9414d17 	ldw	r5,1332(sp)
    2014:	00801984 	movi	r2,102
    2018:	2880b726 	beq	r5,r2,22f8 <___vfprintf_internal_r+0x1d04>
    201c:	00801184 	movi	r2,70
    2020:	2880b526 	beq	r5,r2,22f8 <___vfprintf_internal_r+0x1d04>
    2024:	00801944 	movi	r2,101
    2028:	2880c826 	beq	r5,r2,234c <___vfprintf_internal_r+0x1d58>
    202c:	00801144 	movi	r2,69
    2030:	2880c626 	beq	r5,r2,234c <___vfprintf_internal_r+0x1d58>
    2034:	9829883a 	mov	r20,r19
    2038:	d9014f17 	ldw	r4,1340(sp)
    203c:	d8800504 	addi	r2,sp,20
    2040:	880d883a 	mov	r6,r17
    2044:	d8800115 	stw	r2,4(sp)
    2048:	d8c00604 	addi	r3,sp,24
    204c:	d8800704 	addi	r2,sp,28
    2050:	800b883a 	mov	r5,r16
    2054:	01c00084 	movi	r7,2
    2058:	d8c00215 	stw	r3,8(sp)
    205c:	d8800315 	stw	r2,12(sp)
    2060:	dd000015 	stw	r20,0(sp)
    2064:	00028180 	call	2818 <_dtoa_r>
    2068:	d9814d17 	ldw	r6,1332(sp)
    206c:	d8814115 	stw	r2,1284(sp)
    2070:	008019c4 	movi	r2,103
    2074:	30809526 	beq	r6,r2,22cc <___vfprintf_internal_r+0x1cd8>
    2078:	d8c14d17 	ldw	r3,1332(sp)
    207c:	008011c4 	movi	r2,71
    2080:	18809226 	beq	r3,r2,22cc <___vfprintf_internal_r+0x1cd8>
    2084:	d9414117 	ldw	r5,1284(sp)
    2088:	d9814d17 	ldw	r6,1332(sp)
    208c:	00801984 	movi	r2,102
    2090:	2d25883a 	add	r18,r5,r20
    2094:	30808626 	beq	r6,r2,22b0 <___vfprintf_internal_r+0x1cbc>
    2098:	00801184 	movi	r2,70
    209c:	30808426 	beq	r6,r2,22b0 <___vfprintf_internal_r+0x1cbc>
    20a0:	000d883a 	mov	r6,zero
    20a4:	000f883a 	mov	r7,zero
    20a8:	880b883a 	mov	r5,r17
    20ac:	8009883a 	mov	r4,r16
    20b0:	0008e300 	call	8e30 <__eqdf2>
    20b4:	1000751e 	bne	r2,zero,228c <___vfprintf_internal_r+0x1c98>
    20b8:	9005883a 	mov	r2,r18
    20bc:	dc800715 	stw	r18,28(sp)
    20c0:	d9014117 	ldw	r4,1284(sp)
    20c4:	d9414d17 	ldw	r5,1332(sp)
    20c8:	00c019c4 	movi	r3,103
    20cc:	1125c83a 	sub	r18,r2,r4
    20d0:	28c06826 	beq	r5,r3,2274 <___vfprintf_internal_r+0x1c80>
    20d4:	008011c4 	movi	r2,71
    20d8:	28806626 	beq	r5,r2,2274 <___vfprintf_internal_r+0x1c80>
    20dc:	d9000517 	ldw	r4,20(sp)
    20e0:	d8c14d17 	ldw	r3,1332(sp)
    20e4:	00801944 	movi	r2,101
    20e8:	10c05516 	blt	r2,r3,2240 <___vfprintf_internal_r+0x1c4c>
    20ec:	213fffc4 	addi	r4,r4,-1
    20f0:	d9000515 	stw	r4,20(sp)
    20f4:	d8c00805 	stb	r3,32(sp)
    20f8:	2021883a 	mov	r16,r4
    20fc:	2000c116 	blt	r4,zero,2404 <___vfprintf_internal_r+0x1e10>
    2100:	00800ac4 	movi	r2,43
    2104:	d8800845 	stb	r2,33(sp)
    2108:	00800244 	movi	r2,9
    210c:	1400af0e 	bge	r2,r16,23cc <___vfprintf_internal_r+0x1dd8>
    2110:	1027883a 	mov	r19,r2
    2114:	dc400b84 	addi	r17,sp,46
    2118:	8009883a 	mov	r4,r16
    211c:	01400284 	movi	r5,10
    2120:	00095180 	call	9518 <__modsi3>
    2124:	10800c04 	addi	r2,r2,48
    2128:	8c7fffc4 	addi	r17,r17,-1
    212c:	8009883a 	mov	r4,r16
    2130:	01400284 	movi	r5,10
    2134:	88800005 	stb	r2,0(r17)
    2138:	00094b80 	call	94b8 <__divsi3>
    213c:	1021883a 	mov	r16,r2
    2140:	98bff516 	blt	r19,r2,2118 <___vfprintf_internal_r+0x1b24>
    2144:	10c00c04 	addi	r3,r2,48
    2148:	d88009c4 	addi	r2,sp,39
    214c:	108001c4 	addi	r2,r2,7
    2150:	897fffc4 	addi	r5,r17,-1
    2154:	88ffffc5 	stb	r3,-1(r17)
    2158:	2880a72e 	bgeu	r5,r2,23f8 <___vfprintf_internal_r+0x1e04>
    215c:	1009883a 	mov	r4,r2
    2160:	d9800804 	addi	r6,sp,32
    2164:	d8c00884 	addi	r3,sp,34
    2168:	28800003 	ldbu	r2,0(r5)
    216c:	29400044 	addi	r5,r5,1
    2170:	18800005 	stb	r2,0(r3)
    2174:	18c00044 	addi	r3,r3,1
    2178:	293ffb36 	bltu	r5,r4,2168 <___vfprintf_internal_r+0x1b74>
    217c:	1987c83a 	sub	r3,r3,r6
    2180:	00800044 	movi	r2,1
    2184:	d8c14815 	stw	r3,1312(sp)
    2188:	90cf883a 	add	r7,r18,r3
    218c:	1480960e 	bge	r2,r18,23e8 <___vfprintf_internal_r+0x1df4>
    2190:	39c00044 	addi	r7,r7,1
    2194:	d9c14515 	stw	r7,1300(sp)
    2198:	38003416 	blt	r7,zero,226c <___vfprintf_internal_r+0x1c78>
    219c:	e0803fcc 	andi	r2,fp,255
    21a0:	1080201c 	xori	r2,r2,128
    21a4:	10bfe004 	addi	r2,r2,-128
    21a8:	10004e26 	beq	r2,zero,22e4 <___vfprintf_internal_r+0x1cf0>
    21ac:	00800b44 	movi	r2,45
    21b0:	dc814715 	stw	r18,1308(sp)
    21b4:	d8014615 	stw	zero,1304(sp)
    21b8:	d8800405 	stb	r2,16(sp)
    21bc:	003bb106 	br	1084 <___vfprintf_internal_r+0xa90>
    21c0:	00800b44 	movi	r2,45
    21c4:	d8800405 	stb	r2,16(sp)
    21c8:	003d3306 	br	1698 <___vfprintf_internal_r+0x10a4>
    21cc:	d9014f17 	ldw	r4,1340(sp)
    21d0:	b00b883a 	mov	r5,r22
    21d4:	d9800c04 	addi	r6,sp,48
    21d8:	000059c0 	call	59c <__sprint_r>
    21dc:	103abd1e 	bne	r2,zero,cd4 <___vfprintf_internal_r+0x6e0>
    21e0:	003abb06 	br	cd0 <___vfprintf_internal_r+0x6dc>
    21e4:	38800017 	ldw	r2,0(r7)
    21e8:	39c00104 	addi	r7,r7,4
    21ec:	d9c14015 	stw	r7,1280(sp)
    21f0:	d9414b17 	ldw	r5,1324(sp)
    21f4:	d9c14017 	ldw	r7,1280(sp)
    21f8:	11400015 	stw	r5,0(r2)
    21fc:	00395906 	br	764 <___vfprintf_internal_r+0x170>
    2200:	980f883a 	mov	r7,r19
    2204:	dcc14515 	stw	r19,1300(sp)
    2208:	d8014615 	stw	zero,1304(sp)
    220c:	003b9b06 	br	107c <___vfprintf_internal_r+0xa88>
    2210:	0027883a 	mov	r19,zero
    2214:	00397806 	br	7f8 <___vfprintf_internal_r+0x204>
    2218:	00c00074 	movhi	r3,1
    221c:	18f1a504 	addi	r3,r3,-14700
    2220:	100f883a 	mov	r7,r2
    2224:	d8814515 	stw	r2,1300(sp)
    2228:	d8c14115 	stw	r3,1284(sp)
    222c:	0039e006 	br	9b0 <___vfprintf_internal_r+0x3bc>
    2230:	00800074 	movhi	r2,1
    2234:	10b1a404 	addi	r2,r2,-14704
    2238:	d8814115 	stw	r2,1284(sp)
    223c:	003d1c06 	br	16b0 <___vfprintf_internal_r+0x10bc>
    2240:	d9414d17 	ldw	r5,1332(sp)
    2244:	00801984 	movi	r2,102
    2248:	28804926 	beq	r5,r2,2370 <___vfprintf_internal_r+0x1d7c>
    224c:	200f883a 	mov	r7,r4
    2250:	24805716 	blt	r4,r18,23b0 <___vfprintf_internal_r+0x1dbc>
    2254:	d9414c17 	ldw	r5,1328(sp)
    2258:	2880004c 	andi	r2,r5,1
    225c:	10000126 	beq	r2,zero,2264 <___vfprintf_internal_r+0x1c70>
    2260:	21c00044 	addi	r7,r4,1
    2264:	d9c14515 	stw	r7,1300(sp)
    2268:	383fcc0e 	bge	r7,zero,219c <___vfprintf_internal_r+0x1ba8>
    226c:	d8014515 	stw	zero,1300(sp)
    2270:	003fca06 	br	219c <___vfprintf_internal_r+0x1ba8>
    2274:	d9000517 	ldw	r4,20(sp)
    2278:	00bfff04 	movi	r2,-4
    227c:	1100480e 	bge	r2,r4,23a0 <___vfprintf_internal_r+0x1dac>
    2280:	99004716 	blt	r19,r4,23a0 <___vfprintf_internal_r+0x1dac>
    2284:	d8c14d15 	stw	r3,1332(sp)
    2288:	003ff006 	br	224c <___vfprintf_internal_r+0x1c58>
    228c:	d8800717 	ldw	r2,28(sp)
    2290:	14bf8b2e 	bgeu	r2,r18,20c0 <___vfprintf_internal_r+0x1acc>
    2294:	9007883a 	mov	r3,r18
    2298:	01000c04 	movi	r4,48
    229c:	11000005 	stb	r4,0(r2)
    22a0:	10800044 	addi	r2,r2,1
    22a4:	d8800715 	stw	r2,28(sp)
    22a8:	18bffc1e 	bne	r3,r2,229c <___vfprintf_internal_r+0x1ca8>
    22ac:	003f8406 	br	20c0 <___vfprintf_internal_r+0x1acc>
    22b0:	d8814117 	ldw	r2,1284(sp)
    22b4:	10c00007 	ldb	r3,0(r2)
    22b8:	00800c04 	movi	r2,48
    22bc:	18805b26 	beq	r3,r2,242c <___vfprintf_internal_r+0x1e38>
    22c0:	d9000517 	ldw	r4,20(sp)
    22c4:	9125883a 	add	r18,r18,r4
    22c8:	003f7506 	br	20a0 <___vfprintf_internal_r+0x1aac>
    22cc:	d9014c17 	ldw	r4,1328(sp)
    22d0:	2080004c 	andi	r2,r4,1
    22d4:	1005003a 	cmpeq	r2,r2,zero
    22d8:	103f6a26 	beq	r2,zero,2084 <___vfprintf_internal_r+0x1a90>
    22dc:	d8800717 	ldw	r2,28(sp)
    22e0:	003f7706 	br	20c0 <___vfprintf_internal_r+0x1acc>
    22e4:	d9c14515 	stw	r7,1300(sp)
    22e8:	38004d16 	blt	r7,zero,2420 <___vfprintf_internal_r+0x1e2c>
    22ec:	dc814715 	stw	r18,1308(sp)
    22f0:	d8014615 	stw	zero,1304(sp)
    22f4:	003b6106 	br	107c <___vfprintf_internal_r+0xa88>
    22f8:	d9014f17 	ldw	r4,1340(sp)
    22fc:	d8800504 	addi	r2,sp,20
    2300:	d8800115 	stw	r2,4(sp)
    2304:	d8c00604 	addi	r3,sp,24
    2308:	d8800704 	addi	r2,sp,28
    230c:	800b883a 	mov	r5,r16
    2310:	880d883a 	mov	r6,r17
    2314:	01c000c4 	movi	r7,3
    2318:	d8c00215 	stw	r3,8(sp)
    231c:	d8800315 	stw	r2,12(sp)
    2320:	dcc00015 	stw	r19,0(sp)
    2324:	9829883a 	mov	r20,r19
    2328:	00028180 	call	2818 <_dtoa_r>
    232c:	d8814115 	stw	r2,1284(sp)
    2330:	003f5106 	br	2078 <___vfprintf_internal_r+0x1a84>
    2334:	d8c14217 	ldw	r3,1288(sp)
    2338:	d9014317 	ldw	r4,1292(sp)
    233c:	07000b44 	movi	fp,45
    2340:	1821883a 	mov	r16,r3
    2344:	2460003c 	xorhi	r17,r4,32768
    2348:	003f3106 	br	2010 <___vfprintf_internal_r+0x1a1c>
    234c:	9d000044 	addi	r20,r19,1
    2350:	003f3906 	br	2038 <___vfprintf_internal_r+0x1a44>
    2354:	983f251e 	bne	r19,zero,1fec <___vfprintf_internal_r+0x19f8>
    2358:	04c00044 	movi	r19,1
    235c:	003f2306 	br	1fec <___vfprintf_internal_r+0x19f8>
    2360:	04c00184 	movi	r19,6
    2364:	003f2106 	br	1fec <___vfprintf_internal_r+0x19f8>
    2368:	d8014515 	stw	zero,1300(sp)
    236c:	003eee06 	br	1f28 <___vfprintf_internal_r+0x1934>
    2370:	200f883a 	mov	r7,r4
    2374:	0100370e 	bge	zero,r4,2454 <___vfprintf_internal_r+0x1e60>
    2378:	9800031e 	bne	r19,zero,2388 <___vfprintf_internal_r+0x1d94>
    237c:	d9814c17 	ldw	r6,1328(sp)
    2380:	3080004c 	andi	r2,r6,1
    2384:	103fb726 	beq	r2,zero,2264 <___vfprintf_internal_r+0x1c70>
    2388:	20800044 	addi	r2,r4,1
    238c:	98a7883a 	add	r19,r19,r2
    2390:	dcc14515 	stw	r19,1300(sp)
    2394:	980f883a 	mov	r7,r19
    2398:	983f800e 	bge	r19,zero,219c <___vfprintf_internal_r+0x1ba8>
    239c:	003fb306 	br	226c <___vfprintf_internal_r+0x1c78>
    23a0:	d9814d17 	ldw	r6,1332(sp)
    23a4:	31bfff84 	addi	r6,r6,-2
    23a8:	d9814d15 	stw	r6,1332(sp)
    23ac:	003f4c06 	br	20e0 <___vfprintf_internal_r+0x1aec>
    23b0:	0100180e 	bge	zero,r4,2414 <___vfprintf_internal_r+0x1e20>
    23b4:	00800044 	movi	r2,1
    23b8:	1485883a 	add	r2,r2,r18
    23bc:	d8814515 	stw	r2,1300(sp)
    23c0:	100f883a 	mov	r7,r2
    23c4:	103f750e 	bge	r2,zero,219c <___vfprintf_internal_r+0x1ba8>
    23c8:	003fa806 	br	226c <___vfprintf_internal_r+0x1c78>
    23cc:	80c00c04 	addi	r3,r16,48
    23d0:	00800c04 	movi	r2,48
    23d4:	d8c008c5 	stb	r3,35(sp)
    23d8:	d9800804 	addi	r6,sp,32
    23dc:	d8c00904 	addi	r3,sp,36
    23e0:	d8800885 	stb	r2,34(sp)
    23e4:	003f6506 	br	217c <___vfprintf_internal_r+0x1b88>
    23e8:	d9014c17 	ldw	r4,1328(sp)
    23ec:	2084703a 	and	r2,r4,r2
    23f0:	103f9c26 	beq	r2,zero,2264 <___vfprintf_internal_r+0x1c70>
    23f4:	003f6606 	br	2190 <___vfprintf_internal_r+0x1b9c>
    23f8:	d9800804 	addi	r6,sp,32
    23fc:	d8c00884 	addi	r3,sp,34
    2400:	003f5e06 	br	217c <___vfprintf_internal_r+0x1b88>
    2404:	00800b44 	movi	r2,45
    2408:	0121c83a 	sub	r16,zero,r4
    240c:	d8800845 	stb	r2,33(sp)
    2410:	003f3d06 	br	2108 <___vfprintf_internal_r+0x1b14>
    2414:	00800084 	movi	r2,2
    2418:	1105c83a 	sub	r2,r2,r4
    241c:	003fe606 	br	23b8 <___vfprintf_internal_r+0x1dc4>
    2420:	d8014515 	stw	zero,1300(sp)
    2424:	dc814715 	stw	r18,1308(sp)
    2428:	003fb106 	br	22f0 <___vfprintf_internal_r+0x1cfc>
    242c:	000d883a 	mov	r6,zero
    2430:	000f883a 	mov	r7,zero
    2434:	8009883a 	mov	r4,r16
    2438:	880b883a 	mov	r5,r17
    243c:	0008eb80 	call	8eb8 <__nedf2>
    2440:	103f9f26 	beq	r2,zero,22c0 <___vfprintf_internal_r+0x1ccc>
    2444:	00800044 	movi	r2,1
    2448:	1509c83a 	sub	r4,r2,r20
    244c:	d9000515 	stw	r4,20(sp)
    2450:	003f9b06 	br	22c0 <___vfprintf_internal_r+0x1ccc>
    2454:	98000d1e 	bne	r19,zero,248c <___vfprintf_internal_r+0x1e98>
    2458:	d8c14c17 	ldw	r3,1328(sp)
    245c:	1880004c 	andi	r2,r3,1
    2460:	10000a1e 	bne	r2,zero,248c <___vfprintf_internal_r+0x1e98>
    2464:	01000044 	movi	r4,1
    2468:	200f883a 	mov	r7,r4
    246c:	d9014515 	stw	r4,1300(sp)
    2470:	003f4a06 	br	219c <___vfprintf_internal_r+0x1ba8>
    2474:	3cc00017 	ldw	r19,0(r7)
    2478:	39c00104 	addi	r7,r7,4
    247c:	983d0e0e 	bge	r19,zero,18b8 <___vfprintf_internal_r+0x12c4>
    2480:	b8c00007 	ldb	r3,0(r23)
    2484:	04ffffc4 	movi	r19,-1
    2488:	0038d906 	br	7f0 <___vfprintf_internal_r+0x1fc>
    248c:	9cc00084 	addi	r19,r19,2
    2490:	dcc14515 	stw	r19,1300(sp)
    2494:	980f883a 	mov	r7,r19
    2498:	983f400e 	bge	r19,zero,219c <___vfprintf_internal_r+0x1ba8>
    249c:	003f7306 	br	226c <___vfprintf_internal_r+0x1c78>

000024a0 <__vfprintf_internal>:
    24a0:	00800074 	movhi	r2,1
    24a4:	10b91e04 	addi	r2,r2,-7048
    24a8:	2013883a 	mov	r9,r4
    24ac:	11000017 	ldw	r4,0(r2)
    24b0:	2805883a 	mov	r2,r5
    24b4:	300f883a 	mov	r7,r6
    24b8:	480b883a 	mov	r5,r9
    24bc:	100d883a 	mov	r6,r2
    24c0:	00005f41 	jmpi	5f4 <___vfprintf_internal_r>

000024c4 <__swsetup_r>:
    24c4:	00800074 	movhi	r2,1
    24c8:	10b91e04 	addi	r2,r2,-7048
    24cc:	10c00017 	ldw	r3,0(r2)
    24d0:	defffd04 	addi	sp,sp,-12
    24d4:	dc400115 	stw	r17,4(sp)
    24d8:	dc000015 	stw	r16,0(sp)
    24dc:	dfc00215 	stw	ra,8(sp)
    24e0:	2023883a 	mov	r17,r4
    24e4:	2821883a 	mov	r16,r5
    24e8:	18000226 	beq	r3,zero,24f4 <__swsetup_r+0x30>
    24ec:	18800e17 	ldw	r2,56(r3)
    24f0:	10001f26 	beq	r2,zero,2570 <__swsetup_r+0xac>
    24f4:	8100030b 	ldhu	r4,12(r16)
    24f8:	2080020c 	andi	r2,r4,8
    24fc:	10002826 	beq	r2,zero,25a0 <__swsetup_r+0xdc>
    2500:	81400417 	ldw	r5,16(r16)
    2504:	28001d26 	beq	r5,zero,257c <__swsetup_r+0xb8>
    2508:	2080004c 	andi	r2,r4,1
    250c:	1005003a 	cmpeq	r2,r2,zero
    2510:	10000b26 	beq	r2,zero,2540 <__swsetup_r+0x7c>
    2514:	2080008c 	andi	r2,r4,2
    2518:	10001226 	beq	r2,zero,2564 <__swsetup_r+0xa0>
    251c:	0005883a 	mov	r2,zero
    2520:	80800215 	stw	r2,8(r16)
    2524:	28000b26 	beq	r5,zero,2554 <__swsetup_r+0x90>
    2528:	0005883a 	mov	r2,zero
    252c:	dfc00217 	ldw	ra,8(sp)
    2530:	dc400117 	ldw	r17,4(sp)
    2534:	dc000017 	ldw	r16,0(sp)
    2538:	dec00304 	addi	sp,sp,12
    253c:	f800283a 	ret
    2540:	80800517 	ldw	r2,20(r16)
    2544:	80000215 	stw	zero,8(r16)
    2548:	0085c83a 	sub	r2,zero,r2
    254c:	80800615 	stw	r2,24(r16)
    2550:	283ff51e 	bne	r5,zero,2528 <__swsetup_r+0x64>
    2554:	2080200c 	andi	r2,r4,128
    2558:	103ff326 	beq	r2,zero,2528 <__swsetup_r+0x64>
    255c:	00bfffc4 	movi	r2,-1
    2560:	003ff206 	br	252c <__swsetup_r+0x68>
    2564:	80800517 	ldw	r2,20(r16)
    2568:	80800215 	stw	r2,8(r16)
    256c:	003fed06 	br	2524 <__swsetup_r+0x60>
    2570:	1809883a 	mov	r4,r3
    2574:	00040640 	call	4064 <__sinit>
    2578:	003fde06 	br	24f4 <__swsetup_r+0x30>
    257c:	20c0a00c 	andi	r3,r4,640
    2580:	00808004 	movi	r2,512
    2584:	18bfe026 	beq	r3,r2,2508 <__swsetup_r+0x44>
    2588:	8809883a 	mov	r4,r17
    258c:	800b883a 	mov	r5,r16
    2590:	0004ddc0 	call	4ddc <__smakebuf_r>
    2594:	8100030b 	ldhu	r4,12(r16)
    2598:	81400417 	ldw	r5,16(r16)
    259c:	003fda06 	br	2508 <__swsetup_r+0x44>
    25a0:	2080040c 	andi	r2,r4,16
    25a4:	103fed26 	beq	r2,zero,255c <__swsetup_r+0x98>
    25a8:	2080010c 	andi	r2,r4,4
    25ac:	10001226 	beq	r2,zero,25f8 <__swsetup_r+0x134>
    25b0:	81400c17 	ldw	r5,48(r16)
    25b4:	28000526 	beq	r5,zero,25cc <__swsetup_r+0x108>
    25b8:	80801004 	addi	r2,r16,64
    25bc:	28800226 	beq	r5,r2,25c8 <__swsetup_r+0x104>
    25c0:	8809883a 	mov	r4,r17
    25c4:	00043e80 	call	43e8 <_free_r>
    25c8:	80000c15 	stw	zero,48(r16)
    25cc:	8080030b 	ldhu	r2,12(r16)
    25d0:	81400417 	ldw	r5,16(r16)
    25d4:	80000115 	stw	zero,4(r16)
    25d8:	10bff6cc 	andi	r2,r2,65499
    25dc:	8080030d 	sth	r2,12(r16)
    25e0:	81400015 	stw	r5,0(r16)
    25e4:	8080030b 	ldhu	r2,12(r16)
    25e8:	10800214 	ori	r2,r2,8
    25ec:	113fffcc 	andi	r4,r2,65535
    25f0:	8080030d 	sth	r2,12(r16)
    25f4:	003fc306 	br	2504 <__swsetup_r+0x40>
    25f8:	81400417 	ldw	r5,16(r16)
    25fc:	003ff906 	br	25e4 <__swsetup_r+0x120>

00002600 <quorem>:
    2600:	28c00417 	ldw	r3,16(r5)
    2604:	20800417 	ldw	r2,16(r4)
    2608:	defff604 	addi	sp,sp,-40
    260c:	ddc00715 	stw	r23,28(sp)
    2610:	dd400515 	stw	r21,20(sp)
    2614:	dfc00915 	stw	ra,36(sp)
    2618:	df000815 	stw	fp,32(sp)
    261c:	dd800615 	stw	r22,24(sp)
    2620:	dd000415 	stw	r20,16(sp)
    2624:	dcc00315 	stw	r19,12(sp)
    2628:	dc800215 	stw	r18,8(sp)
    262c:	dc400115 	stw	r17,4(sp)
    2630:	dc000015 	stw	r16,0(sp)
    2634:	202f883a 	mov	r23,r4
    2638:	282b883a 	mov	r21,r5
    263c:	10c07416 	blt	r2,r3,2810 <quorem+0x210>
    2640:	1c7fffc4 	addi	r17,r3,-1
    2644:	8c45883a 	add	r2,r17,r17
    2648:	1085883a 	add	r2,r2,r2
    264c:	2c000504 	addi	r16,r5,20
    2650:	24c00504 	addi	r19,r4,20
    2654:	14ed883a 	add	r22,r2,r19
    2658:	80a5883a 	add	r18,r16,r2
    265c:	b7000017 	ldw	fp,0(r22)
    2660:	91400017 	ldw	r5,0(r18)
    2664:	e009883a 	mov	r4,fp
    2668:	29400044 	addi	r5,r5,1
    266c:	00095780 	call	9578 <__udivsi3>
    2670:	1029883a 	mov	r20,r2
    2674:	10003c1e 	bne	r2,zero,2768 <quorem+0x168>
    2678:	a80b883a 	mov	r5,r21
    267c:	b809883a 	mov	r4,r23
    2680:	0005b080 	call	5b08 <__mcmp>
    2684:	10002b16 	blt	r2,zero,2734 <quorem+0x134>
    2688:	a5000044 	addi	r20,r20,1
    268c:	980f883a 	mov	r7,r19
    2690:	0011883a 	mov	r8,zero
    2694:	0009883a 	mov	r4,zero
    2698:	81400017 	ldw	r5,0(r16)
    269c:	38c00017 	ldw	r3,0(r7)
    26a0:	84000104 	addi	r16,r16,4
    26a4:	28bfffcc 	andi	r2,r5,65535
    26a8:	2085883a 	add	r2,r4,r2
    26ac:	11bfffcc 	andi	r6,r2,65535
    26b0:	193fffcc 	andi	r4,r3,65535
    26b4:	1004d43a 	srli	r2,r2,16
    26b8:	280ad43a 	srli	r5,r5,16
    26bc:	2189c83a 	sub	r4,r4,r6
    26c0:	2209883a 	add	r4,r4,r8
    26c4:	1806d43a 	srli	r3,r3,16
    26c8:	288b883a 	add	r5,r5,r2
    26cc:	200dd43a 	srai	r6,r4,16
    26d0:	28bfffcc 	andi	r2,r5,65535
    26d4:	1887c83a 	sub	r3,r3,r2
    26d8:	1987883a 	add	r3,r3,r6
    26dc:	3900000d 	sth	r4,0(r7)
    26e0:	38c0008d 	sth	r3,2(r7)
    26e4:	2808d43a 	srli	r4,r5,16
    26e8:	39c00104 	addi	r7,r7,4
    26ec:	1811d43a 	srai	r8,r3,16
    26f0:	943fe92e 	bgeu	r18,r16,2698 <quorem+0x98>
    26f4:	8c45883a 	add	r2,r17,r17
    26f8:	1085883a 	add	r2,r2,r2
    26fc:	9885883a 	add	r2,r19,r2
    2700:	10c00017 	ldw	r3,0(r2)
    2704:	18000b1e 	bne	r3,zero,2734 <quorem+0x134>
    2708:	113fff04 	addi	r4,r2,-4
    270c:	9900082e 	bgeu	r19,r4,2730 <quorem+0x130>
    2710:	10bfff17 	ldw	r2,-4(r2)
    2714:	10000326 	beq	r2,zero,2724 <quorem+0x124>
    2718:	00000506 	br	2730 <quorem+0x130>
    271c:	20800017 	ldw	r2,0(r4)
    2720:	1000031e 	bne	r2,zero,2730 <quorem+0x130>
    2724:	213fff04 	addi	r4,r4,-4
    2728:	8c7fffc4 	addi	r17,r17,-1
    272c:	993ffb36 	bltu	r19,r4,271c <quorem+0x11c>
    2730:	bc400415 	stw	r17,16(r23)
    2734:	a005883a 	mov	r2,r20
    2738:	dfc00917 	ldw	ra,36(sp)
    273c:	df000817 	ldw	fp,32(sp)
    2740:	ddc00717 	ldw	r23,28(sp)
    2744:	dd800617 	ldw	r22,24(sp)
    2748:	dd400517 	ldw	r21,20(sp)
    274c:	dd000417 	ldw	r20,16(sp)
    2750:	dcc00317 	ldw	r19,12(sp)
    2754:	dc800217 	ldw	r18,8(sp)
    2758:	dc400117 	ldw	r17,4(sp)
    275c:	dc000017 	ldw	r16,0(sp)
    2760:	dec00a04 	addi	sp,sp,40
    2764:	f800283a 	ret
    2768:	980f883a 	mov	r7,r19
    276c:	8011883a 	mov	r8,r16
    2770:	0013883a 	mov	r9,zero
    2774:	000d883a 	mov	r6,zero
    2778:	40c00017 	ldw	r3,0(r8)
    277c:	39000017 	ldw	r4,0(r7)
    2780:	42000104 	addi	r8,r8,4
    2784:	18bfffcc 	andi	r2,r3,65535
    2788:	a085383a 	mul	r2,r20,r2
    278c:	1806d43a 	srli	r3,r3,16
    2790:	217fffcc 	andi	r5,r4,65535
    2794:	3085883a 	add	r2,r6,r2
    2798:	11bfffcc 	andi	r6,r2,65535
    279c:	a0c7383a 	mul	r3,r20,r3
    27a0:	1004d43a 	srli	r2,r2,16
    27a4:	298bc83a 	sub	r5,r5,r6
    27a8:	2a4b883a 	add	r5,r5,r9
    27ac:	2008d43a 	srli	r4,r4,16
    27b0:	1887883a 	add	r3,r3,r2
    27b4:	280dd43a 	srai	r6,r5,16
    27b8:	18bfffcc 	andi	r2,r3,65535
    27bc:	2089c83a 	sub	r4,r4,r2
    27c0:	2189883a 	add	r4,r4,r6
    27c4:	3900008d 	sth	r4,2(r7)
    27c8:	3940000d 	sth	r5,0(r7)
    27cc:	180cd43a 	srli	r6,r3,16
    27d0:	39c00104 	addi	r7,r7,4
    27d4:	2013d43a 	srai	r9,r4,16
    27d8:	923fe72e 	bgeu	r18,r8,2778 <quorem+0x178>
    27dc:	e03fa61e 	bne	fp,zero,2678 <quorem+0x78>
    27e0:	b0ffff04 	addi	r3,r22,-4
    27e4:	98c0082e 	bgeu	r19,r3,2808 <quorem+0x208>
    27e8:	b0bfff17 	ldw	r2,-4(r22)
    27ec:	10000326 	beq	r2,zero,27fc <quorem+0x1fc>
    27f0:	00000506 	br	2808 <quorem+0x208>
    27f4:	18800017 	ldw	r2,0(r3)
    27f8:	1000031e 	bne	r2,zero,2808 <quorem+0x208>
    27fc:	18ffff04 	addi	r3,r3,-4
    2800:	8c7fffc4 	addi	r17,r17,-1
    2804:	98fffb36 	bltu	r19,r3,27f4 <quorem+0x1f4>
    2808:	bc400415 	stw	r17,16(r23)
    280c:	003f9a06 	br	2678 <quorem+0x78>
    2810:	0005883a 	mov	r2,zero
    2814:	003fc806 	br	2738 <quorem+0x138>

00002818 <_dtoa_r>:
    2818:	22001017 	ldw	r8,64(r4)
    281c:	deffda04 	addi	sp,sp,-152
    2820:	dd402115 	stw	r21,132(sp)
    2824:	dd002015 	stw	r20,128(sp)
    2828:	dc801e15 	stw	r18,120(sp)
    282c:	dc401d15 	stw	r17,116(sp)
    2830:	dfc02515 	stw	ra,148(sp)
    2834:	df002415 	stw	fp,144(sp)
    2838:	ddc02315 	stw	r23,140(sp)
    283c:	dd802215 	stw	r22,136(sp)
    2840:	dcc01f15 	stw	r19,124(sp)
    2844:	dc001c15 	stw	r16,112(sp)
    2848:	d9001615 	stw	r4,88(sp)
    284c:	3023883a 	mov	r17,r6
    2850:	2829883a 	mov	r20,r5
    2854:	d9c01715 	stw	r7,92(sp)
    2858:	dc802817 	ldw	r18,160(sp)
    285c:	302b883a 	mov	r21,r6
    2860:	40000a26 	beq	r8,zero,288c <_dtoa_r+0x74>
    2864:	20801117 	ldw	r2,68(r4)
    2868:	400b883a 	mov	r5,r8
    286c:	40800115 	stw	r2,4(r8)
    2870:	20c01117 	ldw	r3,68(r4)
    2874:	00800044 	movi	r2,1
    2878:	10c4983a 	sll	r2,r2,r3
    287c:	40800215 	stw	r2,8(r8)
    2880:	00059ac0 	call	59ac <_Bfree>
    2884:	d8c01617 	ldw	r3,88(sp)
    2888:	18001015 	stw	zero,64(r3)
    288c:	8800a316 	blt	r17,zero,2b1c <_dtoa_r+0x304>
    2890:	90000015 	stw	zero,0(r18)
    2894:	a8dffc2c 	andhi	r3,r21,32752
    2898:	009ffc34 	movhi	r2,32752
    289c:	18809126 	beq	r3,r2,2ae4 <_dtoa_r+0x2cc>
    28a0:	000d883a 	mov	r6,zero
    28a4:	000f883a 	mov	r7,zero
    28a8:	a009883a 	mov	r4,r20
    28ac:	a80b883a 	mov	r5,r21
    28b0:	dd001215 	stw	r20,72(sp)
    28b4:	dd401315 	stw	r21,76(sp)
    28b8:	0008eb80 	call	8eb8 <__nedf2>
    28bc:	1000171e 	bne	r2,zero,291c <_dtoa_r+0x104>
    28c0:	d9802717 	ldw	r6,156(sp)
    28c4:	00800044 	movi	r2,1
    28c8:	30800015 	stw	r2,0(r6)
    28cc:	d8802917 	ldw	r2,164(sp)
    28d0:	10029b26 	beq	r2,zero,3340 <_dtoa_r+0xb28>
    28d4:	d9002917 	ldw	r4,164(sp)
    28d8:	00800074 	movhi	r2,1
    28dc:	10b1b344 	addi	r2,r2,-14643
    28e0:	10ffffc4 	addi	r3,r2,-1
    28e4:	20800015 	stw	r2,0(r4)
    28e8:	1805883a 	mov	r2,r3
    28ec:	dfc02517 	ldw	ra,148(sp)
    28f0:	df002417 	ldw	fp,144(sp)
    28f4:	ddc02317 	ldw	r23,140(sp)
    28f8:	dd802217 	ldw	r22,136(sp)
    28fc:	dd402117 	ldw	r21,132(sp)
    2900:	dd002017 	ldw	r20,128(sp)
    2904:	dcc01f17 	ldw	r19,124(sp)
    2908:	dc801e17 	ldw	r18,120(sp)
    290c:	dc401d17 	ldw	r17,116(sp)
    2910:	dc001c17 	ldw	r16,112(sp)
    2914:	dec02604 	addi	sp,sp,152
    2918:	f800283a 	ret
    291c:	d9001617 	ldw	r4,88(sp)
    2920:	d9401217 	ldw	r5,72(sp)
    2924:	d8800104 	addi	r2,sp,4
    2928:	a80d883a 	mov	r6,r21
    292c:	d9c00204 	addi	r7,sp,8
    2930:	d8800015 	stw	r2,0(sp)
    2934:	0005fe80 	call	5fe8 <__d2b>
    2938:	d8800715 	stw	r2,28(sp)
    293c:	a804d53a 	srli	r2,r21,20
    2940:	1101ffcc 	andi	r4,r2,2047
    2944:	20008626 	beq	r4,zero,2b60 <_dtoa_r+0x348>
    2948:	d8c01217 	ldw	r3,72(sp)
    294c:	00800434 	movhi	r2,16
    2950:	10bfffc4 	addi	r2,r2,-1
    2954:	ddc00117 	ldw	r23,4(sp)
    2958:	a884703a 	and	r2,r21,r2
    295c:	1811883a 	mov	r8,r3
    2960:	124ffc34 	orhi	r9,r2,16368
    2964:	25bf0044 	addi	r22,r4,-1023
    2968:	d8000815 	stw	zero,32(sp)
    296c:	0005883a 	mov	r2,zero
    2970:	00cffe34 	movhi	r3,16376
    2974:	480b883a 	mov	r5,r9
    2978:	4009883a 	mov	r4,r8
    297c:	180f883a 	mov	r7,r3
    2980:	100d883a 	mov	r6,r2
    2984:	00087200 	call	8720 <__subdf3>
    2988:	0218dbf4 	movhi	r8,25455
    298c:	4210d844 	addi	r8,r8,17249
    2990:	024ff4f4 	movhi	r9,16339
    2994:	4a61e9c4 	addi	r9,r9,-30809
    2998:	480f883a 	mov	r7,r9
    299c:	400d883a 	mov	r6,r8
    29a0:	180b883a 	mov	r5,r3
    29a4:	1009883a 	mov	r4,r2
    29a8:	00088140 	call	8814 <__muldf3>
    29ac:	0222d874 	movhi	r8,35681
    29b0:	42322cc4 	addi	r8,r8,-14157
    29b4:	024ff1f4 	movhi	r9,16327
    29b8:	4a628a04 	addi	r9,r9,-30168
    29bc:	480f883a 	mov	r7,r9
    29c0:	400d883a 	mov	r6,r8
    29c4:	180b883a 	mov	r5,r3
    29c8:	1009883a 	mov	r4,r2
    29cc:	00087a00 	call	87a0 <__adddf3>
    29d0:	b009883a 	mov	r4,r22
    29d4:	1021883a 	mov	r16,r2
    29d8:	1823883a 	mov	r17,r3
    29dc:	00090d80 	call	90d8 <__floatsidf>
    29e0:	021427f4 	movhi	r8,20639
    29e4:	421e7ec4 	addi	r8,r8,31227
    29e8:	024ff4f4 	movhi	r9,16339
    29ec:	4a5104c4 	addi	r9,r9,17427
    29f0:	480f883a 	mov	r7,r9
    29f4:	400d883a 	mov	r6,r8
    29f8:	180b883a 	mov	r5,r3
    29fc:	1009883a 	mov	r4,r2
    2a00:	00088140 	call	8814 <__muldf3>
    2a04:	180f883a 	mov	r7,r3
    2a08:	880b883a 	mov	r5,r17
    2a0c:	100d883a 	mov	r6,r2
    2a10:	8009883a 	mov	r4,r16
    2a14:	00087a00 	call	87a0 <__adddf3>
    2a18:	1009883a 	mov	r4,r2
    2a1c:	180b883a 	mov	r5,r3
    2a20:	1021883a 	mov	r16,r2
    2a24:	1823883a 	mov	r17,r3
    2a28:	00091d00 	call	91d0 <__fixdfsi>
    2a2c:	000d883a 	mov	r6,zero
    2a30:	000f883a 	mov	r7,zero
    2a34:	8009883a 	mov	r4,r16
    2a38:	880b883a 	mov	r5,r17
    2a3c:	d8800d15 	stw	r2,52(sp)
    2a40:	00090500 	call	9050 <__ltdf2>
    2a44:	10031716 	blt	r2,zero,36a4 <_dtoa_r+0xe8c>
    2a48:	d8c00d17 	ldw	r3,52(sp)
    2a4c:	00800584 	movi	r2,22
    2a50:	10c1482e 	bgeu	r2,r3,2f74 <_dtoa_r+0x75c>
    2a54:	01000044 	movi	r4,1
    2a58:	d9000c15 	stw	r4,48(sp)
    2a5c:	bd85c83a 	sub	r2,r23,r22
    2a60:	11bfffc4 	addi	r6,r2,-1
    2a64:	30030b16 	blt	r6,zero,3694 <_dtoa_r+0xe7c>
    2a68:	d9800a15 	stw	r6,40(sp)
    2a6c:	d8001115 	stw	zero,68(sp)
    2a70:	d8c00d17 	ldw	r3,52(sp)
    2a74:	1802ff16 	blt	r3,zero,3674 <_dtoa_r+0xe5c>
    2a78:	d9000a17 	ldw	r4,40(sp)
    2a7c:	d8c00915 	stw	r3,36(sp)
    2a80:	d8001015 	stw	zero,64(sp)
    2a84:	20c9883a 	add	r4,r4,r3
    2a88:	d9000a15 	stw	r4,40(sp)
    2a8c:	d9001717 	ldw	r4,92(sp)
    2a90:	00800244 	movi	r2,9
    2a94:	11004636 	bltu	r2,r4,2bb0 <_dtoa_r+0x398>
    2a98:	00800144 	movi	r2,5
    2a9c:	11020416 	blt	r2,r4,32b0 <_dtoa_r+0xa98>
    2aa0:	04400044 	movi	r17,1
    2aa4:	d8c01717 	ldw	r3,92(sp)
    2aa8:	00800144 	movi	r2,5
    2aac:	10c1ed36 	bltu	r2,r3,3264 <_dtoa_r+0xa4c>
    2ab0:	18c5883a 	add	r2,r3,r3
    2ab4:	1085883a 	add	r2,r2,r2
    2ab8:	00c00034 	movhi	r3,0
    2abc:	18cab304 	addi	r3,r3,10956
    2ac0:	10c5883a 	add	r2,r2,r3
    2ac4:	11000017 	ldw	r4,0(r2)
    2ac8:	2000683a 	jmp	r4
    2acc:	00002bb8 	rdprs	zero,zero,174
    2ad0:	00002bb8 	rdprs	zero,zero,174
    2ad4:	000035b8 	rdprs	zero,zero,214
    2ad8:	00003590 	cmplti	zero,zero,214
    2adc:	000035d4 	movui	zero,215
    2ae0:	000035e0 	cmpeqi	zero,zero,215
    2ae4:	d9002717 	ldw	r4,156(sp)
    2ae8:	0089c3c4 	movi	r2,9999
    2aec:	20800015 	stw	r2,0(r4)
    2af0:	a0001026 	beq	r20,zero,2b34 <_dtoa_r+0x31c>
    2af4:	00c00074 	movhi	r3,1
    2af8:	18f1bf04 	addi	r3,r3,-14596
    2afc:	d9802917 	ldw	r6,164(sp)
    2b00:	303f7926 	beq	r6,zero,28e8 <_dtoa_r+0xd0>
    2b04:	188000c7 	ldb	r2,3(r3)
    2b08:	190000c4 	addi	r4,r3,3
    2b0c:	1000101e 	bne	r2,zero,2b50 <_dtoa_r+0x338>
    2b10:	d8802917 	ldw	r2,164(sp)
    2b14:	11000015 	stw	r4,0(r2)
    2b18:	003f7306 	br	28e8 <_dtoa_r+0xd0>
    2b1c:	00a00034 	movhi	r2,32768
    2b20:	10bfffc4 	addi	r2,r2,-1
    2b24:	00c00044 	movi	r3,1
    2b28:	88aa703a 	and	r21,r17,r2
    2b2c:	90c00015 	stw	r3,0(r18)
    2b30:	003f5806 	br	2894 <_dtoa_r+0x7c>
    2b34:	00800434 	movhi	r2,16
    2b38:	10bfffc4 	addi	r2,r2,-1
    2b3c:	a884703a 	and	r2,r21,r2
    2b40:	103fec1e 	bne	r2,zero,2af4 <_dtoa_r+0x2dc>
    2b44:	00c00074 	movhi	r3,1
    2b48:	18f1bc04 	addi	r3,r3,-14608
    2b4c:	003feb06 	br	2afc <_dtoa_r+0x2e4>
    2b50:	d8802917 	ldw	r2,164(sp)
    2b54:	19000204 	addi	r4,r3,8
    2b58:	11000015 	stw	r4,0(r2)
    2b5c:	003f6206 	br	28e8 <_dtoa_r+0xd0>
    2b60:	ddc00117 	ldw	r23,4(sp)
    2b64:	d8800217 	ldw	r2,8(sp)
    2b68:	01000804 	movi	r4,32
    2b6c:	b8c10c84 	addi	r3,r23,1074
    2b70:	18a3883a 	add	r17,r3,r2
    2b74:	2441b80e 	bge	r4,r17,3258 <_dtoa_r+0xa40>
    2b78:	00c01004 	movi	r3,64
    2b7c:	1c47c83a 	sub	r3,r3,r17
    2b80:	88bff804 	addi	r2,r17,-32
    2b84:	a8c6983a 	sll	r3,r21,r3
    2b88:	a084d83a 	srl	r2,r20,r2
    2b8c:	1888b03a 	or	r4,r3,r2
    2b90:	00092a80 	call	92a8 <__floatunsidf>
    2b94:	1011883a 	mov	r8,r2
    2b98:	00bf8434 	movhi	r2,65040
    2b9c:	01000044 	movi	r4,1
    2ba0:	10d3883a 	add	r9,r2,r3
    2ba4:	8dbef344 	addi	r22,r17,-1075
    2ba8:	d9000815 	stw	r4,32(sp)
    2bac:	003f6f06 	br	296c <_dtoa_r+0x154>
    2bb0:	d8001715 	stw	zero,92(sp)
    2bb4:	04400044 	movi	r17,1
    2bb8:	00bfffc4 	movi	r2,-1
    2bbc:	00c00044 	movi	r3,1
    2bc0:	d8800e15 	stw	r2,56(sp)
    2bc4:	d8002615 	stw	zero,152(sp)
    2bc8:	d8800f15 	stw	r2,60(sp)
    2bcc:	d8c00b15 	stw	r3,44(sp)
    2bd0:	1021883a 	mov	r16,r2
    2bd4:	d8801617 	ldw	r2,88(sp)
    2bd8:	10001115 	stw	zero,68(r2)
    2bdc:	d8801617 	ldw	r2,88(sp)
    2be0:	11401117 	ldw	r5,68(r2)
    2be4:	1009883a 	mov	r4,r2
    2be8:	0005f2c0 	call	5f2c <_Balloc>
    2bec:	d8c01617 	ldw	r3,88(sp)
    2bf0:	d8800515 	stw	r2,20(sp)
    2bf4:	18801015 	stw	r2,64(r3)
    2bf8:	00800384 	movi	r2,14
    2bfc:	14006836 	bltu	r2,r16,2da0 <_dtoa_r+0x588>
    2c00:	8805003a 	cmpeq	r2,r17,zero
    2c04:	1000661e 	bne	r2,zero,2da0 <_dtoa_r+0x588>
    2c08:	d9000d17 	ldw	r4,52(sp)
    2c0c:	0102300e 	bge	zero,r4,34d0 <_dtoa_r+0xcb8>
    2c10:	208003cc 	andi	r2,r4,15
    2c14:	100490fa 	slli	r2,r2,3
    2c18:	2025d13a 	srai	r18,r4,4
    2c1c:	00c00074 	movhi	r3,1
    2c20:	18f1d104 	addi	r3,r3,-14524
    2c24:	10c5883a 	add	r2,r2,r3
    2c28:	90c0040c 	andi	r3,r18,16
    2c2c:	14000017 	ldw	r16,0(r2)
    2c30:	14400117 	ldw	r17,4(r2)
    2c34:	18036a1e 	bne	r3,zero,39e0 <_dtoa_r+0x11c8>
    2c38:	05800084 	movi	r22,2
    2c3c:	90001026 	beq	r18,zero,2c80 <_dtoa_r+0x468>
    2c40:	04c00074 	movhi	r19,1
    2c44:	9cf20304 	addi	r19,r19,-14324
    2c48:	9080004c 	andi	r2,r18,1
    2c4c:	1005003a 	cmpeq	r2,r2,zero
    2c50:	1000081e 	bne	r2,zero,2c74 <_dtoa_r+0x45c>
    2c54:	99800017 	ldw	r6,0(r19)
    2c58:	99c00117 	ldw	r7,4(r19)
    2c5c:	880b883a 	mov	r5,r17
    2c60:	8009883a 	mov	r4,r16
    2c64:	00088140 	call	8814 <__muldf3>
    2c68:	1021883a 	mov	r16,r2
    2c6c:	b5800044 	addi	r22,r22,1
    2c70:	1823883a 	mov	r17,r3
    2c74:	9025d07a 	srai	r18,r18,1
    2c78:	9cc00204 	addi	r19,r19,8
    2c7c:	903ff21e 	bne	r18,zero,2c48 <_dtoa_r+0x430>
    2c80:	a80b883a 	mov	r5,r21
    2c84:	a009883a 	mov	r4,r20
    2c88:	880f883a 	mov	r7,r17
    2c8c:	800d883a 	mov	r6,r16
    2c90:	0008bd80 	call	8bd8 <__divdf3>
    2c94:	1029883a 	mov	r20,r2
    2c98:	182b883a 	mov	r21,r3
    2c9c:	d8c00c17 	ldw	r3,48(sp)
    2ca0:	1805003a 	cmpeq	r2,r3,zero
    2ca4:	1000081e 	bne	r2,zero,2cc8 <_dtoa_r+0x4b0>
    2ca8:	0005883a 	mov	r2,zero
    2cac:	00cffc34 	movhi	r3,16368
    2cb0:	180f883a 	mov	r7,r3
    2cb4:	a009883a 	mov	r4,r20
    2cb8:	a80b883a 	mov	r5,r21
    2cbc:	100d883a 	mov	r6,r2
    2cc0:	00090500 	call	9050 <__ltdf2>
    2cc4:	1003fe16 	blt	r2,zero,3cc0 <_dtoa_r+0x14a8>
    2cc8:	b009883a 	mov	r4,r22
    2ccc:	00090d80 	call	90d8 <__floatsidf>
    2cd0:	180b883a 	mov	r5,r3
    2cd4:	1009883a 	mov	r4,r2
    2cd8:	a00d883a 	mov	r6,r20
    2cdc:	a80f883a 	mov	r7,r21
    2ce0:	00088140 	call	8814 <__muldf3>
    2ce4:	0011883a 	mov	r8,zero
    2ce8:	02500734 	movhi	r9,16412
    2cec:	1009883a 	mov	r4,r2
    2cf0:	180b883a 	mov	r5,r3
    2cf4:	480f883a 	mov	r7,r9
    2cf8:	400d883a 	mov	r6,r8
    2cfc:	00087a00 	call	87a0 <__adddf3>
    2d00:	d9000f17 	ldw	r4,60(sp)
    2d04:	102d883a 	mov	r22,r2
    2d08:	00bf3034 	movhi	r2,64704
    2d0c:	18b9883a 	add	fp,r3,r2
    2d10:	e02f883a 	mov	r23,fp
    2d14:	20028f1e 	bne	r4,zero,3754 <_dtoa_r+0xf3c>
    2d18:	0005883a 	mov	r2,zero
    2d1c:	00d00534 	movhi	r3,16404
    2d20:	a009883a 	mov	r4,r20
    2d24:	a80b883a 	mov	r5,r21
    2d28:	180f883a 	mov	r7,r3
    2d2c:	100d883a 	mov	r6,r2
    2d30:	00087200 	call	8720 <__subdf3>
    2d34:	1009883a 	mov	r4,r2
    2d38:	e00f883a 	mov	r7,fp
    2d3c:	180b883a 	mov	r5,r3
    2d40:	b00d883a 	mov	r6,r22
    2d44:	1025883a 	mov	r18,r2
    2d48:	1827883a 	mov	r19,r3
    2d4c:	0008f400 	call	8f40 <__gtdf2>
    2d50:	00834f16 	blt	zero,r2,3a90 <_dtoa_r+0x1278>
    2d54:	e0e0003c 	xorhi	r3,fp,32768
    2d58:	9009883a 	mov	r4,r18
    2d5c:	980b883a 	mov	r5,r19
    2d60:	180f883a 	mov	r7,r3
    2d64:	b00d883a 	mov	r6,r22
    2d68:	00090500 	call	9050 <__ltdf2>
    2d6c:	1000080e 	bge	r2,zero,2d90 <_dtoa_r+0x578>
    2d70:	0027883a 	mov	r19,zero
    2d74:	0025883a 	mov	r18,zero
    2d78:	d8802617 	ldw	r2,152(sp)
    2d7c:	df000517 	ldw	fp,20(sp)
    2d80:	d8000615 	stw	zero,24(sp)
    2d84:	0084303a 	nor	r2,zero,r2
    2d88:	d8800d15 	stw	r2,52(sp)
    2d8c:	00019b06 	br	33fc <_dtoa_r+0xbe4>
    2d90:	d9801217 	ldw	r6,72(sp)
    2d94:	d8801317 	ldw	r2,76(sp)
    2d98:	3029883a 	mov	r20,r6
    2d9c:	102b883a 	mov	r21,r2
    2da0:	d8c00217 	ldw	r3,8(sp)
    2da4:	18008516 	blt	r3,zero,2fbc <_dtoa_r+0x7a4>
    2da8:	d9000d17 	ldw	r4,52(sp)
    2dac:	00800384 	movi	r2,14
    2db0:	11008216 	blt	r2,r4,2fbc <_dtoa_r+0x7a4>
    2db4:	200490fa 	slli	r2,r4,3
    2db8:	d9802617 	ldw	r6,152(sp)
    2dbc:	00c00074 	movhi	r3,1
    2dc0:	18f1d104 	addi	r3,r3,-14524
    2dc4:	10c5883a 	add	r2,r2,r3
    2dc8:	14800017 	ldw	r18,0(r2)
    2dcc:	14c00117 	ldw	r19,4(r2)
    2dd0:	30031e16 	blt	r6,zero,3a4c <_dtoa_r+0x1234>
    2dd4:	d9000517 	ldw	r4,20(sp)
    2dd8:	d8c00f17 	ldw	r3,60(sp)
    2ddc:	a823883a 	mov	r17,r21
    2de0:	a021883a 	mov	r16,r20
    2de4:	192b883a 	add	r21,r3,r4
    2de8:	2039883a 	mov	fp,r4
    2dec:	00000f06 	br	2e2c <_dtoa_r+0x614>
    2df0:	0005883a 	mov	r2,zero
    2df4:	00d00934 	movhi	r3,16420
    2df8:	5009883a 	mov	r4,r10
    2dfc:	580b883a 	mov	r5,r11
    2e00:	180f883a 	mov	r7,r3
    2e04:	100d883a 	mov	r6,r2
    2e08:	00088140 	call	8814 <__muldf3>
    2e0c:	180b883a 	mov	r5,r3
    2e10:	000d883a 	mov	r6,zero
    2e14:	000f883a 	mov	r7,zero
    2e18:	1009883a 	mov	r4,r2
    2e1c:	1021883a 	mov	r16,r2
    2e20:	1823883a 	mov	r17,r3
    2e24:	0008eb80 	call	8eb8 <__nedf2>
    2e28:	10004526 	beq	r2,zero,2f40 <_dtoa_r+0x728>
    2e2c:	900d883a 	mov	r6,r18
    2e30:	980f883a 	mov	r7,r19
    2e34:	8009883a 	mov	r4,r16
    2e38:	880b883a 	mov	r5,r17
    2e3c:	0008bd80 	call	8bd8 <__divdf3>
    2e40:	180b883a 	mov	r5,r3
    2e44:	1009883a 	mov	r4,r2
    2e48:	00091d00 	call	91d0 <__fixdfsi>
    2e4c:	1009883a 	mov	r4,r2
    2e50:	1029883a 	mov	r20,r2
    2e54:	00090d80 	call	90d8 <__floatsidf>
    2e58:	180f883a 	mov	r7,r3
    2e5c:	9009883a 	mov	r4,r18
    2e60:	980b883a 	mov	r5,r19
    2e64:	100d883a 	mov	r6,r2
    2e68:	00088140 	call	8814 <__muldf3>
    2e6c:	180f883a 	mov	r7,r3
    2e70:	880b883a 	mov	r5,r17
    2e74:	8009883a 	mov	r4,r16
    2e78:	100d883a 	mov	r6,r2
    2e7c:	00087200 	call	8720 <__subdf3>
    2e80:	1015883a 	mov	r10,r2
    2e84:	a0800c04 	addi	r2,r20,48
    2e88:	e0800005 	stb	r2,0(fp)
    2e8c:	e7000044 	addi	fp,fp,1
    2e90:	1817883a 	mov	r11,r3
    2e94:	e57fd61e 	bne	fp,r21,2df0 <_dtoa_r+0x5d8>
    2e98:	500d883a 	mov	r6,r10
    2e9c:	180f883a 	mov	r7,r3
    2ea0:	5009883a 	mov	r4,r10
    2ea4:	180b883a 	mov	r5,r3
    2ea8:	00087a00 	call	87a0 <__adddf3>
    2eac:	100d883a 	mov	r6,r2
    2eb0:	9009883a 	mov	r4,r18
    2eb4:	980b883a 	mov	r5,r19
    2eb8:	180f883a 	mov	r7,r3
    2ebc:	1021883a 	mov	r16,r2
    2ec0:	1823883a 	mov	r17,r3
    2ec4:	00090500 	call	9050 <__ltdf2>
    2ec8:	10000816 	blt	r2,zero,2eec <_dtoa_r+0x6d4>
    2ecc:	980b883a 	mov	r5,r19
    2ed0:	800d883a 	mov	r6,r16
    2ed4:	880f883a 	mov	r7,r17
    2ed8:	9009883a 	mov	r4,r18
    2edc:	0008e300 	call	8e30 <__eqdf2>
    2ee0:	1000171e 	bne	r2,zero,2f40 <_dtoa_r+0x728>
    2ee4:	a080004c 	andi	r2,r20,1
    2ee8:	10001526 	beq	r2,zero,2f40 <_dtoa_r+0x728>
    2eec:	d8800d17 	ldw	r2,52(sp)
    2ef0:	d8800415 	stw	r2,16(sp)
    2ef4:	e009883a 	mov	r4,fp
    2ef8:	213fffc4 	addi	r4,r4,-1
    2efc:	20c00007 	ldb	r3,0(r4)
    2f00:	00800e44 	movi	r2,57
    2f04:	1880081e 	bne	r3,r2,2f28 <_dtoa_r+0x710>
    2f08:	d8800517 	ldw	r2,20(sp)
    2f0c:	113ffa1e 	bne	r2,r4,2ef8 <_dtoa_r+0x6e0>
    2f10:	d8c00417 	ldw	r3,16(sp)
    2f14:	d9800517 	ldw	r6,20(sp)
    2f18:	00800c04 	movi	r2,48
    2f1c:	18c00044 	addi	r3,r3,1
    2f20:	d8c00415 	stw	r3,16(sp)
    2f24:	30800005 	stb	r2,0(r6)
    2f28:	20800003 	ldbu	r2,0(r4)
    2f2c:	d8c00417 	ldw	r3,16(sp)
    2f30:	27000044 	addi	fp,r4,1
    2f34:	10800044 	addi	r2,r2,1
    2f38:	d8c00d15 	stw	r3,52(sp)
    2f3c:	20800005 	stb	r2,0(r4)
    2f40:	d9001617 	ldw	r4,88(sp)
    2f44:	d9400717 	ldw	r5,28(sp)
    2f48:	00059ac0 	call	59ac <_Bfree>
    2f4c:	e0000005 	stb	zero,0(fp)
    2f50:	d9800d17 	ldw	r6,52(sp)
    2f54:	d8c02717 	ldw	r3,156(sp)
    2f58:	d9002917 	ldw	r4,164(sp)
    2f5c:	30800044 	addi	r2,r6,1
    2f60:	18800015 	stw	r2,0(r3)
    2f64:	20029c26 	beq	r4,zero,39d8 <_dtoa_r+0x11c0>
    2f68:	d8c00517 	ldw	r3,20(sp)
    2f6c:	27000015 	stw	fp,0(r4)
    2f70:	003e5d06 	br	28e8 <_dtoa_r+0xd0>
    2f74:	d9800d17 	ldw	r6,52(sp)
    2f78:	00c00074 	movhi	r3,1
    2f7c:	18f1d104 	addi	r3,r3,-14524
    2f80:	d9001217 	ldw	r4,72(sp)
    2f84:	300490fa 	slli	r2,r6,3
    2f88:	d9401317 	ldw	r5,76(sp)
    2f8c:	10c5883a 	add	r2,r2,r3
    2f90:	12000017 	ldw	r8,0(r2)
    2f94:	12400117 	ldw	r9,4(r2)
    2f98:	400d883a 	mov	r6,r8
    2f9c:	480f883a 	mov	r7,r9
    2fa0:	00090500 	call	9050 <__ltdf2>
    2fa4:	1000030e 	bge	r2,zero,2fb4 <_dtoa_r+0x79c>
    2fa8:	d8800d17 	ldw	r2,52(sp)
    2fac:	10bfffc4 	addi	r2,r2,-1
    2fb0:	d8800d15 	stw	r2,52(sp)
    2fb4:	d8000c15 	stw	zero,48(sp)
    2fb8:	003ea806 	br	2a5c <_dtoa_r+0x244>
    2fbc:	d9000b17 	ldw	r4,44(sp)
    2fc0:	202cc03a 	cmpne	r22,r4,zero
    2fc4:	b000c71e 	bne	r22,zero,32e4 <_dtoa_r+0xacc>
    2fc8:	dc001117 	ldw	r16,68(sp)
    2fcc:	dc801017 	ldw	r18,64(sp)
    2fd0:	0027883a 	mov	r19,zero
    2fd4:	04000b0e 	bge	zero,r16,3004 <_dtoa_r+0x7ec>
    2fd8:	d8c00a17 	ldw	r3,40(sp)
    2fdc:	00c0090e 	bge	zero,r3,3004 <_dtoa_r+0x7ec>
    2fe0:	8005883a 	mov	r2,r16
    2fe4:	1c011316 	blt	r3,r16,3434 <_dtoa_r+0xc1c>
    2fe8:	d9000a17 	ldw	r4,40(sp)
    2fec:	d9801117 	ldw	r6,68(sp)
    2ff0:	80a1c83a 	sub	r16,r16,r2
    2ff4:	2089c83a 	sub	r4,r4,r2
    2ff8:	308dc83a 	sub	r6,r6,r2
    2ffc:	d9000a15 	stw	r4,40(sp)
    3000:	d9801115 	stw	r6,68(sp)
    3004:	d8801017 	ldw	r2,64(sp)
    3008:	0080150e 	bge	zero,r2,3060 <_dtoa_r+0x848>
    300c:	d8c00b17 	ldw	r3,44(sp)
    3010:	1805003a 	cmpeq	r2,r3,zero
    3014:	1001c91e 	bne	r2,zero,373c <_dtoa_r+0xf24>
    3018:	04800e0e 	bge	zero,r18,3054 <_dtoa_r+0x83c>
    301c:	d9001617 	ldw	r4,88(sp)
    3020:	980b883a 	mov	r5,r19
    3024:	900d883a 	mov	r6,r18
    3028:	00067600 	call	6760 <__pow5mult>
    302c:	d9001617 	ldw	r4,88(sp)
    3030:	d9800717 	ldw	r6,28(sp)
    3034:	100b883a 	mov	r5,r2
    3038:	1027883a 	mov	r19,r2
    303c:	000643c0 	call	643c <__multiply>
    3040:	d9001617 	ldw	r4,88(sp)
    3044:	d9400717 	ldw	r5,28(sp)
    3048:	1023883a 	mov	r17,r2
    304c:	00059ac0 	call	59ac <_Bfree>
    3050:	dc400715 	stw	r17,28(sp)
    3054:	d9001017 	ldw	r4,64(sp)
    3058:	248dc83a 	sub	r6,r4,r18
    305c:	30010e1e 	bne	r6,zero,3498 <_dtoa_r+0xc80>
    3060:	d9001617 	ldw	r4,88(sp)
    3064:	04400044 	movi	r17,1
    3068:	880b883a 	mov	r5,r17
    306c:	00066240 	call	6624 <__i2b>
    3070:	d9800917 	ldw	r6,36(sp)
    3074:	1025883a 	mov	r18,r2
    3078:	0180040e 	bge	zero,r6,308c <_dtoa_r+0x874>
    307c:	d9001617 	ldw	r4,88(sp)
    3080:	100b883a 	mov	r5,r2
    3084:	00067600 	call	6760 <__pow5mult>
    3088:	1025883a 	mov	r18,r2
    308c:	d8801717 	ldw	r2,92(sp)
    3090:	8880f30e 	bge	r17,r2,3460 <_dtoa_r+0xc48>
    3094:	0023883a 	mov	r17,zero
    3098:	d9800917 	ldw	r6,36(sp)
    309c:	30019e1e 	bne	r6,zero,3718 <_dtoa_r+0xf00>
    30a0:	00c00044 	movi	r3,1
    30a4:	d9000a17 	ldw	r4,40(sp)
    30a8:	20c5883a 	add	r2,r4,r3
    30ac:	10c007cc 	andi	r3,r2,31
    30b0:	1800841e 	bne	r3,zero,32c4 <_dtoa_r+0xaac>
    30b4:	00800704 	movi	r2,28
    30b8:	d9000a17 	ldw	r4,40(sp)
    30bc:	d9801117 	ldw	r6,68(sp)
    30c0:	80a1883a 	add	r16,r16,r2
    30c4:	2089883a 	add	r4,r4,r2
    30c8:	308d883a 	add	r6,r6,r2
    30cc:	d9000a15 	stw	r4,40(sp)
    30d0:	d9801115 	stw	r6,68(sp)
    30d4:	d8801117 	ldw	r2,68(sp)
    30d8:	0080050e 	bge	zero,r2,30f0 <_dtoa_r+0x8d8>
    30dc:	d9400717 	ldw	r5,28(sp)
    30e0:	d9001617 	ldw	r4,88(sp)
    30e4:	100d883a 	mov	r6,r2
    30e8:	00062f00 	call	62f0 <__lshift>
    30ec:	d8800715 	stw	r2,28(sp)
    30f0:	d8c00a17 	ldw	r3,40(sp)
    30f4:	00c0050e 	bge	zero,r3,310c <_dtoa_r+0x8f4>
    30f8:	d9001617 	ldw	r4,88(sp)
    30fc:	900b883a 	mov	r5,r18
    3100:	180d883a 	mov	r6,r3
    3104:	00062f00 	call	62f0 <__lshift>
    3108:	1025883a 	mov	r18,r2
    310c:	d9000c17 	ldw	r4,48(sp)
    3110:	2005003a 	cmpeq	r2,r4,zero
    3114:	10016f26 	beq	r2,zero,36d4 <_dtoa_r+0xebc>
    3118:	d9000f17 	ldw	r4,60(sp)
    311c:	0102170e 	bge	zero,r4,397c <_dtoa_r+0x1164>
    3120:	d9800b17 	ldw	r6,44(sp)
    3124:	3005003a 	cmpeq	r2,r6,zero
    3128:	1000881e 	bne	r2,zero,334c <_dtoa_r+0xb34>
    312c:	0400050e 	bge	zero,r16,3144 <_dtoa_r+0x92c>
    3130:	d9001617 	ldw	r4,88(sp)
    3134:	980b883a 	mov	r5,r19
    3138:	800d883a 	mov	r6,r16
    313c:	00062f00 	call	62f0 <__lshift>
    3140:	1027883a 	mov	r19,r2
    3144:	8804c03a 	cmpne	r2,r17,zero
    3148:	1002541e 	bne	r2,zero,3a9c <_dtoa_r+0x1284>
    314c:	980b883a 	mov	r5,r19
    3150:	dd800517 	ldw	r22,20(sp)
    3154:	dcc00615 	stw	r19,24(sp)
    3158:	a700004c 	andi	fp,r20,1
    315c:	2827883a 	mov	r19,r5
    3160:	d9000717 	ldw	r4,28(sp)
    3164:	900b883a 	mov	r5,r18
    3168:	00026000 	call	2600 <quorem>
    316c:	d9000717 	ldw	r4,28(sp)
    3170:	d9400617 	ldw	r5,24(sp)
    3174:	1023883a 	mov	r17,r2
    3178:	8dc00c04 	addi	r23,r17,48
    317c:	0005b080 	call	5b08 <__mcmp>
    3180:	d9001617 	ldw	r4,88(sp)
    3184:	900b883a 	mov	r5,r18
    3188:	980d883a 	mov	r6,r19
    318c:	1029883a 	mov	r20,r2
    3190:	00061640 	call	6164 <__mdiff>
    3194:	102b883a 	mov	r21,r2
    3198:	10800317 	ldw	r2,12(r2)
    319c:	1001281e 	bne	r2,zero,3640 <_dtoa_r+0xe28>
    31a0:	d9000717 	ldw	r4,28(sp)
    31a4:	a80b883a 	mov	r5,r21
    31a8:	0005b080 	call	5b08 <__mcmp>
    31ac:	d9001617 	ldw	r4,88(sp)
    31b0:	1021883a 	mov	r16,r2
    31b4:	a80b883a 	mov	r5,r21
    31b8:	00059ac0 	call	59ac <_Bfree>
    31bc:	8000041e 	bne	r16,zero,31d0 <_dtoa_r+0x9b8>
    31c0:	d8801717 	ldw	r2,92(sp)
    31c4:	1000021e 	bne	r2,zero,31d0 <_dtoa_r+0x9b8>
    31c8:	e004c03a 	cmpne	r2,fp,zero
    31cc:	10011726 	beq	r2,zero,362c <_dtoa_r+0xe14>
    31d0:	a0010616 	blt	r20,zero,35ec <_dtoa_r+0xdd4>
    31d4:	a000041e 	bne	r20,zero,31e8 <_dtoa_r+0x9d0>
    31d8:	d8c01717 	ldw	r3,92(sp)
    31dc:	1800021e 	bne	r3,zero,31e8 <_dtoa_r+0x9d0>
    31e0:	e004c03a 	cmpne	r2,fp,zero
    31e4:	10010126 	beq	r2,zero,35ec <_dtoa_r+0xdd4>
    31e8:	04023d16 	blt	zero,r16,3ae0 <_dtoa_r+0x12c8>
    31ec:	b5c00005 	stb	r23,0(r22)
    31f0:	d9800517 	ldw	r6,20(sp)
    31f4:	d9000f17 	ldw	r4,60(sp)
    31f8:	b5800044 	addi	r22,r22,1
    31fc:	3105883a 	add	r2,r6,r4
    3200:	b0806526 	beq	r22,r2,3398 <_dtoa_r+0xb80>
    3204:	d9400717 	ldw	r5,28(sp)
    3208:	d9001617 	ldw	r4,88(sp)
    320c:	01800284 	movi	r6,10
    3210:	000f883a 	mov	r7,zero
    3214:	00066600 	call	6660 <__multadd>
    3218:	d8800715 	stw	r2,28(sp)
    321c:	d8800617 	ldw	r2,24(sp)
    3220:	14c10c26 	beq	r2,r19,3654 <_dtoa_r+0xe3c>
    3224:	d9400617 	ldw	r5,24(sp)
    3228:	d9001617 	ldw	r4,88(sp)
    322c:	01800284 	movi	r6,10
    3230:	000f883a 	mov	r7,zero
    3234:	00066600 	call	6660 <__multadd>
    3238:	d9001617 	ldw	r4,88(sp)
    323c:	980b883a 	mov	r5,r19
    3240:	01800284 	movi	r6,10
    3244:	000f883a 	mov	r7,zero
    3248:	d8800615 	stw	r2,24(sp)
    324c:	00066600 	call	6660 <__multadd>
    3250:	1027883a 	mov	r19,r2
    3254:	003fc206 	br	3160 <_dtoa_r+0x948>
    3258:	2445c83a 	sub	r2,r4,r17
    325c:	a088983a 	sll	r4,r20,r2
    3260:	003e4b06 	br	2b90 <_dtoa_r+0x378>
    3264:	01bfffc4 	movi	r6,-1
    3268:	00800044 	movi	r2,1
    326c:	d9800e15 	stw	r6,56(sp)
    3270:	d9800f15 	stw	r6,60(sp)
    3274:	d8800b15 	stw	r2,44(sp)
    3278:	d8c01617 	ldw	r3,88(sp)
    327c:	008005c4 	movi	r2,23
    3280:	18001115 	stw	zero,68(r3)
    3284:	1580082e 	bgeu	r2,r22,32a8 <_dtoa_r+0xa90>
    3288:	00c00104 	movi	r3,4
    328c:	0009883a 	mov	r4,zero
    3290:	18c7883a 	add	r3,r3,r3
    3294:	18800504 	addi	r2,r3,20
    3298:	21000044 	addi	r4,r4,1
    329c:	b0bffc2e 	bgeu	r22,r2,3290 <_dtoa_r+0xa78>
    32a0:	d9801617 	ldw	r6,88(sp)
    32a4:	31001115 	stw	r4,68(r6)
    32a8:	dc000f17 	ldw	r16,60(sp)
    32ac:	003e4b06 	br	2bdc <_dtoa_r+0x3c4>
    32b0:	d9801717 	ldw	r6,92(sp)
    32b4:	0023883a 	mov	r17,zero
    32b8:	31bfff04 	addi	r6,r6,-4
    32bc:	d9801715 	stw	r6,92(sp)
    32c0:	003df806 	br	2aa4 <_dtoa_r+0x28c>
    32c4:	00800804 	movi	r2,32
    32c8:	10c9c83a 	sub	r4,r2,r3
    32cc:	00c00104 	movi	r3,4
    32d0:	19005a16 	blt	r3,r4,343c <_dtoa_r+0xc24>
    32d4:	008000c4 	movi	r2,3
    32d8:	113f7e16 	blt	r2,r4,30d4 <_dtoa_r+0x8bc>
    32dc:	20800704 	addi	r2,r4,28
    32e0:	003f7506 	br	30b8 <_dtoa_r+0x8a0>
    32e4:	d9801717 	ldw	r6,92(sp)
    32e8:	00800044 	movi	r2,1
    32ec:	1180a10e 	bge	r2,r6,3574 <_dtoa_r+0xd5c>
    32f0:	d9800f17 	ldw	r6,60(sp)
    32f4:	d8c01017 	ldw	r3,64(sp)
    32f8:	30bfffc4 	addi	r2,r6,-1
    32fc:	1881c616 	blt	r3,r2,3a18 <_dtoa_r+0x1200>
    3300:	18a5c83a 	sub	r18,r3,r2
    3304:	d8800f17 	ldw	r2,60(sp)
    3308:	10026216 	blt	r2,zero,3c94 <_dtoa_r+0x147c>
    330c:	dc001117 	ldw	r16,68(sp)
    3310:	1007883a 	mov	r3,r2
    3314:	d9800a17 	ldw	r6,40(sp)
    3318:	d8801117 	ldw	r2,68(sp)
    331c:	d9001617 	ldw	r4,88(sp)
    3320:	30cd883a 	add	r6,r6,r3
    3324:	10c5883a 	add	r2,r2,r3
    3328:	01400044 	movi	r5,1
    332c:	d9800a15 	stw	r6,40(sp)
    3330:	d8801115 	stw	r2,68(sp)
    3334:	00066240 	call	6624 <__i2b>
    3338:	1027883a 	mov	r19,r2
    333c:	003f2506 	br	2fd4 <_dtoa_r+0x7bc>
    3340:	00c00074 	movhi	r3,1
    3344:	18f1b304 	addi	r3,r3,-14644
    3348:	003d6706 	br	28e8 <_dtoa_r+0xd0>
    334c:	dd800517 	ldw	r22,20(sp)
    3350:	04000044 	movi	r16,1
    3354:	00000706 	br	3374 <_dtoa_r+0xb5c>
    3358:	d9400717 	ldw	r5,28(sp)
    335c:	d9001617 	ldw	r4,88(sp)
    3360:	01800284 	movi	r6,10
    3364:	000f883a 	mov	r7,zero
    3368:	00066600 	call	6660 <__multadd>
    336c:	d8800715 	stw	r2,28(sp)
    3370:	84000044 	addi	r16,r16,1
    3374:	d9000717 	ldw	r4,28(sp)
    3378:	900b883a 	mov	r5,r18
    337c:	00026000 	call	2600 <quorem>
    3380:	15c00c04 	addi	r23,r2,48
    3384:	b5c00005 	stb	r23,0(r22)
    3388:	d8c00f17 	ldw	r3,60(sp)
    338c:	b5800044 	addi	r22,r22,1
    3390:	80fff116 	blt	r16,r3,3358 <_dtoa_r+0xb40>
    3394:	d8000615 	stw	zero,24(sp)
    3398:	d9400717 	ldw	r5,28(sp)
    339c:	d9001617 	ldw	r4,88(sp)
    33a0:	01800044 	movi	r6,1
    33a4:	00062f00 	call	62f0 <__lshift>
    33a8:	1009883a 	mov	r4,r2
    33ac:	900b883a 	mov	r5,r18
    33b0:	d8800715 	stw	r2,28(sp)
    33b4:	0005b080 	call	5b08 <__mcmp>
    33b8:	00803c0e 	bge	zero,r2,34ac <_dtoa_r+0xc94>
    33bc:	b009883a 	mov	r4,r22
    33c0:	213fffc4 	addi	r4,r4,-1
    33c4:	21400003 	ldbu	r5,0(r4)
    33c8:	00800e44 	movi	r2,57
    33cc:	28c03fcc 	andi	r3,r5,255
    33d0:	18c0201c 	xori	r3,r3,128
    33d4:	18ffe004 	addi	r3,r3,-128
    33d8:	1881981e 	bne	r3,r2,3a3c <_dtoa_r+0x1224>
    33dc:	d9800517 	ldw	r6,20(sp)
    33e0:	21bff71e 	bne	r4,r6,33c0 <_dtoa_r+0xba8>
    33e4:	d8800d17 	ldw	r2,52(sp)
    33e8:	37000044 	addi	fp,r6,1
    33ec:	10800044 	addi	r2,r2,1
    33f0:	d8800d15 	stw	r2,52(sp)
    33f4:	00800c44 	movi	r2,49
    33f8:	30800005 	stb	r2,0(r6)
    33fc:	d9001617 	ldw	r4,88(sp)
    3400:	900b883a 	mov	r5,r18
    3404:	00059ac0 	call	59ac <_Bfree>
    3408:	983ecd26 	beq	r19,zero,2f40 <_dtoa_r+0x728>
    340c:	d8c00617 	ldw	r3,24(sp)
    3410:	18000426 	beq	r3,zero,3424 <_dtoa_r+0xc0c>
    3414:	1cc00326 	beq	r3,r19,3424 <_dtoa_r+0xc0c>
    3418:	d9001617 	ldw	r4,88(sp)
    341c:	180b883a 	mov	r5,r3
    3420:	00059ac0 	call	59ac <_Bfree>
    3424:	d9001617 	ldw	r4,88(sp)
    3428:	980b883a 	mov	r5,r19
    342c:	00059ac0 	call	59ac <_Bfree>
    3430:	003ec306 	br	2f40 <_dtoa_r+0x728>
    3434:	1805883a 	mov	r2,r3
    3438:	003eeb06 	br	2fe8 <_dtoa_r+0x7d0>
    343c:	d9800a17 	ldw	r6,40(sp)
    3440:	d8c01117 	ldw	r3,68(sp)
    3444:	20bfff04 	addi	r2,r4,-4
    3448:	308d883a 	add	r6,r6,r2
    344c:	1887883a 	add	r3,r3,r2
    3450:	80a1883a 	add	r16,r16,r2
    3454:	d9800a15 	stw	r6,40(sp)
    3458:	d8c01115 	stw	r3,68(sp)
    345c:	003f1d06 	br	30d4 <_dtoa_r+0x8bc>
    3460:	a03f0c1e 	bne	r20,zero,3094 <_dtoa_r+0x87c>
    3464:	00800434 	movhi	r2,16
    3468:	10bfffc4 	addi	r2,r2,-1
    346c:	a884703a 	and	r2,r21,r2
    3470:	103f081e 	bne	r2,zero,3094 <_dtoa_r+0x87c>
    3474:	a89ffc2c 	andhi	r2,r21,32752
    3478:	103f0626 	beq	r2,zero,3094 <_dtoa_r+0x87c>
    347c:	d8c01117 	ldw	r3,68(sp)
    3480:	d9000a17 	ldw	r4,40(sp)
    3484:	18c00044 	addi	r3,r3,1
    3488:	21000044 	addi	r4,r4,1
    348c:	d8c01115 	stw	r3,68(sp)
    3490:	d9000a15 	stw	r4,40(sp)
    3494:	003f0006 	br	3098 <_dtoa_r+0x880>
    3498:	d9400717 	ldw	r5,28(sp)
    349c:	d9001617 	ldw	r4,88(sp)
    34a0:	00067600 	call	6760 <__pow5mult>
    34a4:	d8800715 	stw	r2,28(sp)
    34a8:	003eed06 	br	3060 <_dtoa_r+0x848>
    34ac:	1000021e 	bne	r2,zero,34b8 <_dtoa_r+0xca0>
    34b0:	b880004c 	andi	r2,r23,1
    34b4:	103fc11e 	bne	r2,zero,33bc <_dtoa_r+0xba4>
    34b8:	b5bfffc4 	addi	r22,r22,-1
    34bc:	b0c00007 	ldb	r3,0(r22)
    34c0:	00800c04 	movi	r2,48
    34c4:	18bffc26 	beq	r3,r2,34b8 <_dtoa_r+0xca0>
    34c8:	b7000044 	addi	fp,r22,1
    34cc:	003fcb06 	br	33fc <_dtoa_r+0xbe4>
    34d0:	d9800d17 	ldw	r6,52(sp)
    34d4:	018fc83a 	sub	r7,zero,r6
    34d8:	3801f726 	beq	r7,zero,3cb8 <_dtoa_r+0x14a0>
    34dc:	398003cc 	andi	r6,r7,15
    34e0:	300c90fa 	slli	r6,r6,3
    34e4:	01400074 	movhi	r5,1
    34e8:	2971d104 	addi	r5,r5,-14524
    34ec:	d9001217 	ldw	r4,72(sp)
    34f0:	314d883a 	add	r6,r6,r5
    34f4:	30c00117 	ldw	r3,4(r6)
    34f8:	30800017 	ldw	r2,0(r6)
    34fc:	d9401317 	ldw	r5,76(sp)
    3500:	3821d13a 	srai	r16,r7,4
    3504:	100d883a 	mov	r6,r2
    3508:	180f883a 	mov	r7,r3
    350c:	00088140 	call	8814 <__muldf3>
    3510:	1011883a 	mov	r8,r2
    3514:	1813883a 	mov	r9,r3
    3518:	1029883a 	mov	r20,r2
    351c:	182b883a 	mov	r21,r3
    3520:	8001e526 	beq	r16,zero,3cb8 <_dtoa_r+0x14a0>
    3524:	05800084 	movi	r22,2
    3528:	04400074 	movhi	r17,1
    352c:	8c720304 	addi	r17,r17,-14324
    3530:	8080004c 	andi	r2,r16,1
    3534:	1005003a 	cmpeq	r2,r2,zero
    3538:	1000081e 	bne	r2,zero,355c <_dtoa_r+0xd44>
    353c:	89800017 	ldw	r6,0(r17)
    3540:	89c00117 	ldw	r7,4(r17)
    3544:	480b883a 	mov	r5,r9
    3548:	4009883a 	mov	r4,r8
    354c:	00088140 	call	8814 <__muldf3>
    3550:	1011883a 	mov	r8,r2
    3554:	b5800044 	addi	r22,r22,1
    3558:	1813883a 	mov	r9,r3
    355c:	8021d07a 	srai	r16,r16,1
    3560:	8c400204 	addi	r17,r17,8
    3564:	803ff21e 	bne	r16,zero,3530 <_dtoa_r+0xd18>
    3568:	4029883a 	mov	r20,r8
    356c:	482b883a 	mov	r21,r9
    3570:	003dca06 	br	2c9c <_dtoa_r+0x484>
    3574:	d9000817 	ldw	r4,32(sp)
    3578:	2005003a 	cmpeq	r2,r4,zero
    357c:	1001f61e 	bne	r2,zero,3d58 <_dtoa_r+0x1540>
    3580:	dc001117 	ldw	r16,68(sp)
    3584:	dc801017 	ldw	r18,64(sp)
    3588:	18c10cc4 	addi	r3,r3,1075
    358c:	003f6106 	br	3314 <_dtoa_r+0xafc>
    3590:	d8000b15 	stw	zero,44(sp)
    3594:	d9802617 	ldw	r6,152(sp)
    3598:	d8c00d17 	ldw	r3,52(sp)
    359c:	30800044 	addi	r2,r6,1
    35a0:	18ad883a 	add	r22,r3,r2
    35a4:	b13fffc4 	addi	r4,r22,-1
    35a8:	d9000e15 	stw	r4,56(sp)
    35ac:	0581f60e 	bge	zero,r22,3d88 <_dtoa_r+0x1570>
    35b0:	dd800f15 	stw	r22,60(sp)
    35b4:	003f3006 	br	3278 <_dtoa_r+0xa60>
    35b8:	d8000b15 	stw	zero,44(sp)
    35bc:	d9002617 	ldw	r4,152(sp)
    35c0:	0101eb0e 	bge	zero,r4,3d70 <_dtoa_r+0x1558>
    35c4:	202d883a 	mov	r22,r4
    35c8:	d9000e15 	stw	r4,56(sp)
    35cc:	d9000f15 	stw	r4,60(sp)
    35d0:	003f2906 	br	3278 <_dtoa_r+0xa60>
    35d4:	01800044 	movi	r6,1
    35d8:	d9800b15 	stw	r6,44(sp)
    35dc:	003ff706 	br	35bc <_dtoa_r+0xda4>
    35e0:	01000044 	movi	r4,1
    35e4:	d9000b15 	stw	r4,44(sp)
    35e8:	003fea06 	br	3594 <_dtoa_r+0xd7c>
    35ec:	04000c0e 	bge	zero,r16,3620 <_dtoa_r+0xe08>
    35f0:	d9400717 	ldw	r5,28(sp)
    35f4:	d9001617 	ldw	r4,88(sp)
    35f8:	01800044 	movi	r6,1
    35fc:	00062f00 	call	62f0 <__lshift>
    3600:	1009883a 	mov	r4,r2
    3604:	900b883a 	mov	r5,r18
    3608:	d8800715 	stw	r2,28(sp)
    360c:	0005b080 	call	5b08 <__mcmp>
    3610:	0081e00e 	bge	zero,r2,3d94 <_dtoa_r+0x157c>
    3614:	bdc00044 	addi	r23,r23,1
    3618:	00800e84 	movi	r2,58
    361c:	b881a226 	beq	r23,r2,3ca8 <_dtoa_r+0x1490>
    3620:	b7000044 	addi	fp,r22,1
    3624:	b5c00005 	stb	r23,0(r22)
    3628:	003f7406 	br	33fc <_dtoa_r+0xbe4>
    362c:	00800e44 	movi	r2,57
    3630:	b8819d26 	beq	r23,r2,3ca8 <_dtoa_r+0x1490>
    3634:	053ffa0e 	bge	zero,r20,3620 <_dtoa_r+0xe08>
    3638:	8dc00c44 	addi	r23,r17,49
    363c:	003ff806 	br	3620 <_dtoa_r+0xe08>
    3640:	d9001617 	ldw	r4,88(sp)
    3644:	a80b883a 	mov	r5,r21
    3648:	04000044 	movi	r16,1
    364c:	00059ac0 	call	59ac <_Bfree>
    3650:	003edf06 	br	31d0 <_dtoa_r+0x9b8>
    3654:	d9001617 	ldw	r4,88(sp)
    3658:	980b883a 	mov	r5,r19
    365c:	01800284 	movi	r6,10
    3660:	000f883a 	mov	r7,zero
    3664:	00066600 	call	6660 <__multadd>
    3668:	1027883a 	mov	r19,r2
    366c:	d8800615 	stw	r2,24(sp)
    3670:	003ebb06 	br	3160 <_dtoa_r+0x948>
    3674:	d9801117 	ldw	r6,68(sp)
    3678:	d8800d17 	ldw	r2,52(sp)
    367c:	d8000915 	stw	zero,36(sp)
    3680:	308dc83a 	sub	r6,r6,r2
    3684:	0087c83a 	sub	r3,zero,r2
    3688:	d9801115 	stw	r6,68(sp)
    368c:	d8c01015 	stw	r3,64(sp)
    3690:	003cfe06 	br	2a8c <_dtoa_r+0x274>
    3694:	018dc83a 	sub	r6,zero,r6
    3698:	d9801115 	stw	r6,68(sp)
    369c:	d8000a15 	stw	zero,40(sp)
    36a0:	003cf306 	br	2a70 <_dtoa_r+0x258>
    36a4:	d9000d17 	ldw	r4,52(sp)
    36a8:	00090d80 	call	90d8 <__floatsidf>
    36ac:	880b883a 	mov	r5,r17
    36b0:	8009883a 	mov	r4,r16
    36b4:	180f883a 	mov	r7,r3
    36b8:	100d883a 	mov	r6,r2
    36bc:	0008eb80 	call	8eb8 <__nedf2>
    36c0:	103ce126 	beq	r2,zero,2a48 <_dtoa_r+0x230>
    36c4:	d9800d17 	ldw	r6,52(sp)
    36c8:	31bfffc4 	addi	r6,r6,-1
    36cc:	d9800d15 	stw	r6,52(sp)
    36d0:	003cdd06 	br	2a48 <_dtoa_r+0x230>
    36d4:	d9000717 	ldw	r4,28(sp)
    36d8:	900b883a 	mov	r5,r18
    36dc:	0005b080 	call	5b08 <__mcmp>
    36e0:	103e8d0e 	bge	r2,zero,3118 <_dtoa_r+0x900>
    36e4:	d9400717 	ldw	r5,28(sp)
    36e8:	d9001617 	ldw	r4,88(sp)
    36ec:	01800284 	movi	r6,10
    36f0:	000f883a 	mov	r7,zero
    36f4:	00066600 	call	6660 <__multadd>
    36f8:	d9800d17 	ldw	r6,52(sp)
    36fc:	d8800715 	stw	r2,28(sp)
    3700:	31bfffc4 	addi	r6,r6,-1
    3704:	d9800d15 	stw	r6,52(sp)
    3708:	b001a71e 	bne	r22,zero,3da8 <_dtoa_r+0x1590>
    370c:	d8800e17 	ldw	r2,56(sp)
    3710:	d8800f15 	stw	r2,60(sp)
    3714:	003e8006 	br	3118 <_dtoa_r+0x900>
    3718:	90800417 	ldw	r2,16(r18)
    371c:	1085883a 	add	r2,r2,r2
    3720:	1085883a 	add	r2,r2,r2
    3724:	1485883a 	add	r2,r2,r18
    3728:	11000417 	ldw	r4,16(r2)
    372c:	00059d40 	call	59d4 <__hi0bits>
    3730:	00c00804 	movi	r3,32
    3734:	1887c83a 	sub	r3,r3,r2
    3738:	003e5a06 	br	30a4 <_dtoa_r+0x88c>
    373c:	d9400717 	ldw	r5,28(sp)
    3740:	d9801017 	ldw	r6,64(sp)
    3744:	d9001617 	ldw	r4,88(sp)
    3748:	00067600 	call	6760 <__pow5mult>
    374c:	d8800715 	stw	r2,28(sp)
    3750:	003e4306 	br	3060 <_dtoa_r+0x848>
    3754:	d9800f17 	ldw	r6,60(sp)
    3758:	d8800d17 	ldw	r2,52(sp)
    375c:	d9800315 	stw	r6,12(sp)
    3760:	d8800415 	stw	r2,16(sp)
    3764:	d8c00b17 	ldw	r3,44(sp)
    3768:	1805003a 	cmpeq	r2,r3,zero
    376c:	1000e21e 	bne	r2,zero,3af8 <_dtoa_r+0x12e0>
    3770:	d9000317 	ldw	r4,12(sp)
    3774:	0005883a 	mov	r2,zero
    3778:	00cff834 	movhi	r3,16352
    377c:	200c90fa 	slli	r6,r4,3
    3780:	01000074 	movhi	r4,1
    3784:	2131d104 	addi	r4,r4,-14524
    3788:	180b883a 	mov	r5,r3
    378c:	310d883a 	add	r6,r6,r4
    3790:	327fff17 	ldw	r9,-4(r6)
    3794:	323ffe17 	ldw	r8,-8(r6)
    3798:	1009883a 	mov	r4,r2
    379c:	480f883a 	mov	r7,r9
    37a0:	400d883a 	mov	r6,r8
    37a4:	0008bd80 	call	8bd8 <__divdf3>
    37a8:	180b883a 	mov	r5,r3
    37ac:	b00d883a 	mov	r6,r22
    37b0:	b80f883a 	mov	r7,r23
    37b4:	1009883a 	mov	r4,r2
    37b8:	00087200 	call	8720 <__subdf3>
    37bc:	a80b883a 	mov	r5,r21
    37c0:	a009883a 	mov	r4,r20
    37c4:	d8c01915 	stw	r3,100(sp)
    37c8:	d8801815 	stw	r2,96(sp)
    37cc:	00091d00 	call	91d0 <__fixdfsi>
    37d0:	1009883a 	mov	r4,r2
    37d4:	1027883a 	mov	r19,r2
    37d8:	00090d80 	call	90d8 <__floatsidf>
    37dc:	a80b883a 	mov	r5,r21
    37e0:	a009883a 	mov	r4,r20
    37e4:	180f883a 	mov	r7,r3
    37e8:	100d883a 	mov	r6,r2
    37ec:	00087200 	call	8720 <__subdf3>
    37f0:	d9801817 	ldw	r6,96(sp)
    37f4:	1823883a 	mov	r17,r3
    37f8:	d8801415 	stw	r2,80(sp)
    37fc:	302d883a 	mov	r22,r6
    3800:	d9800517 	ldw	r6,20(sp)
    3804:	9cc00c04 	addi	r19,r19,48
    3808:	dc401515 	stw	r17,84(sp)
    380c:	d8c01917 	ldw	r3,100(sp)
    3810:	34c00005 	stb	r19,0(r6)
    3814:	d8800517 	ldw	r2,20(sp)
    3818:	d9401917 	ldw	r5,100(sp)
    381c:	d9801417 	ldw	r6,80(sp)
    3820:	b009883a 	mov	r4,r22
    3824:	880f883a 	mov	r7,r17
    3828:	182f883a 	mov	r23,r3
    382c:	17000044 	addi	fp,r2,1
    3830:	0008f400 	call	8f40 <__gtdf2>
    3834:	00804e16 	blt	zero,r2,3970 <_dtoa_r+0x1158>
    3838:	d9801417 	ldw	r6,80(sp)
    383c:	0005883a 	mov	r2,zero
    3840:	00cffc34 	movhi	r3,16368
    3844:	180b883a 	mov	r5,r3
    3848:	880f883a 	mov	r7,r17
    384c:	1009883a 	mov	r4,r2
    3850:	00087200 	call	8720 <__subdf3>
    3854:	d9401917 	ldw	r5,100(sp)
    3858:	180f883a 	mov	r7,r3
    385c:	b009883a 	mov	r4,r22
    3860:	100d883a 	mov	r6,r2
    3864:	0008f400 	call	8f40 <__gtdf2>
    3868:	00bda216 	blt	zero,r2,2ef4 <_dtoa_r+0x6dc>
    386c:	d8c00317 	ldw	r3,12(sp)
    3870:	00800044 	movi	r2,1
    3874:	10c01216 	blt	r2,r3,38c0 <_dtoa_r+0x10a8>
    3878:	003d4506 	br	2d90 <_dtoa_r+0x578>
    387c:	d9801417 	ldw	r6,80(sp)
    3880:	0005883a 	mov	r2,zero
    3884:	00cffc34 	movhi	r3,16368
    3888:	180b883a 	mov	r5,r3
    388c:	880f883a 	mov	r7,r17
    3890:	1009883a 	mov	r4,r2
    3894:	00087200 	call	8720 <__subdf3>
    3898:	d9c01b17 	ldw	r7,108(sp)
    389c:	180b883a 	mov	r5,r3
    38a0:	1009883a 	mov	r4,r2
    38a4:	b00d883a 	mov	r6,r22
    38a8:	00090500 	call	9050 <__ltdf2>
    38ac:	103d9116 	blt	r2,zero,2ef4 <_dtoa_r+0x6dc>
    38b0:	d9800517 	ldw	r6,20(sp)
    38b4:	d9000317 	ldw	r4,12(sp)
    38b8:	3105883a 	add	r2,r6,r4
    38bc:	e0bd3426 	beq	fp,r2,2d90 <_dtoa_r+0x578>
    38c0:	04500934 	movhi	r17,16420
    38c4:	0021883a 	mov	r16,zero
    38c8:	b80b883a 	mov	r5,r23
    38cc:	b009883a 	mov	r4,r22
    38d0:	800d883a 	mov	r6,r16
    38d4:	880f883a 	mov	r7,r17
    38d8:	00088140 	call	8814 <__muldf3>
    38dc:	d9401517 	ldw	r5,84(sp)
    38e0:	d9001417 	ldw	r4,80(sp)
    38e4:	880f883a 	mov	r7,r17
    38e8:	000d883a 	mov	r6,zero
    38ec:	d8801a15 	stw	r2,104(sp)
    38f0:	d8c01b15 	stw	r3,108(sp)
    38f4:	00088140 	call	8814 <__muldf3>
    38f8:	180b883a 	mov	r5,r3
    38fc:	1009883a 	mov	r4,r2
    3900:	1823883a 	mov	r17,r3
    3904:	1021883a 	mov	r16,r2
    3908:	00091d00 	call	91d0 <__fixdfsi>
    390c:	1009883a 	mov	r4,r2
    3910:	102b883a 	mov	r21,r2
    3914:	00090d80 	call	90d8 <__floatsidf>
    3918:	880b883a 	mov	r5,r17
    391c:	8009883a 	mov	r4,r16
    3920:	180f883a 	mov	r7,r3
    3924:	100d883a 	mov	r6,r2
    3928:	00087200 	call	8720 <__subdf3>
    392c:	1021883a 	mov	r16,r2
    3930:	d9001b17 	ldw	r4,108(sp)
    3934:	1823883a 	mov	r17,r3
    3938:	dc001415 	stw	r16,80(sp)
    393c:	ad400c04 	addi	r21,r21,48
    3940:	dc401515 	stw	r17,84(sp)
    3944:	d8801a17 	ldw	r2,104(sp)
    3948:	e5400005 	stb	r21,0(fp)
    394c:	202f883a 	mov	r23,r4
    3950:	d9c01b17 	ldw	r7,108(sp)
    3954:	d9001417 	ldw	r4,80(sp)
    3958:	880b883a 	mov	r5,r17
    395c:	100d883a 	mov	r6,r2
    3960:	102d883a 	mov	r22,r2
    3964:	e7000044 	addi	fp,fp,1
    3968:	00090500 	call	9050 <__ltdf2>
    396c:	103fc30e 	bge	r2,zero,387c <_dtoa_r+0x1064>
    3970:	d9000417 	ldw	r4,16(sp)
    3974:	d9000d15 	stw	r4,52(sp)
    3978:	003d7106 	br	2f40 <_dtoa_r+0x728>
    397c:	d9801717 	ldw	r6,92(sp)
    3980:	00800084 	movi	r2,2
    3984:	11bde60e 	bge	r2,r6,3120 <_dtoa_r+0x908>
    3988:	203cfb1e 	bne	r4,zero,2d78 <_dtoa_r+0x560>
    398c:	d9001617 	ldw	r4,88(sp)
    3990:	900b883a 	mov	r5,r18
    3994:	01800144 	movi	r6,5
    3998:	000f883a 	mov	r7,zero
    399c:	00066600 	call	6660 <__multadd>
    39a0:	d9000717 	ldw	r4,28(sp)
    39a4:	100b883a 	mov	r5,r2
    39a8:	1025883a 	mov	r18,r2
    39ac:	0005b080 	call	5b08 <__mcmp>
    39b0:	00bcf10e 	bge	zero,r2,2d78 <_dtoa_r+0x560>
    39b4:	d8c00d17 	ldw	r3,52(sp)
    39b8:	d9000517 	ldw	r4,20(sp)
    39bc:	d8000615 	stw	zero,24(sp)
    39c0:	18c00044 	addi	r3,r3,1
    39c4:	d8c00d15 	stw	r3,52(sp)
    39c8:	00800c44 	movi	r2,49
    39cc:	27000044 	addi	fp,r4,1
    39d0:	20800005 	stb	r2,0(r4)
    39d4:	003e8906 	br	33fc <_dtoa_r+0xbe4>
    39d8:	d8c00517 	ldw	r3,20(sp)
    39dc:	003bc206 	br	28e8 <_dtoa_r+0xd0>
    39e0:	01800074 	movhi	r6,1
    39e4:	31b20304 	addi	r6,r6,-14324
    39e8:	30c00917 	ldw	r3,36(r6)
    39ec:	30800817 	ldw	r2,32(r6)
    39f0:	d9001217 	ldw	r4,72(sp)
    39f4:	d9401317 	ldw	r5,76(sp)
    39f8:	180f883a 	mov	r7,r3
    39fc:	100d883a 	mov	r6,r2
    3a00:	0008bd80 	call	8bd8 <__divdf3>
    3a04:	948003cc 	andi	r18,r18,15
    3a08:	058000c4 	movi	r22,3
    3a0c:	1029883a 	mov	r20,r2
    3a10:	182b883a 	mov	r21,r3
    3a14:	003c8906 	br	2c3c <_dtoa_r+0x424>
    3a18:	d9001017 	ldw	r4,64(sp)
    3a1c:	d9800917 	ldw	r6,36(sp)
    3a20:	0025883a 	mov	r18,zero
    3a24:	1105c83a 	sub	r2,r2,r4
    3a28:	2089883a 	add	r4,r4,r2
    3a2c:	308d883a 	add	r6,r6,r2
    3a30:	d9001015 	stw	r4,64(sp)
    3a34:	d9800915 	stw	r6,36(sp)
    3a38:	003e3206 	br	3304 <_dtoa_r+0xaec>
    3a3c:	28800044 	addi	r2,r5,1
    3a40:	27000044 	addi	fp,r4,1
    3a44:	20800005 	stb	r2,0(r4)
    3a48:	003e6c06 	br	33fc <_dtoa_r+0xbe4>
    3a4c:	d8800f17 	ldw	r2,60(sp)
    3a50:	00bce016 	blt	zero,r2,2dd4 <_dtoa_r+0x5bc>
    3a54:	d9800f17 	ldw	r6,60(sp)
    3a58:	303cc51e 	bne	r6,zero,2d70 <_dtoa_r+0x558>
    3a5c:	0005883a 	mov	r2,zero
    3a60:	00d00534 	movhi	r3,16404
    3a64:	980b883a 	mov	r5,r19
    3a68:	180f883a 	mov	r7,r3
    3a6c:	9009883a 	mov	r4,r18
    3a70:	100d883a 	mov	r6,r2
    3a74:	00088140 	call	8814 <__muldf3>
    3a78:	180b883a 	mov	r5,r3
    3a7c:	a80f883a 	mov	r7,r21
    3a80:	1009883a 	mov	r4,r2
    3a84:	a00d883a 	mov	r6,r20
    3a88:	0008fc80 	call	8fc8 <__gedf2>
    3a8c:	103cb80e 	bge	r2,zero,2d70 <_dtoa_r+0x558>
    3a90:	0027883a 	mov	r19,zero
    3a94:	0025883a 	mov	r18,zero
    3a98:	003fc606 	br	39b4 <_dtoa_r+0x119c>
    3a9c:	99400117 	ldw	r5,4(r19)
    3aa0:	d9001617 	ldw	r4,88(sp)
    3aa4:	0005f2c0 	call	5f2c <_Balloc>
    3aa8:	99800417 	ldw	r6,16(r19)
    3aac:	11000304 	addi	r4,r2,12
    3ab0:	99400304 	addi	r5,r19,12
    3ab4:	318d883a 	add	r6,r6,r6
    3ab8:	318d883a 	add	r6,r6,r6
    3abc:	31800204 	addi	r6,r6,8
    3ac0:	1023883a 	mov	r17,r2
    3ac4:	00057940 	call	5794 <memcpy>
    3ac8:	d9001617 	ldw	r4,88(sp)
    3acc:	880b883a 	mov	r5,r17
    3ad0:	01800044 	movi	r6,1
    3ad4:	00062f00 	call	62f0 <__lshift>
    3ad8:	100b883a 	mov	r5,r2
    3adc:	003d9c06 	br	3150 <_dtoa_r+0x938>
    3ae0:	00800e44 	movi	r2,57
    3ae4:	b8807026 	beq	r23,r2,3ca8 <_dtoa_r+0x1490>
    3ae8:	b8800044 	addi	r2,r23,1
    3aec:	b7000044 	addi	fp,r22,1
    3af0:	b0800005 	stb	r2,0(r22)
    3af4:	003e4106 	br	33fc <_dtoa_r+0xbe4>
    3af8:	d8800317 	ldw	r2,12(sp)
    3afc:	01800074 	movhi	r6,1
    3b00:	31b1d104 	addi	r6,r6,-14524
    3b04:	b009883a 	mov	r4,r22
    3b08:	100e90fa 	slli	r7,r2,3
    3b0c:	b80b883a 	mov	r5,r23
    3b10:	398f883a 	add	r7,r7,r6
    3b14:	38bffe17 	ldw	r2,-8(r7)
    3b18:	d9800517 	ldw	r6,20(sp)
    3b1c:	38ffff17 	ldw	r3,-4(r7)
    3b20:	37000044 	addi	fp,r6,1
    3b24:	180f883a 	mov	r7,r3
    3b28:	100d883a 	mov	r6,r2
    3b2c:	00088140 	call	8814 <__muldf3>
    3b30:	a80b883a 	mov	r5,r21
    3b34:	a009883a 	mov	r4,r20
    3b38:	182f883a 	mov	r23,r3
    3b3c:	102d883a 	mov	r22,r2
    3b40:	00091d00 	call	91d0 <__fixdfsi>
    3b44:	1009883a 	mov	r4,r2
    3b48:	1027883a 	mov	r19,r2
    3b4c:	00090d80 	call	90d8 <__floatsidf>
    3b50:	a80b883a 	mov	r5,r21
    3b54:	a009883a 	mov	r4,r20
    3b58:	180f883a 	mov	r7,r3
    3b5c:	100d883a 	mov	r6,r2
    3b60:	00087200 	call	8720 <__subdf3>
    3b64:	180b883a 	mov	r5,r3
    3b68:	d8c00517 	ldw	r3,20(sp)
    3b6c:	9cc00c04 	addi	r19,r19,48
    3b70:	1009883a 	mov	r4,r2
    3b74:	1cc00005 	stb	r19,0(r3)
    3b78:	2021883a 	mov	r16,r4
    3b7c:	d9000317 	ldw	r4,12(sp)
    3b80:	00800044 	movi	r2,1
    3b84:	2823883a 	mov	r17,r5
    3b88:	20802226 	beq	r4,r2,3c14 <_dtoa_r+0x13fc>
    3b8c:	1029883a 	mov	r20,r2
    3b90:	0005883a 	mov	r2,zero
    3b94:	00d00934 	movhi	r3,16420
    3b98:	180f883a 	mov	r7,r3
    3b9c:	100d883a 	mov	r6,r2
    3ba0:	880b883a 	mov	r5,r17
    3ba4:	8009883a 	mov	r4,r16
    3ba8:	00088140 	call	8814 <__muldf3>
    3bac:	180b883a 	mov	r5,r3
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	1823883a 	mov	r17,r3
    3bb8:	1021883a 	mov	r16,r2
    3bbc:	00091d00 	call	91d0 <__fixdfsi>
    3bc0:	1009883a 	mov	r4,r2
    3bc4:	102b883a 	mov	r21,r2
    3bc8:	00090d80 	call	90d8 <__floatsidf>
    3bcc:	880b883a 	mov	r5,r17
    3bd0:	8009883a 	mov	r4,r16
    3bd4:	180f883a 	mov	r7,r3
    3bd8:	100d883a 	mov	r6,r2
    3bdc:	00087200 	call	8720 <__subdf3>
    3be0:	180b883a 	mov	r5,r3
    3be4:	d8c00517 	ldw	r3,20(sp)
    3be8:	1009883a 	mov	r4,r2
    3bec:	ad400c04 	addi	r21,r21,48
    3bf0:	1d05883a 	add	r2,r3,r20
    3bf4:	15400005 	stb	r21,0(r2)
    3bf8:	2021883a 	mov	r16,r4
    3bfc:	d9000317 	ldw	r4,12(sp)
    3c00:	a5000044 	addi	r20,r20,1
    3c04:	2823883a 	mov	r17,r5
    3c08:	a13fe11e 	bne	r20,r4,3b90 <_dtoa_r+0x1378>
    3c0c:	e505883a 	add	r2,fp,r20
    3c10:	173fffc4 	addi	fp,r2,-1
    3c14:	0025883a 	mov	r18,zero
    3c18:	04cff834 	movhi	r19,16352
    3c1c:	b009883a 	mov	r4,r22
    3c20:	b80b883a 	mov	r5,r23
    3c24:	900d883a 	mov	r6,r18
    3c28:	980f883a 	mov	r7,r19
    3c2c:	00087a00 	call	87a0 <__adddf3>
    3c30:	180b883a 	mov	r5,r3
    3c34:	1009883a 	mov	r4,r2
    3c38:	800d883a 	mov	r6,r16
    3c3c:	880f883a 	mov	r7,r17
    3c40:	00090500 	call	9050 <__ltdf2>
    3c44:	103cab16 	blt	r2,zero,2ef4 <_dtoa_r+0x6dc>
    3c48:	0009883a 	mov	r4,zero
    3c4c:	980b883a 	mov	r5,r19
    3c50:	b80f883a 	mov	r7,r23
    3c54:	b00d883a 	mov	r6,r22
    3c58:	00087200 	call	8720 <__subdf3>
    3c5c:	180b883a 	mov	r5,r3
    3c60:	880f883a 	mov	r7,r17
    3c64:	1009883a 	mov	r4,r2
    3c68:	800d883a 	mov	r6,r16
    3c6c:	0008f400 	call	8f40 <__gtdf2>
    3c70:	00bc470e 	bge	zero,r2,2d90 <_dtoa_r+0x578>
    3c74:	00c00c04 	movi	r3,48
    3c78:	e73fffc4 	addi	fp,fp,-1
    3c7c:	e0800007 	ldb	r2,0(fp)
    3c80:	10fffd26 	beq	r2,r3,3c78 <_dtoa_r+0x1460>
    3c84:	d9800417 	ldw	r6,16(sp)
    3c88:	e7000044 	addi	fp,fp,1
    3c8c:	d9800d15 	stw	r6,52(sp)
    3c90:	003cab06 	br	2f40 <_dtoa_r+0x728>
    3c94:	d8c00f17 	ldw	r3,60(sp)
    3c98:	d9001117 	ldw	r4,68(sp)
    3c9c:	20e1c83a 	sub	r16,r4,r3
    3ca0:	0007883a 	mov	r3,zero
    3ca4:	003d9b06 	br	3314 <_dtoa_r+0xafc>
    3ca8:	00800e44 	movi	r2,57
    3cac:	b0800005 	stb	r2,0(r22)
    3cb0:	b5800044 	addi	r22,r22,1
    3cb4:	003dc106 	br	33bc <_dtoa_r+0xba4>
    3cb8:	05800084 	movi	r22,2
    3cbc:	003bf706 	br	2c9c <_dtoa_r+0x484>
    3cc0:	d9000f17 	ldw	r4,60(sp)
    3cc4:	013c000e 	bge	zero,r4,2cc8 <_dtoa_r+0x4b0>
    3cc8:	d9800e17 	ldw	r6,56(sp)
    3ccc:	01bc300e 	bge	zero,r6,2d90 <_dtoa_r+0x578>
    3cd0:	0005883a 	mov	r2,zero
    3cd4:	00d00934 	movhi	r3,16420
    3cd8:	a80b883a 	mov	r5,r21
    3cdc:	180f883a 	mov	r7,r3
    3ce0:	a009883a 	mov	r4,r20
    3ce4:	100d883a 	mov	r6,r2
    3ce8:	00088140 	call	8814 <__muldf3>
    3cec:	b1000044 	addi	r4,r22,1
    3cf0:	1021883a 	mov	r16,r2
    3cf4:	1823883a 	mov	r17,r3
    3cf8:	00090d80 	call	90d8 <__floatsidf>
    3cfc:	880b883a 	mov	r5,r17
    3d00:	8009883a 	mov	r4,r16
    3d04:	180f883a 	mov	r7,r3
    3d08:	100d883a 	mov	r6,r2
    3d0c:	00088140 	call	8814 <__muldf3>
    3d10:	0011883a 	mov	r8,zero
    3d14:	02500734 	movhi	r9,16412
    3d18:	180b883a 	mov	r5,r3
    3d1c:	480f883a 	mov	r7,r9
    3d20:	1009883a 	mov	r4,r2
    3d24:	400d883a 	mov	r6,r8
    3d28:	00087a00 	call	87a0 <__adddf3>
    3d2c:	102d883a 	mov	r22,r2
    3d30:	00bf3034 	movhi	r2,64704
    3d34:	10ef883a 	add	r23,r2,r3
    3d38:	d8800d17 	ldw	r2,52(sp)
    3d3c:	d8c00e17 	ldw	r3,56(sp)
    3d40:	8029883a 	mov	r20,r16
    3d44:	10bfffc4 	addi	r2,r2,-1
    3d48:	882b883a 	mov	r21,r17
    3d4c:	d8800415 	stw	r2,16(sp)
    3d50:	d8c00315 	stw	r3,12(sp)
    3d54:	003e8306 	br	3764 <_dtoa_r+0xf4c>
    3d58:	d8800117 	ldw	r2,4(sp)
    3d5c:	dc001117 	ldw	r16,68(sp)
    3d60:	dc801017 	ldw	r18,64(sp)
    3d64:	00c00d84 	movi	r3,54
    3d68:	1887c83a 	sub	r3,r3,r2
    3d6c:	003d6906 	br	3314 <_dtoa_r+0xafc>
    3d70:	01800044 	movi	r6,1
    3d74:	3021883a 	mov	r16,r6
    3d78:	d9800f15 	stw	r6,60(sp)
    3d7c:	d9802615 	stw	r6,152(sp)
    3d80:	d9800e15 	stw	r6,56(sp)
    3d84:	003b9306 	br	2bd4 <_dtoa_r+0x3bc>
    3d88:	b021883a 	mov	r16,r22
    3d8c:	dd800f15 	stw	r22,60(sp)
    3d90:	003b9006 	br	2bd4 <_dtoa_r+0x3bc>
    3d94:	103e221e 	bne	r2,zero,3620 <_dtoa_r+0xe08>
    3d98:	b880004c 	andi	r2,r23,1
    3d9c:	1005003a 	cmpeq	r2,r2,zero
    3da0:	103e1f1e 	bne	r2,zero,3620 <_dtoa_r+0xe08>
    3da4:	003e1b06 	br	3614 <_dtoa_r+0xdfc>
    3da8:	d9001617 	ldw	r4,88(sp)
    3dac:	980b883a 	mov	r5,r19
    3db0:	01800284 	movi	r6,10
    3db4:	000f883a 	mov	r7,zero
    3db8:	00066600 	call	6660 <__multadd>
    3dbc:	d8c00e17 	ldw	r3,56(sp)
    3dc0:	1027883a 	mov	r19,r2
    3dc4:	d8c00f15 	stw	r3,60(sp)
    3dc8:	003cd306 	br	3118 <_dtoa_r+0x900>

00003dcc <_fflush_r>:
    3dcc:	defffb04 	addi	sp,sp,-20
    3dd0:	dcc00315 	stw	r19,12(sp)
    3dd4:	dc800215 	stw	r18,8(sp)
    3dd8:	dfc00415 	stw	ra,16(sp)
    3ddc:	dc400115 	stw	r17,4(sp)
    3de0:	dc000015 	stw	r16,0(sp)
    3de4:	2027883a 	mov	r19,r4
    3de8:	2825883a 	mov	r18,r5
    3dec:	20000226 	beq	r4,zero,3df8 <_fflush_r+0x2c>
    3df0:	20800e17 	ldw	r2,56(r4)
    3df4:	10005626 	beq	r2,zero,3f50 <_fflush_r+0x184>
    3df8:	9100030b 	ldhu	r4,12(r18)
    3dfc:	20ffffcc 	andi	r3,r4,65535
    3e00:	18e0001c 	xori	r3,r3,32768
    3e04:	18e00004 	addi	r3,r3,-32768
    3e08:	1880020c 	andi	r2,r3,8
    3e0c:	1000261e 	bne	r2,zero,3ea8 <_fflush_r+0xdc>
    3e10:	90c00117 	ldw	r3,4(r18)
    3e14:	20820014 	ori	r2,r4,2048
    3e18:	9080030d 	sth	r2,12(r18)
    3e1c:	1009883a 	mov	r4,r2
    3e20:	00c0400e 	bge	zero,r3,3f24 <_fflush_r+0x158>
    3e24:	92000a17 	ldw	r8,40(r18)
    3e28:	40004026 	beq	r8,zero,3f2c <_fflush_r+0x160>
    3e2c:	2084000c 	andi	r2,r4,4096
    3e30:	10005326 	beq	r2,zero,3f80 <_fflush_r+0x1b4>
    3e34:	94001417 	ldw	r16,80(r18)
    3e38:	9080030b 	ldhu	r2,12(r18)
    3e3c:	1080010c 	andi	r2,r2,4
    3e40:	1000481e 	bne	r2,zero,3f64 <_fflush_r+0x198>
    3e44:	91400717 	ldw	r5,28(r18)
    3e48:	9809883a 	mov	r4,r19
    3e4c:	800d883a 	mov	r6,r16
    3e50:	000f883a 	mov	r7,zero
    3e54:	403ee83a 	callr	r8
    3e58:	8080261e 	bne	r16,r2,3ef4 <_fflush_r+0x128>
    3e5c:	9080030b 	ldhu	r2,12(r18)
    3e60:	91000417 	ldw	r4,16(r18)
    3e64:	90000115 	stw	zero,4(r18)
    3e68:	10bdffcc 	andi	r2,r2,63487
    3e6c:	10ffffcc 	andi	r3,r2,65535
    3e70:	18c4000c 	andi	r3,r3,4096
    3e74:	9080030d 	sth	r2,12(r18)
    3e78:	91000015 	stw	r4,0(r18)
    3e7c:	18002b26 	beq	r3,zero,3f2c <_fflush_r+0x160>
    3e80:	0007883a 	mov	r3,zero
    3e84:	1805883a 	mov	r2,r3
    3e88:	94001415 	stw	r16,80(r18)
    3e8c:	dfc00417 	ldw	ra,16(sp)
    3e90:	dcc00317 	ldw	r19,12(sp)
    3e94:	dc800217 	ldw	r18,8(sp)
    3e98:	dc400117 	ldw	r17,4(sp)
    3e9c:	dc000017 	ldw	r16,0(sp)
    3ea0:	dec00504 	addi	sp,sp,20
    3ea4:	f800283a 	ret
    3ea8:	94400417 	ldw	r17,16(r18)
    3eac:	88001f26 	beq	r17,zero,3f2c <_fflush_r+0x160>
    3eb0:	90800017 	ldw	r2,0(r18)
    3eb4:	18c000cc 	andi	r3,r3,3
    3eb8:	94400015 	stw	r17,0(r18)
    3ebc:	1461c83a 	sub	r16,r2,r17
    3ec0:	18002526 	beq	r3,zero,3f58 <_fflush_r+0x18c>
    3ec4:	0005883a 	mov	r2,zero
    3ec8:	90800215 	stw	r2,8(r18)
    3ecc:	0400170e 	bge	zero,r16,3f2c <_fflush_r+0x160>
    3ed0:	90c00917 	ldw	r3,36(r18)
    3ed4:	91400717 	ldw	r5,28(r18)
    3ed8:	880d883a 	mov	r6,r17
    3edc:	800f883a 	mov	r7,r16
    3ee0:	9809883a 	mov	r4,r19
    3ee4:	183ee83a 	callr	r3
    3ee8:	88a3883a 	add	r17,r17,r2
    3eec:	80a1c83a 	sub	r16,r16,r2
    3ef0:	00bff616 	blt	zero,r2,3ecc <_fflush_r+0x100>
    3ef4:	9080030b 	ldhu	r2,12(r18)
    3ef8:	00ffffc4 	movi	r3,-1
    3efc:	10801014 	ori	r2,r2,64
    3f00:	9080030d 	sth	r2,12(r18)
    3f04:	1805883a 	mov	r2,r3
    3f08:	dfc00417 	ldw	ra,16(sp)
    3f0c:	dcc00317 	ldw	r19,12(sp)
    3f10:	dc800217 	ldw	r18,8(sp)
    3f14:	dc400117 	ldw	r17,4(sp)
    3f18:	dc000017 	ldw	r16,0(sp)
    3f1c:	dec00504 	addi	sp,sp,20
    3f20:	f800283a 	ret
    3f24:	90800f17 	ldw	r2,60(r18)
    3f28:	00bfbe16 	blt	zero,r2,3e24 <_fflush_r+0x58>
    3f2c:	0007883a 	mov	r3,zero
    3f30:	1805883a 	mov	r2,r3
    3f34:	dfc00417 	ldw	ra,16(sp)
    3f38:	dcc00317 	ldw	r19,12(sp)
    3f3c:	dc800217 	ldw	r18,8(sp)
    3f40:	dc400117 	ldw	r17,4(sp)
    3f44:	dc000017 	ldw	r16,0(sp)
    3f48:	dec00504 	addi	sp,sp,20
    3f4c:	f800283a 	ret
    3f50:	00040640 	call	4064 <__sinit>
    3f54:	003fa806 	br	3df8 <_fflush_r+0x2c>
    3f58:	90800517 	ldw	r2,20(r18)
    3f5c:	90800215 	stw	r2,8(r18)
    3f60:	003fda06 	br	3ecc <_fflush_r+0x100>
    3f64:	90800117 	ldw	r2,4(r18)
    3f68:	90c00c17 	ldw	r3,48(r18)
    3f6c:	80a1c83a 	sub	r16,r16,r2
    3f70:	183fb426 	beq	r3,zero,3e44 <_fflush_r+0x78>
    3f74:	90800f17 	ldw	r2,60(r18)
    3f78:	80a1c83a 	sub	r16,r16,r2
    3f7c:	003fb106 	br	3e44 <_fflush_r+0x78>
    3f80:	91400717 	ldw	r5,28(r18)
    3f84:	9809883a 	mov	r4,r19
    3f88:	000d883a 	mov	r6,zero
    3f8c:	01c00044 	movi	r7,1
    3f90:	403ee83a 	callr	r8
    3f94:	1021883a 	mov	r16,r2
    3f98:	00bfffc4 	movi	r2,-1
    3f9c:	80800226 	beq	r16,r2,3fa8 <_fflush_r+0x1dc>
    3fa0:	92000a17 	ldw	r8,40(r18)
    3fa4:	003fa406 	br	3e38 <_fflush_r+0x6c>
    3fa8:	98c00017 	ldw	r3,0(r19)
    3fac:	00800744 	movi	r2,29
    3fb0:	18bfde26 	beq	r3,r2,3f2c <_fflush_r+0x160>
    3fb4:	9080030b 	ldhu	r2,12(r18)
    3fb8:	8007883a 	mov	r3,r16
    3fbc:	10801014 	ori	r2,r2,64
    3fc0:	9080030d 	sth	r2,12(r18)
    3fc4:	003fcf06 	br	3f04 <_fflush_r+0x138>

00003fc8 <fflush>:
    3fc8:	01400034 	movhi	r5,0
    3fcc:	294f7304 	addi	r5,r5,15820
    3fd0:	2007883a 	mov	r3,r4
    3fd4:	20000526 	beq	r4,zero,3fec <fflush+0x24>
    3fd8:	00800074 	movhi	r2,1
    3fdc:	10b91e04 	addi	r2,r2,-7048
    3fe0:	11000017 	ldw	r4,0(r2)
    3fe4:	180b883a 	mov	r5,r3
    3fe8:	0003dcc1 	jmpi	3dcc <_fflush_r>
    3fec:	00800074 	movhi	r2,1
    3ff0:	10b91f04 	addi	r2,r2,-7044
    3ff4:	11000017 	ldw	r4,0(r2)
    3ff8:	0004b981 	jmpi	4b98 <_fwalk_reent>

00003ffc <std>:
    3ffc:	00800034 	movhi	r2,0
    4000:	109c1d04 	addi	r2,r2,28788
    4004:	20800b15 	stw	r2,44(r4)
    4008:	00800034 	movhi	r2,0
    400c:	109c5804 	addi	r2,r2,29024
    4010:	20800815 	stw	r2,32(r4)
    4014:	00c00034 	movhi	r3,0
    4018:	18dc3904 	addi	r3,r3,28900
    401c:	00800034 	movhi	r2,0
    4020:	109c1f04 	addi	r2,r2,28796
    4024:	2140030d 	sth	r5,12(r4)
    4028:	2180038d 	sth	r6,14(r4)
    402c:	20c00915 	stw	r3,36(r4)
    4030:	20800a15 	stw	r2,40(r4)
    4034:	20000015 	stw	zero,0(r4)
    4038:	20000115 	stw	zero,4(r4)
    403c:	20000215 	stw	zero,8(r4)
    4040:	20000415 	stw	zero,16(r4)
    4044:	20000515 	stw	zero,20(r4)
    4048:	20000615 	stw	zero,24(r4)
    404c:	21000715 	stw	r4,28(r4)
    4050:	f800283a 	ret

00004054 <__sfp_lock_acquire>:
    4054:	f800283a 	ret

00004058 <__sfp_lock_release>:
    4058:	f800283a 	ret

0000405c <__sinit_lock_acquire>:
    405c:	f800283a 	ret

00004060 <__sinit_lock_release>:
    4060:	f800283a 	ret

00004064 <__sinit>:
    4064:	20800e17 	ldw	r2,56(r4)
    4068:	defffd04 	addi	sp,sp,-12
    406c:	dc400115 	stw	r17,4(sp)
    4070:	dc000015 	stw	r16,0(sp)
    4074:	dfc00215 	stw	ra,8(sp)
    4078:	04400044 	movi	r17,1
    407c:	01400104 	movi	r5,4
    4080:	000d883a 	mov	r6,zero
    4084:	2021883a 	mov	r16,r4
    4088:	2200bb04 	addi	r8,r4,748
    408c:	200f883a 	mov	r7,r4
    4090:	10000526 	beq	r2,zero,40a8 <__sinit+0x44>
    4094:	dfc00217 	ldw	ra,8(sp)
    4098:	dc400117 	ldw	r17,4(sp)
    409c:	dc000017 	ldw	r16,0(sp)
    40a0:	dec00304 	addi	sp,sp,12
    40a4:	f800283a 	ret
    40a8:	21000117 	ldw	r4,4(r4)
    40ac:	00800034 	movhi	r2,0
    40b0:	10905204 	addi	r2,r2,16712
    40b4:	00c000c4 	movi	r3,3
    40b8:	80800f15 	stw	r2,60(r16)
    40bc:	80c0b915 	stw	r3,740(r16)
    40c0:	8200ba15 	stw	r8,744(r16)
    40c4:	84400e15 	stw	r17,56(r16)
    40c8:	8000b815 	stw	zero,736(r16)
    40cc:	0003ffc0 	call	3ffc <std>
    40d0:	81000217 	ldw	r4,8(r16)
    40d4:	880d883a 	mov	r6,r17
    40d8:	800f883a 	mov	r7,r16
    40dc:	01400284 	movi	r5,10
    40e0:	0003ffc0 	call	3ffc <std>
    40e4:	81000317 	ldw	r4,12(r16)
    40e8:	800f883a 	mov	r7,r16
    40ec:	01400484 	movi	r5,18
    40f0:	01800084 	movi	r6,2
    40f4:	dfc00217 	ldw	ra,8(sp)
    40f8:	dc400117 	ldw	r17,4(sp)
    40fc:	dc000017 	ldw	r16,0(sp)
    4100:	dec00304 	addi	sp,sp,12
    4104:	0003ffc1 	jmpi	3ffc <std>

00004108 <__fp_lock>:
    4108:	0005883a 	mov	r2,zero
    410c:	f800283a 	ret

00004110 <__fp_unlock>:
    4110:	0005883a 	mov	r2,zero
    4114:	f800283a 	ret

00004118 <__fp_unlock_all>:
    4118:	00800074 	movhi	r2,1
    411c:	10b91e04 	addi	r2,r2,-7048
    4120:	11000017 	ldw	r4,0(r2)
    4124:	01400034 	movhi	r5,0
    4128:	29504404 	addi	r5,r5,16656
    412c:	0004c601 	jmpi	4c60 <_fwalk>

00004130 <__fp_lock_all>:
    4130:	00800074 	movhi	r2,1
    4134:	10b91e04 	addi	r2,r2,-7048
    4138:	11000017 	ldw	r4,0(r2)
    413c:	01400034 	movhi	r5,0
    4140:	29504204 	addi	r5,r5,16648
    4144:	0004c601 	jmpi	4c60 <_fwalk>

00004148 <_cleanup_r>:
    4148:	01400034 	movhi	r5,0
    414c:	295d6704 	addi	r5,r5,30108
    4150:	0004c601 	jmpi	4c60 <_fwalk>

00004154 <_cleanup>:
    4154:	00800074 	movhi	r2,1
    4158:	10b91f04 	addi	r2,r2,-7044
    415c:	11000017 	ldw	r4,0(r2)
    4160:	00041481 	jmpi	4148 <_cleanup_r>

00004164 <__sfmoreglue>:
    4164:	defffc04 	addi	sp,sp,-16
    4168:	dc400115 	stw	r17,4(sp)
    416c:	2c401724 	muli	r17,r5,92
    4170:	dc800215 	stw	r18,8(sp)
    4174:	2825883a 	mov	r18,r5
    4178:	89400304 	addi	r5,r17,12
    417c:	dc000015 	stw	r16,0(sp)
    4180:	dfc00315 	stw	ra,12(sp)
    4184:	0004f700 	call	4f70 <_malloc_r>
    4188:	0021883a 	mov	r16,zero
    418c:	880d883a 	mov	r6,r17
    4190:	000b883a 	mov	r5,zero
    4194:	10000626 	beq	r2,zero,41b0 <__sfmoreglue+0x4c>
    4198:	11000304 	addi	r4,r2,12
    419c:	14800115 	stw	r18,4(r2)
    41a0:	10000015 	stw	zero,0(r2)
    41a4:	11000215 	stw	r4,8(r2)
    41a8:	1021883a 	mov	r16,r2
    41ac:	00059140 	call	5914 <memset>
    41b0:	8005883a 	mov	r2,r16
    41b4:	dfc00317 	ldw	ra,12(sp)
    41b8:	dc800217 	ldw	r18,8(sp)
    41bc:	dc400117 	ldw	r17,4(sp)
    41c0:	dc000017 	ldw	r16,0(sp)
    41c4:	dec00404 	addi	sp,sp,16
    41c8:	f800283a 	ret

000041cc <__sfp>:
    41cc:	defffd04 	addi	sp,sp,-12
    41d0:	00800074 	movhi	r2,1
    41d4:	10b91f04 	addi	r2,r2,-7044
    41d8:	dc000015 	stw	r16,0(sp)
    41dc:	14000017 	ldw	r16,0(r2)
    41e0:	dc400115 	stw	r17,4(sp)
    41e4:	dfc00215 	stw	ra,8(sp)
    41e8:	80800e17 	ldw	r2,56(r16)
    41ec:	2023883a 	mov	r17,r4
    41f0:	10002626 	beq	r2,zero,428c <__sfp+0xc0>
    41f4:	8400b804 	addi	r16,r16,736
    41f8:	80800117 	ldw	r2,4(r16)
    41fc:	81000217 	ldw	r4,8(r16)
    4200:	10ffffc4 	addi	r3,r2,-1
    4204:	18000916 	blt	r3,zero,422c <__sfp+0x60>
    4208:	2080030f 	ldh	r2,12(r4)
    420c:	10000b26 	beq	r2,zero,423c <__sfp+0x70>
    4210:	017fffc4 	movi	r5,-1
    4214:	00000206 	br	4220 <__sfp+0x54>
    4218:	2080030f 	ldh	r2,12(r4)
    421c:	10000726 	beq	r2,zero,423c <__sfp+0x70>
    4220:	18ffffc4 	addi	r3,r3,-1
    4224:	21001704 	addi	r4,r4,92
    4228:	197ffb1e 	bne	r3,r5,4218 <__sfp+0x4c>
    422c:	80800017 	ldw	r2,0(r16)
    4230:	10001926 	beq	r2,zero,4298 <__sfp+0xcc>
    4234:	1021883a 	mov	r16,r2
    4238:	003fef06 	br	41f8 <__sfp+0x2c>
    423c:	00bfffc4 	movi	r2,-1
    4240:	00c00044 	movi	r3,1
    4244:	2080038d 	sth	r2,14(r4)
    4248:	20c0030d 	sth	r3,12(r4)
    424c:	20000015 	stw	zero,0(r4)
    4250:	20000215 	stw	zero,8(r4)
    4254:	20000115 	stw	zero,4(r4)
    4258:	20000415 	stw	zero,16(r4)
    425c:	20000515 	stw	zero,20(r4)
    4260:	20000615 	stw	zero,24(r4)
    4264:	20000c15 	stw	zero,48(r4)
    4268:	20000d15 	stw	zero,52(r4)
    426c:	20001115 	stw	zero,68(r4)
    4270:	20001215 	stw	zero,72(r4)
    4274:	2005883a 	mov	r2,r4
    4278:	dfc00217 	ldw	ra,8(sp)
    427c:	dc400117 	ldw	r17,4(sp)
    4280:	dc000017 	ldw	r16,0(sp)
    4284:	dec00304 	addi	sp,sp,12
    4288:	f800283a 	ret
    428c:	8009883a 	mov	r4,r16
    4290:	00040640 	call	4064 <__sinit>
    4294:	003fd706 	br	41f4 <__sfp+0x28>
    4298:	8809883a 	mov	r4,r17
    429c:	01400104 	movi	r5,4
    42a0:	00041640 	call	4164 <__sfmoreglue>
    42a4:	80800015 	stw	r2,0(r16)
    42a8:	103fe21e 	bne	r2,zero,4234 <__sfp+0x68>
    42ac:	00800304 	movi	r2,12
    42b0:	0009883a 	mov	r4,zero
    42b4:	88800015 	stw	r2,0(r17)
    42b8:	003fee06 	br	4274 <__sfp+0xa8>

000042bc <_malloc_trim_r>:
    42bc:	defffb04 	addi	sp,sp,-20
    42c0:	dcc00315 	stw	r19,12(sp)
    42c4:	04c00074 	movhi	r19,1
    42c8:	9cf37904 	addi	r19,r19,-12828
    42cc:	dc800215 	stw	r18,8(sp)
    42d0:	dc400115 	stw	r17,4(sp)
    42d4:	dc000015 	stw	r16,0(sp)
    42d8:	2823883a 	mov	r17,r5
    42dc:	2025883a 	mov	r18,r4
    42e0:	dfc00415 	stw	ra,16(sp)
    42e4:	000a2380 	call	a238 <__malloc_lock>
    42e8:	98800217 	ldw	r2,8(r19)
    42ec:	9009883a 	mov	r4,r18
    42f0:	000b883a 	mov	r5,zero
    42f4:	10c00117 	ldw	r3,4(r2)
    42f8:	00bfff04 	movi	r2,-4
    42fc:	18a0703a 	and	r16,r3,r2
    4300:	8463c83a 	sub	r17,r16,r17
    4304:	8c43fbc4 	addi	r17,r17,4079
    4308:	8822d33a 	srli	r17,r17,12
    430c:	0083ffc4 	movi	r2,4095
    4310:	8c7fffc4 	addi	r17,r17,-1
    4314:	8822933a 	slli	r17,r17,12
    4318:	1440060e 	bge	r2,r17,4334 <_malloc_trim_r+0x78>
    431c:	00070040 	call	7004 <_sbrk_r>
    4320:	98c00217 	ldw	r3,8(r19)
    4324:	9009883a 	mov	r4,r18
    4328:	044bc83a 	sub	r5,zero,r17
    432c:	80c7883a 	add	r3,r16,r3
    4330:	10c00926 	beq	r2,r3,4358 <_malloc_trim_r+0x9c>
    4334:	000a2580 	call	a258 <__malloc_unlock>
    4338:	0005883a 	mov	r2,zero
    433c:	dfc00417 	ldw	ra,16(sp)
    4340:	dcc00317 	ldw	r19,12(sp)
    4344:	dc800217 	ldw	r18,8(sp)
    4348:	dc400117 	ldw	r17,4(sp)
    434c:	dc000017 	ldw	r16,0(sp)
    4350:	dec00504 	addi	sp,sp,20
    4354:	f800283a 	ret
    4358:	9009883a 	mov	r4,r18
    435c:	00070040 	call	7004 <_sbrk_r>
    4360:	844dc83a 	sub	r6,r16,r17
    4364:	00ffffc4 	movi	r3,-1
    4368:	9009883a 	mov	r4,r18
    436c:	000b883a 	mov	r5,zero
    4370:	01c00074 	movhi	r7,1
    4374:	39fff404 	addi	r7,r7,-48
    4378:	31800054 	ori	r6,r6,1
    437c:	10c00926 	beq	r2,r3,43a4 <_malloc_trim_r+0xe8>
    4380:	38800017 	ldw	r2,0(r7)
    4384:	98c00217 	ldw	r3,8(r19)
    4388:	9009883a 	mov	r4,r18
    438c:	1445c83a 	sub	r2,r2,r17
    4390:	38800015 	stw	r2,0(r7)
    4394:	19800115 	stw	r6,4(r3)
    4398:	000a2580 	call	a258 <__malloc_unlock>
    439c:	00800044 	movi	r2,1
    43a0:	003fe606 	br	433c <_malloc_trim_r+0x80>
    43a4:	00070040 	call	7004 <_sbrk_r>
    43a8:	99800217 	ldw	r6,8(r19)
    43ac:	100f883a 	mov	r7,r2
    43b0:	9009883a 	mov	r4,r18
    43b4:	1187c83a 	sub	r3,r2,r6
    43b8:	008003c4 	movi	r2,15
    43bc:	19400054 	ori	r5,r3,1
    43c0:	10ffdc0e 	bge	r2,r3,4334 <_malloc_trim_r+0x78>
    43c4:	00800074 	movhi	r2,1
    43c8:	10b92304 	addi	r2,r2,-7028
    43cc:	10c00017 	ldw	r3,0(r2)
    43d0:	00800074 	movhi	r2,1
    43d4:	10bff404 	addi	r2,r2,-48
    43d8:	31400115 	stw	r5,4(r6)
    43dc:	38c7c83a 	sub	r3,r7,r3
    43e0:	10c00015 	stw	r3,0(r2)
    43e4:	003fd306 	br	4334 <_malloc_trim_r+0x78>

000043e8 <_free_r>:
    43e8:	defffd04 	addi	sp,sp,-12
    43ec:	dc400115 	stw	r17,4(sp)
    43f0:	dc000015 	stw	r16,0(sp)
    43f4:	dfc00215 	stw	ra,8(sp)
    43f8:	2821883a 	mov	r16,r5
    43fc:	2023883a 	mov	r17,r4
    4400:	28005a26 	beq	r5,zero,456c <_free_r+0x184>
    4404:	000a2380 	call	a238 <__malloc_lock>
    4408:	823ffe04 	addi	r8,r16,-8
    440c:	41400117 	ldw	r5,4(r8)
    4410:	00bfff84 	movi	r2,-2
    4414:	02800074 	movhi	r10,1
    4418:	52b37904 	addi	r10,r10,-12828
    441c:	288e703a 	and	r7,r5,r2
    4420:	41cd883a 	add	r6,r8,r7
    4424:	30c00117 	ldw	r3,4(r6)
    4428:	51000217 	ldw	r4,8(r10)
    442c:	00bfff04 	movi	r2,-4
    4430:	1892703a 	and	r9,r3,r2
    4434:	5017883a 	mov	r11,r10
    4438:	31006726 	beq	r6,r4,45d8 <_free_r+0x1f0>
    443c:	2880004c 	andi	r2,r5,1
    4440:	1005003a 	cmpeq	r2,r2,zero
    4444:	32400115 	stw	r9,4(r6)
    4448:	10001a1e 	bne	r2,zero,44b4 <_free_r+0xcc>
    444c:	000b883a 	mov	r5,zero
    4450:	3247883a 	add	r3,r6,r9
    4454:	18800117 	ldw	r2,4(r3)
    4458:	1080004c 	andi	r2,r2,1
    445c:	1000231e 	bne	r2,zero,44ec <_free_r+0x104>
    4460:	280ac03a 	cmpne	r5,r5,zero
    4464:	3a4f883a 	add	r7,r7,r9
    4468:	2800451e 	bne	r5,zero,4580 <_free_r+0x198>
    446c:	31000217 	ldw	r4,8(r6)
    4470:	00800074 	movhi	r2,1
    4474:	10b37b04 	addi	r2,r2,-12820
    4478:	20807b26 	beq	r4,r2,4668 <_free_r+0x280>
    447c:	30800317 	ldw	r2,12(r6)
    4480:	3a07883a 	add	r3,r7,r8
    4484:	19c00015 	stw	r7,0(r3)
    4488:	11000215 	stw	r4,8(r2)
    448c:	20800315 	stw	r2,12(r4)
    4490:	38800054 	ori	r2,r7,1
    4494:	40800115 	stw	r2,4(r8)
    4498:	28001a26 	beq	r5,zero,4504 <_free_r+0x11c>
    449c:	8809883a 	mov	r4,r17
    44a0:	dfc00217 	ldw	ra,8(sp)
    44a4:	dc400117 	ldw	r17,4(sp)
    44a8:	dc000017 	ldw	r16,0(sp)
    44ac:	dec00304 	addi	sp,sp,12
    44b0:	000a2581 	jmpi	a258 <__malloc_unlock>
    44b4:	80bffe17 	ldw	r2,-8(r16)
    44b8:	50c00204 	addi	r3,r10,8
    44bc:	4091c83a 	sub	r8,r8,r2
    44c0:	41000217 	ldw	r4,8(r8)
    44c4:	388f883a 	add	r7,r7,r2
    44c8:	20c06126 	beq	r4,r3,4650 <_free_r+0x268>
    44cc:	40800317 	ldw	r2,12(r8)
    44d0:	3247883a 	add	r3,r6,r9
    44d4:	000b883a 	mov	r5,zero
    44d8:	11000215 	stw	r4,8(r2)
    44dc:	20800315 	stw	r2,12(r4)
    44e0:	18800117 	ldw	r2,4(r3)
    44e4:	1080004c 	andi	r2,r2,1
    44e8:	103fdd26 	beq	r2,zero,4460 <_free_r+0x78>
    44ec:	38800054 	ori	r2,r7,1
    44f0:	3a07883a 	add	r3,r7,r8
    44f4:	280ac03a 	cmpne	r5,r5,zero
    44f8:	40800115 	stw	r2,4(r8)
    44fc:	19c00015 	stw	r7,0(r3)
    4500:	283fe61e 	bne	r5,zero,449c <_free_r+0xb4>
    4504:	00807fc4 	movi	r2,511
    4508:	11c01f2e 	bgeu	r2,r7,4588 <_free_r+0x1a0>
    450c:	3806d27a 	srli	r3,r7,9
    4510:	1800481e 	bne	r3,zero,4634 <_free_r+0x24c>
    4514:	3804d0fa 	srli	r2,r7,3
    4518:	100690fa 	slli	r3,r2,3
    451c:	1acd883a 	add	r6,r3,r11
    4520:	31400217 	ldw	r5,8(r6)
    4524:	31405926 	beq	r6,r5,468c <_free_r+0x2a4>
    4528:	28800117 	ldw	r2,4(r5)
    452c:	00ffff04 	movi	r3,-4
    4530:	10c4703a 	and	r2,r2,r3
    4534:	3880022e 	bgeu	r7,r2,4540 <_free_r+0x158>
    4538:	29400217 	ldw	r5,8(r5)
    453c:	317ffa1e 	bne	r6,r5,4528 <_free_r+0x140>
    4540:	29800317 	ldw	r6,12(r5)
    4544:	41800315 	stw	r6,12(r8)
    4548:	41400215 	stw	r5,8(r8)
    454c:	8809883a 	mov	r4,r17
    4550:	2a000315 	stw	r8,12(r5)
    4554:	32000215 	stw	r8,8(r6)
    4558:	dfc00217 	ldw	ra,8(sp)
    455c:	dc400117 	ldw	r17,4(sp)
    4560:	dc000017 	ldw	r16,0(sp)
    4564:	dec00304 	addi	sp,sp,12
    4568:	000a2581 	jmpi	a258 <__malloc_unlock>
    456c:	dfc00217 	ldw	ra,8(sp)
    4570:	dc400117 	ldw	r17,4(sp)
    4574:	dc000017 	ldw	r16,0(sp)
    4578:	dec00304 	addi	sp,sp,12
    457c:	f800283a 	ret
    4580:	31000217 	ldw	r4,8(r6)
    4584:	003fbd06 	br	447c <_free_r+0x94>
    4588:	3806d0fa 	srli	r3,r7,3
    458c:	00800044 	movi	r2,1
    4590:	51400117 	ldw	r5,4(r10)
    4594:	180890fa 	slli	r4,r3,3
    4598:	1807d0ba 	srai	r3,r3,2
    459c:	22c9883a 	add	r4,r4,r11
    45a0:	21800217 	ldw	r6,8(r4)
    45a4:	10c4983a 	sll	r2,r2,r3
    45a8:	41000315 	stw	r4,12(r8)
    45ac:	41800215 	stw	r6,8(r8)
    45b0:	288ab03a 	or	r5,r5,r2
    45b4:	22000215 	stw	r8,8(r4)
    45b8:	8809883a 	mov	r4,r17
    45bc:	51400115 	stw	r5,4(r10)
    45c0:	32000315 	stw	r8,12(r6)
    45c4:	dfc00217 	ldw	ra,8(sp)
    45c8:	dc400117 	ldw	r17,4(sp)
    45cc:	dc000017 	ldw	r16,0(sp)
    45d0:	dec00304 	addi	sp,sp,12
    45d4:	000a2581 	jmpi	a258 <__malloc_unlock>
    45d8:	2880004c 	andi	r2,r5,1
    45dc:	3a4d883a 	add	r6,r7,r9
    45e0:	1000071e 	bne	r2,zero,4600 <_free_r+0x218>
    45e4:	80bffe17 	ldw	r2,-8(r16)
    45e8:	4091c83a 	sub	r8,r8,r2
    45ec:	41000317 	ldw	r4,12(r8)
    45f0:	40c00217 	ldw	r3,8(r8)
    45f4:	308d883a 	add	r6,r6,r2
    45f8:	20c00215 	stw	r3,8(r4)
    45fc:	19000315 	stw	r4,12(r3)
    4600:	00800074 	movhi	r2,1
    4604:	10b92204 	addi	r2,r2,-7032
    4608:	11000017 	ldw	r4,0(r2)
    460c:	30c00054 	ori	r3,r6,1
    4610:	52000215 	stw	r8,8(r10)
    4614:	40c00115 	stw	r3,4(r8)
    4618:	313fa036 	bltu	r6,r4,449c <_free_r+0xb4>
    461c:	00800074 	movhi	r2,1
    4620:	10bfea04 	addi	r2,r2,-88
    4624:	11400017 	ldw	r5,0(r2)
    4628:	8809883a 	mov	r4,r17
    462c:	00042bc0 	call	42bc <_malloc_trim_r>
    4630:	003f9a06 	br	449c <_free_r+0xb4>
    4634:	00800104 	movi	r2,4
    4638:	10c0072e 	bgeu	r2,r3,4658 <_free_r+0x270>
    463c:	00800504 	movi	r2,20
    4640:	10c01936 	bltu	r2,r3,46a8 <_free_r+0x2c0>
    4644:	188016c4 	addi	r2,r3,91
    4648:	100690fa 	slli	r3,r2,3
    464c:	003fb306 	br	451c <_free_r+0x134>
    4650:	01400044 	movi	r5,1
    4654:	003f7e06 	br	4450 <_free_r+0x68>
    4658:	3804d1ba 	srli	r2,r7,6
    465c:	10800e04 	addi	r2,r2,56
    4660:	100690fa 	slli	r3,r2,3
    4664:	003fad06 	br	451c <_free_r+0x134>
    4668:	22000315 	stw	r8,12(r4)
    466c:	22000215 	stw	r8,8(r4)
    4670:	3a05883a 	add	r2,r7,r8
    4674:	38c00054 	ori	r3,r7,1
    4678:	11c00015 	stw	r7,0(r2)
    467c:	41000215 	stw	r4,8(r8)
    4680:	40c00115 	stw	r3,4(r8)
    4684:	41000315 	stw	r4,12(r8)
    4688:	003f8406 	br	449c <_free_r+0xb4>
    468c:	1005d0ba 	srai	r2,r2,2
    4690:	00c00044 	movi	r3,1
    4694:	51000117 	ldw	r4,4(r10)
    4698:	1886983a 	sll	r3,r3,r2
    469c:	20c8b03a 	or	r4,r4,r3
    46a0:	51000115 	stw	r4,4(r10)
    46a4:	003fa706 	br	4544 <_free_r+0x15c>
    46a8:	00801504 	movi	r2,84
    46ac:	10c00436 	bltu	r2,r3,46c0 <_free_r+0x2d8>
    46b0:	3804d33a 	srli	r2,r7,12
    46b4:	10801b84 	addi	r2,r2,110
    46b8:	100690fa 	slli	r3,r2,3
    46bc:	003f9706 	br	451c <_free_r+0x134>
    46c0:	00805504 	movi	r2,340
    46c4:	10c00436 	bltu	r2,r3,46d8 <_free_r+0x2f0>
    46c8:	3804d3fa 	srli	r2,r7,15
    46cc:	10801dc4 	addi	r2,r2,119
    46d0:	100690fa 	slli	r3,r2,3
    46d4:	003f9106 	br	451c <_free_r+0x134>
    46d8:	00815504 	movi	r2,1364
    46dc:	10c0032e 	bgeu	r2,r3,46ec <_free_r+0x304>
    46e0:	00801f84 	movi	r2,126
    46e4:	00c0fc04 	movi	r3,1008
    46e8:	003f8c06 	br	451c <_free_r+0x134>
    46ec:	3804d4ba 	srli	r2,r7,18
    46f0:	10801f04 	addi	r2,r2,124
    46f4:	100690fa 	slli	r3,r2,3
    46f8:	003f8806 	br	451c <_free_r+0x134>

000046fc <__sfvwrite_r>:
    46fc:	30800217 	ldw	r2,8(r6)
    4700:	defff504 	addi	sp,sp,-44
    4704:	df000915 	stw	fp,36(sp)
    4708:	dd800715 	stw	r22,28(sp)
    470c:	dc800315 	stw	r18,12(sp)
    4710:	dfc00a15 	stw	ra,40(sp)
    4714:	ddc00815 	stw	r23,32(sp)
    4718:	dd400615 	stw	r21,24(sp)
    471c:	dd000515 	stw	r20,20(sp)
    4720:	dcc00415 	stw	r19,16(sp)
    4724:	dc400215 	stw	r17,8(sp)
    4728:	dc000115 	stw	r16,4(sp)
    472c:	302d883a 	mov	r22,r6
    4730:	2039883a 	mov	fp,r4
    4734:	2825883a 	mov	r18,r5
    4738:	10001c26 	beq	r2,zero,47ac <__sfvwrite_r+0xb0>
    473c:	29c0030b 	ldhu	r7,12(r5)
    4740:	3880020c 	andi	r2,r7,8
    4744:	10002726 	beq	r2,zero,47e4 <__sfvwrite_r+0xe8>
    4748:	28800417 	ldw	r2,16(r5)
    474c:	10002526 	beq	r2,zero,47e4 <__sfvwrite_r+0xe8>
    4750:	3880008c 	andi	r2,r7,2
    4754:	b5400017 	ldw	r21,0(r22)
    4758:	10002826 	beq	r2,zero,47fc <__sfvwrite_r+0x100>
    475c:	0021883a 	mov	r16,zero
    4760:	0023883a 	mov	r17,zero
    4764:	880d883a 	mov	r6,r17
    4768:	e009883a 	mov	r4,fp
    476c:	00810004 	movi	r2,1024
    4770:	80006e26 	beq	r16,zero,492c <__sfvwrite_r+0x230>
    4774:	800f883a 	mov	r7,r16
    4778:	91400717 	ldw	r5,28(r18)
    477c:	1400012e 	bgeu	r2,r16,4784 <__sfvwrite_r+0x88>
    4780:	100f883a 	mov	r7,r2
    4784:	90c00917 	ldw	r3,36(r18)
    4788:	183ee83a 	callr	r3
    478c:	1007883a 	mov	r3,r2
    4790:	80a1c83a 	sub	r16,r16,r2
    4794:	88a3883a 	add	r17,r17,r2
    4798:	00806d0e 	bge	zero,r2,4950 <__sfvwrite_r+0x254>
    479c:	b0800217 	ldw	r2,8(r22)
    47a0:	10c5c83a 	sub	r2,r2,r3
    47a4:	b0800215 	stw	r2,8(r22)
    47a8:	103fee1e 	bne	r2,zero,4764 <__sfvwrite_r+0x68>
    47ac:	0009883a 	mov	r4,zero
    47b0:	2005883a 	mov	r2,r4
    47b4:	dfc00a17 	ldw	ra,40(sp)
    47b8:	df000917 	ldw	fp,36(sp)
    47bc:	ddc00817 	ldw	r23,32(sp)
    47c0:	dd800717 	ldw	r22,28(sp)
    47c4:	dd400617 	ldw	r21,24(sp)
    47c8:	dd000517 	ldw	r20,20(sp)
    47cc:	dcc00417 	ldw	r19,16(sp)
    47d0:	dc800317 	ldw	r18,12(sp)
    47d4:	dc400217 	ldw	r17,8(sp)
    47d8:	dc000117 	ldw	r16,4(sp)
    47dc:	dec00b04 	addi	sp,sp,44
    47e0:	f800283a 	ret
    47e4:	00024c40 	call	24c4 <__swsetup_r>
    47e8:	1000e41e 	bne	r2,zero,4b7c <__sfvwrite_r+0x480>
    47ec:	91c0030b 	ldhu	r7,12(r18)
    47f0:	b5400017 	ldw	r21,0(r22)
    47f4:	3880008c 	andi	r2,r7,2
    47f8:	103fd81e 	bne	r2,zero,475c <__sfvwrite_r+0x60>
    47fc:	3880004c 	andi	r2,r7,1
    4800:	1005003a 	cmpeq	r2,r2,zero
    4804:	10005726 	beq	r2,zero,4964 <__sfvwrite_r+0x268>
    4808:	0029883a 	mov	r20,zero
    480c:	002f883a 	mov	r23,zero
    4810:	a0004226 	beq	r20,zero,491c <__sfvwrite_r+0x220>
    4814:	3880800c 	andi	r2,r7,512
    4818:	94000217 	ldw	r16,8(r18)
    481c:	10008b26 	beq	r2,zero,4a4c <__sfvwrite_r+0x350>
    4820:	800d883a 	mov	r6,r16
    4824:	a400a536 	bltu	r20,r16,4abc <__sfvwrite_r+0x3c0>
    4828:	3881200c 	andi	r2,r7,1152
    482c:	10002726 	beq	r2,zero,48cc <__sfvwrite_r+0x1d0>
    4830:	90800517 	ldw	r2,20(r18)
    4834:	92000417 	ldw	r8,16(r18)
    4838:	91400017 	ldw	r5,0(r18)
    483c:	1087883a 	add	r3,r2,r2
    4840:	1887883a 	add	r3,r3,r2
    4844:	1808d7fa 	srli	r4,r3,31
    4848:	2a21c83a 	sub	r16,r5,r8
    484c:	80800044 	addi	r2,r16,1
    4850:	20c9883a 	add	r4,r4,r3
    4854:	2027d07a 	srai	r19,r4,1
    4858:	a085883a 	add	r2,r20,r2
    485c:	980d883a 	mov	r6,r19
    4860:	9880022e 	bgeu	r19,r2,486c <__sfvwrite_r+0x170>
    4864:	1027883a 	mov	r19,r2
    4868:	100d883a 	mov	r6,r2
    486c:	3881000c 	andi	r2,r7,1024
    4870:	1000b826 	beq	r2,zero,4b54 <__sfvwrite_r+0x458>
    4874:	300b883a 	mov	r5,r6
    4878:	e009883a 	mov	r4,fp
    487c:	0004f700 	call	4f70 <_malloc_r>
    4880:	10003126 	beq	r2,zero,4948 <__sfvwrite_r+0x24c>
    4884:	91400417 	ldw	r5,16(r18)
    4888:	1009883a 	mov	r4,r2
    488c:	800d883a 	mov	r6,r16
    4890:	1023883a 	mov	r17,r2
    4894:	00057940 	call	5794 <memcpy>
    4898:	90c0030b 	ldhu	r3,12(r18)
    489c:	00beffc4 	movi	r2,-1025
    48a0:	1886703a 	and	r3,r3,r2
    48a4:	18c02014 	ori	r3,r3,128
    48a8:	90c0030d 	sth	r3,12(r18)
    48ac:	9c07c83a 	sub	r3,r19,r16
    48b0:	8c05883a 	add	r2,r17,r16
    48b4:	a00d883a 	mov	r6,r20
    48b8:	a021883a 	mov	r16,r20
    48bc:	90800015 	stw	r2,0(r18)
    48c0:	90c00215 	stw	r3,8(r18)
    48c4:	94400415 	stw	r17,16(r18)
    48c8:	94c00515 	stw	r19,20(r18)
    48cc:	91000017 	ldw	r4,0(r18)
    48d0:	b80b883a 	mov	r5,r23
    48d4:	a023883a 	mov	r17,r20
    48d8:	00058340 	call	5834 <memmove>
    48dc:	90c00217 	ldw	r3,8(r18)
    48e0:	90800017 	ldw	r2,0(r18)
    48e4:	a027883a 	mov	r19,r20
    48e8:	1c07c83a 	sub	r3,r3,r16
    48ec:	1405883a 	add	r2,r2,r16
    48f0:	90c00215 	stw	r3,8(r18)
    48f4:	a021883a 	mov	r16,r20
    48f8:	90800015 	stw	r2,0(r18)
    48fc:	b0800217 	ldw	r2,8(r22)
    4900:	1405c83a 	sub	r2,r2,r16
    4904:	b0800215 	stw	r2,8(r22)
    4908:	103fa826 	beq	r2,zero,47ac <__sfvwrite_r+0xb0>
    490c:	a469c83a 	sub	r20,r20,r17
    4910:	91c0030b 	ldhu	r7,12(r18)
    4914:	bcef883a 	add	r23,r23,r19
    4918:	a03fbe1e 	bne	r20,zero,4814 <__sfvwrite_r+0x118>
    491c:	adc00017 	ldw	r23,0(r21)
    4920:	ad000117 	ldw	r20,4(r21)
    4924:	ad400204 	addi	r21,r21,8
    4928:	003fb906 	br	4810 <__sfvwrite_r+0x114>
    492c:	ac400017 	ldw	r17,0(r21)
    4930:	ac000117 	ldw	r16,4(r21)
    4934:	ad400204 	addi	r21,r21,8
    4938:	003f8a06 	br	4764 <__sfvwrite_r+0x68>
    493c:	91400417 	ldw	r5,16(r18)
    4940:	e009883a 	mov	r4,fp
    4944:	00043e80 	call	43e8 <_free_r>
    4948:	00800304 	movi	r2,12
    494c:	e0800015 	stw	r2,0(fp)
    4950:	9080030b 	ldhu	r2,12(r18)
    4954:	013fffc4 	movi	r4,-1
    4958:	10801014 	ori	r2,r2,64
    495c:	9080030d 	sth	r2,12(r18)
    4960:	003f9306 	br	47b0 <__sfvwrite_r+0xb4>
    4964:	0027883a 	mov	r19,zero
    4968:	002f883a 	mov	r23,zero
    496c:	d8000015 	stw	zero,0(sp)
    4970:	0029883a 	mov	r20,zero
    4974:	98001e26 	beq	r19,zero,49f0 <__sfvwrite_r+0x2f4>
    4978:	d8c00017 	ldw	r3,0(sp)
    497c:	1804c03a 	cmpne	r2,r3,zero
    4980:	10005e26 	beq	r2,zero,4afc <__sfvwrite_r+0x400>
    4984:	9821883a 	mov	r16,r19
    4988:	a4c0012e 	bgeu	r20,r19,4990 <__sfvwrite_r+0x294>
    498c:	a021883a 	mov	r16,r20
    4990:	91000017 	ldw	r4,0(r18)
    4994:	90800417 	ldw	r2,16(r18)
    4998:	91800217 	ldw	r6,8(r18)
    499c:	91c00517 	ldw	r7,20(r18)
    49a0:	1100022e 	bgeu	r2,r4,49ac <__sfvwrite_r+0x2b0>
    49a4:	31e3883a 	add	r17,r6,r7
    49a8:	8c001616 	blt	r17,r16,4a04 <__sfvwrite_r+0x308>
    49ac:	81c03816 	blt	r16,r7,4a90 <__sfvwrite_r+0x394>
    49b0:	90c00917 	ldw	r3,36(r18)
    49b4:	91400717 	ldw	r5,28(r18)
    49b8:	e009883a 	mov	r4,fp
    49bc:	b80d883a 	mov	r6,r23
    49c0:	183ee83a 	callr	r3
    49c4:	1023883a 	mov	r17,r2
    49c8:	00bfe10e 	bge	zero,r2,4950 <__sfvwrite_r+0x254>
    49cc:	a469c83a 	sub	r20,r20,r17
    49d0:	a0001826 	beq	r20,zero,4a34 <__sfvwrite_r+0x338>
    49d4:	b0800217 	ldw	r2,8(r22)
    49d8:	1445c83a 	sub	r2,r2,r17
    49dc:	b0800215 	stw	r2,8(r22)
    49e0:	103f7226 	beq	r2,zero,47ac <__sfvwrite_r+0xb0>
    49e4:	9c67c83a 	sub	r19,r19,r17
    49e8:	bc6f883a 	add	r23,r23,r17
    49ec:	983fe21e 	bne	r19,zero,4978 <__sfvwrite_r+0x27c>
    49f0:	adc00017 	ldw	r23,0(r21)
    49f4:	acc00117 	ldw	r19,4(r21)
    49f8:	ad400204 	addi	r21,r21,8
    49fc:	d8000015 	stw	zero,0(sp)
    4a00:	003fdc06 	br	4974 <__sfvwrite_r+0x278>
    4a04:	b80b883a 	mov	r5,r23
    4a08:	880d883a 	mov	r6,r17
    4a0c:	00058340 	call	5834 <memmove>
    4a10:	90c00017 	ldw	r3,0(r18)
    4a14:	e009883a 	mov	r4,fp
    4a18:	900b883a 	mov	r5,r18
    4a1c:	1c47883a 	add	r3,r3,r17
    4a20:	90c00015 	stw	r3,0(r18)
    4a24:	0003dcc0 	call	3dcc <_fflush_r>
    4a28:	103fc91e 	bne	r2,zero,4950 <__sfvwrite_r+0x254>
    4a2c:	a469c83a 	sub	r20,r20,r17
    4a30:	a03fe81e 	bne	r20,zero,49d4 <__sfvwrite_r+0x2d8>
    4a34:	e009883a 	mov	r4,fp
    4a38:	900b883a 	mov	r5,r18
    4a3c:	0003dcc0 	call	3dcc <_fflush_r>
    4a40:	103fc31e 	bne	r2,zero,4950 <__sfvwrite_r+0x254>
    4a44:	d8000015 	stw	zero,0(sp)
    4a48:	003fe206 	br	49d4 <__sfvwrite_r+0x2d8>
    4a4c:	91000017 	ldw	r4,0(r18)
    4a50:	90800417 	ldw	r2,16(r18)
    4a54:	1100022e 	bgeu	r2,r4,4a60 <__sfvwrite_r+0x364>
    4a58:	8023883a 	mov	r17,r16
    4a5c:	85003136 	bltu	r16,r20,4b24 <__sfvwrite_r+0x428>
    4a60:	91c00517 	ldw	r7,20(r18)
    4a64:	a1c01836 	bltu	r20,r7,4ac8 <__sfvwrite_r+0x3cc>
    4a68:	90c00917 	ldw	r3,36(r18)
    4a6c:	91400717 	ldw	r5,28(r18)
    4a70:	e009883a 	mov	r4,fp
    4a74:	b80d883a 	mov	r6,r23
    4a78:	183ee83a 	callr	r3
    4a7c:	1021883a 	mov	r16,r2
    4a80:	00bfb30e 	bge	zero,r2,4950 <__sfvwrite_r+0x254>
    4a84:	1023883a 	mov	r17,r2
    4a88:	1027883a 	mov	r19,r2
    4a8c:	003f9b06 	br	48fc <__sfvwrite_r+0x200>
    4a90:	b80b883a 	mov	r5,r23
    4a94:	800d883a 	mov	r6,r16
    4a98:	00058340 	call	5834 <memmove>
    4a9c:	90c00217 	ldw	r3,8(r18)
    4aa0:	90800017 	ldw	r2,0(r18)
    4aa4:	8023883a 	mov	r17,r16
    4aa8:	1c07c83a 	sub	r3,r3,r16
    4aac:	1405883a 	add	r2,r2,r16
    4ab0:	90c00215 	stw	r3,8(r18)
    4ab4:	90800015 	stw	r2,0(r18)
    4ab8:	003fc406 	br	49cc <__sfvwrite_r+0x2d0>
    4abc:	a00d883a 	mov	r6,r20
    4ac0:	a021883a 	mov	r16,r20
    4ac4:	003f8106 	br	48cc <__sfvwrite_r+0x1d0>
    4ac8:	b80b883a 	mov	r5,r23
    4acc:	a00d883a 	mov	r6,r20
    4ad0:	00058340 	call	5834 <memmove>
    4ad4:	90c00217 	ldw	r3,8(r18)
    4ad8:	90800017 	ldw	r2,0(r18)
    4adc:	a021883a 	mov	r16,r20
    4ae0:	1d07c83a 	sub	r3,r3,r20
    4ae4:	1505883a 	add	r2,r2,r20
    4ae8:	a023883a 	mov	r17,r20
    4aec:	a027883a 	mov	r19,r20
    4af0:	90c00215 	stw	r3,8(r18)
    4af4:	90800015 	stw	r2,0(r18)
    4af8:	003f8006 	br	48fc <__sfvwrite_r+0x200>
    4afc:	b809883a 	mov	r4,r23
    4b00:	01400284 	movi	r5,10
    4b04:	980d883a 	mov	r6,r19
    4b08:	00056b00 	call	56b0 <memchr>
    4b0c:	10001726 	beq	r2,zero,4b6c <__sfvwrite_r+0x470>
    4b10:	15c5c83a 	sub	r2,r2,r23
    4b14:	15000044 	addi	r20,r2,1
    4b18:	00800044 	movi	r2,1
    4b1c:	d8800015 	stw	r2,0(sp)
    4b20:	003f9806 	br	4984 <__sfvwrite_r+0x288>
    4b24:	b80b883a 	mov	r5,r23
    4b28:	800d883a 	mov	r6,r16
    4b2c:	00058340 	call	5834 <memmove>
    4b30:	90c00017 	ldw	r3,0(r18)
    4b34:	e009883a 	mov	r4,fp
    4b38:	900b883a 	mov	r5,r18
    4b3c:	1c07883a 	add	r3,r3,r16
    4b40:	90c00015 	stw	r3,0(r18)
    4b44:	8027883a 	mov	r19,r16
    4b48:	0003dcc0 	call	3dcc <_fflush_r>
    4b4c:	103f6b26 	beq	r2,zero,48fc <__sfvwrite_r+0x200>
    4b50:	003f7f06 	br	4950 <__sfvwrite_r+0x254>
    4b54:	400b883a 	mov	r5,r8
    4b58:	e009883a 	mov	r4,fp
    4b5c:	00069a00 	call	69a0 <_realloc_r>
    4b60:	103f7626 	beq	r2,zero,493c <__sfvwrite_r+0x240>
    4b64:	1023883a 	mov	r17,r2
    4b68:	003f5006 	br	48ac <__sfvwrite_r+0x1b0>
    4b6c:	00c00044 	movi	r3,1
    4b70:	9d000044 	addi	r20,r19,1
    4b74:	d8c00015 	stw	r3,0(sp)
    4b78:	003f8206 	br	4984 <__sfvwrite_r+0x288>
    4b7c:	9080030b 	ldhu	r2,12(r18)
    4b80:	00c00244 	movi	r3,9
    4b84:	013fffc4 	movi	r4,-1
    4b88:	10801014 	ori	r2,r2,64
    4b8c:	9080030d 	sth	r2,12(r18)
    4b90:	e0c00015 	stw	r3,0(fp)
    4b94:	003f0606 	br	47b0 <__sfvwrite_r+0xb4>

00004b98 <_fwalk_reent>:
    4b98:	defff704 	addi	sp,sp,-36
    4b9c:	dcc00315 	stw	r19,12(sp)
    4ba0:	24c0b804 	addi	r19,r4,736
    4ba4:	dd800615 	stw	r22,24(sp)
    4ba8:	dd400515 	stw	r21,20(sp)
    4bac:	dfc00815 	stw	ra,32(sp)
    4bb0:	ddc00715 	stw	r23,28(sp)
    4bb4:	dd000415 	stw	r20,16(sp)
    4bb8:	dc800215 	stw	r18,8(sp)
    4bbc:	dc400115 	stw	r17,4(sp)
    4bc0:	dc000015 	stw	r16,0(sp)
    4bc4:	202b883a 	mov	r21,r4
    4bc8:	282d883a 	mov	r22,r5
    4bcc:	00040540 	call	4054 <__sfp_lock_acquire>
    4bd0:	98002126 	beq	r19,zero,4c58 <_fwalk_reent+0xc0>
    4bd4:	002f883a 	mov	r23,zero
    4bd8:	9c800117 	ldw	r18,4(r19)
    4bdc:	9c000217 	ldw	r16,8(r19)
    4be0:	90bfffc4 	addi	r2,r18,-1
    4be4:	10000d16 	blt	r2,zero,4c1c <_fwalk_reent+0x84>
    4be8:	0023883a 	mov	r17,zero
    4bec:	053fffc4 	movi	r20,-1
    4bf0:	8080030f 	ldh	r2,12(r16)
    4bf4:	8c400044 	addi	r17,r17,1
    4bf8:	10000626 	beq	r2,zero,4c14 <_fwalk_reent+0x7c>
    4bfc:	8080038f 	ldh	r2,14(r16)
    4c00:	800b883a 	mov	r5,r16
    4c04:	a809883a 	mov	r4,r21
    4c08:	15000226 	beq	r2,r20,4c14 <_fwalk_reent+0x7c>
    4c0c:	b03ee83a 	callr	r22
    4c10:	b8aeb03a 	or	r23,r23,r2
    4c14:	84001704 	addi	r16,r16,92
    4c18:	947ff51e 	bne	r18,r17,4bf0 <_fwalk_reent+0x58>
    4c1c:	9cc00017 	ldw	r19,0(r19)
    4c20:	983fed1e 	bne	r19,zero,4bd8 <_fwalk_reent+0x40>
    4c24:	00040580 	call	4058 <__sfp_lock_release>
    4c28:	b805883a 	mov	r2,r23
    4c2c:	dfc00817 	ldw	ra,32(sp)
    4c30:	ddc00717 	ldw	r23,28(sp)
    4c34:	dd800617 	ldw	r22,24(sp)
    4c38:	dd400517 	ldw	r21,20(sp)
    4c3c:	dd000417 	ldw	r20,16(sp)
    4c40:	dcc00317 	ldw	r19,12(sp)
    4c44:	dc800217 	ldw	r18,8(sp)
    4c48:	dc400117 	ldw	r17,4(sp)
    4c4c:	dc000017 	ldw	r16,0(sp)
    4c50:	dec00904 	addi	sp,sp,36
    4c54:	f800283a 	ret
    4c58:	002f883a 	mov	r23,zero
    4c5c:	003ff106 	br	4c24 <_fwalk_reent+0x8c>

00004c60 <_fwalk>:
    4c60:	defff804 	addi	sp,sp,-32
    4c64:	dcc00315 	stw	r19,12(sp)
    4c68:	24c0b804 	addi	r19,r4,736
    4c6c:	dd400515 	stw	r21,20(sp)
    4c70:	dfc00715 	stw	ra,28(sp)
    4c74:	dd800615 	stw	r22,24(sp)
    4c78:	dd000415 	stw	r20,16(sp)
    4c7c:	dc800215 	stw	r18,8(sp)
    4c80:	dc400115 	stw	r17,4(sp)
    4c84:	dc000015 	stw	r16,0(sp)
    4c88:	282b883a 	mov	r21,r5
    4c8c:	00040540 	call	4054 <__sfp_lock_acquire>
    4c90:	98001f26 	beq	r19,zero,4d10 <_fwalk+0xb0>
    4c94:	002d883a 	mov	r22,zero
    4c98:	9c800117 	ldw	r18,4(r19)
    4c9c:	9c000217 	ldw	r16,8(r19)
    4ca0:	90bfffc4 	addi	r2,r18,-1
    4ca4:	10000c16 	blt	r2,zero,4cd8 <_fwalk+0x78>
    4ca8:	0023883a 	mov	r17,zero
    4cac:	053fffc4 	movi	r20,-1
    4cb0:	8080030f 	ldh	r2,12(r16)
    4cb4:	8c400044 	addi	r17,r17,1
    4cb8:	10000526 	beq	r2,zero,4cd0 <_fwalk+0x70>
    4cbc:	8080038f 	ldh	r2,14(r16)
    4cc0:	8009883a 	mov	r4,r16
    4cc4:	15000226 	beq	r2,r20,4cd0 <_fwalk+0x70>
    4cc8:	a83ee83a 	callr	r21
    4ccc:	b0acb03a 	or	r22,r22,r2
    4cd0:	84001704 	addi	r16,r16,92
    4cd4:	947ff61e 	bne	r18,r17,4cb0 <_fwalk+0x50>
    4cd8:	9cc00017 	ldw	r19,0(r19)
    4cdc:	983fee1e 	bne	r19,zero,4c98 <_fwalk+0x38>
    4ce0:	00040580 	call	4058 <__sfp_lock_release>
    4ce4:	b005883a 	mov	r2,r22
    4ce8:	dfc00717 	ldw	ra,28(sp)
    4cec:	dd800617 	ldw	r22,24(sp)
    4cf0:	dd400517 	ldw	r21,20(sp)
    4cf4:	dd000417 	ldw	r20,16(sp)
    4cf8:	dcc00317 	ldw	r19,12(sp)
    4cfc:	dc800217 	ldw	r18,8(sp)
    4d00:	dc400117 	ldw	r17,4(sp)
    4d04:	dc000017 	ldw	r16,0(sp)
    4d08:	dec00804 	addi	sp,sp,32
    4d0c:	f800283a 	ret
    4d10:	002d883a 	mov	r22,zero
    4d14:	003ff206 	br	4ce0 <_fwalk+0x80>

00004d18 <__locale_charset>:
    4d18:	d0a00317 	ldw	r2,-32756(gp)
    4d1c:	f800283a 	ret

00004d20 <_localeconv_r>:
    4d20:	00800074 	movhi	r2,1
    4d24:	10b1c504 	addi	r2,r2,-14572
    4d28:	f800283a 	ret

00004d2c <localeconv>:
    4d2c:	00800074 	movhi	r2,1
    4d30:	10b91e04 	addi	r2,r2,-7048
    4d34:	11000017 	ldw	r4,0(r2)
    4d38:	0004d201 	jmpi	4d20 <_localeconv_r>

00004d3c <_setlocale_r>:
    4d3c:	defffc04 	addi	sp,sp,-16
    4d40:	00c00074 	movhi	r3,1
    4d44:	18f1c004 	addi	r3,r3,-14592
    4d48:	dc800215 	stw	r18,8(sp)
    4d4c:	dc400115 	stw	r17,4(sp)
    4d50:	dc000015 	stw	r16,0(sp)
    4d54:	2023883a 	mov	r17,r4
    4d58:	2825883a 	mov	r18,r5
    4d5c:	dfc00315 	stw	ra,12(sp)
    4d60:	3021883a 	mov	r16,r6
    4d64:	3009883a 	mov	r4,r6
    4d68:	180b883a 	mov	r5,r3
    4d6c:	30000926 	beq	r6,zero,4d94 <_setlocale_r+0x58>
    4d70:	00071c00 	call	71c0 <strcmp>
    4d74:	8009883a 	mov	r4,r16
    4d78:	01400074 	movhi	r5,1
    4d7c:	2971ab04 	addi	r5,r5,-14676
    4d80:	10000b1e 	bne	r2,zero,4db0 <_setlocale_r+0x74>
    4d84:	8c000d15 	stw	r16,52(r17)
    4d88:	8c800c15 	stw	r18,48(r17)
    4d8c:	00c00074 	movhi	r3,1
    4d90:	18f1c004 	addi	r3,r3,-14592
    4d94:	1805883a 	mov	r2,r3
    4d98:	dfc00317 	ldw	ra,12(sp)
    4d9c:	dc800217 	ldw	r18,8(sp)
    4da0:	dc400117 	ldw	r17,4(sp)
    4da4:	dc000017 	ldw	r16,0(sp)
    4da8:	dec00404 	addi	sp,sp,16
    4dac:	f800283a 	ret
    4db0:	00071c00 	call	71c0 <strcmp>
    4db4:	0007883a 	mov	r3,zero
    4db8:	103ff226 	beq	r2,zero,4d84 <_setlocale_r+0x48>
    4dbc:	003ff506 	br	4d94 <_setlocale_r+0x58>

00004dc0 <setlocale>:
    4dc0:	01800074 	movhi	r6,1
    4dc4:	31b91e04 	addi	r6,r6,-7048
    4dc8:	2007883a 	mov	r3,r4
    4dcc:	31000017 	ldw	r4,0(r6)
    4dd0:	280d883a 	mov	r6,r5
    4dd4:	180b883a 	mov	r5,r3
    4dd8:	0004d3c1 	jmpi	4d3c <_setlocale_r>

00004ddc <__smakebuf_r>:
    4ddc:	2880030b 	ldhu	r2,12(r5)
    4de0:	deffed04 	addi	sp,sp,-76
    4de4:	dc401015 	stw	r17,64(sp)
    4de8:	1080008c 	andi	r2,r2,2
    4dec:	dc000f15 	stw	r16,60(sp)
    4df0:	dfc01215 	stw	ra,72(sp)
    4df4:	dc801115 	stw	r18,68(sp)
    4df8:	2821883a 	mov	r16,r5
    4dfc:	2023883a 	mov	r17,r4
    4e00:	10000b26 	beq	r2,zero,4e30 <__smakebuf_r+0x54>
    4e04:	28c010c4 	addi	r3,r5,67
    4e08:	00800044 	movi	r2,1
    4e0c:	28800515 	stw	r2,20(r5)
    4e10:	28c00415 	stw	r3,16(r5)
    4e14:	28c00015 	stw	r3,0(r5)
    4e18:	dfc01217 	ldw	ra,72(sp)
    4e1c:	dc801117 	ldw	r18,68(sp)
    4e20:	dc401017 	ldw	r17,64(sp)
    4e24:	dc000f17 	ldw	r16,60(sp)
    4e28:	dec01304 	addi	sp,sp,76
    4e2c:	f800283a 	ret
    4e30:	2940038f 	ldh	r5,14(r5)
    4e34:	28002116 	blt	r5,zero,4ebc <__smakebuf_r+0xe0>
    4e38:	d80d883a 	mov	r6,sp
    4e3c:	00075b00 	call	75b0 <_fstat_r>
    4e40:	10001e16 	blt	r2,zero,4ebc <__smakebuf_r+0xe0>
    4e44:	d8800117 	ldw	r2,4(sp)
    4e48:	00e00014 	movui	r3,32768
    4e4c:	113c000c 	andi	r4,r2,61440
    4e50:	20c03126 	beq	r4,r3,4f18 <__smakebuf_r+0x13c>
    4e54:	8080030b 	ldhu	r2,12(r16)
    4e58:	00c80004 	movi	r3,8192
    4e5c:	10820014 	ori	r2,r2,2048
    4e60:	8080030d 	sth	r2,12(r16)
    4e64:	20c01e26 	beq	r4,r3,4ee0 <__smakebuf_r+0x104>
    4e68:	04810004 	movi	r18,1024
    4e6c:	8809883a 	mov	r4,r17
    4e70:	900b883a 	mov	r5,r18
    4e74:	0004f700 	call	4f70 <_malloc_r>
    4e78:	1009883a 	mov	r4,r2
    4e7c:	10003126 	beq	r2,zero,4f44 <__smakebuf_r+0x168>
    4e80:	80c0030b 	ldhu	r3,12(r16)
    4e84:	00800034 	movhi	r2,0
    4e88:	10905204 	addi	r2,r2,16712
    4e8c:	88800f15 	stw	r2,60(r17)
    4e90:	18c02014 	ori	r3,r3,128
    4e94:	84800515 	stw	r18,20(r16)
    4e98:	80c0030d 	sth	r3,12(r16)
    4e9c:	81000415 	stw	r4,16(r16)
    4ea0:	81000015 	stw	r4,0(r16)
    4ea4:	dfc01217 	ldw	ra,72(sp)
    4ea8:	dc801117 	ldw	r18,68(sp)
    4eac:	dc401017 	ldw	r17,64(sp)
    4eb0:	dc000f17 	ldw	r16,60(sp)
    4eb4:	dec01304 	addi	sp,sp,76
    4eb8:	f800283a 	ret
    4ebc:	80c0030b 	ldhu	r3,12(r16)
    4ec0:	1880200c 	andi	r2,r3,128
    4ec4:	10000426 	beq	r2,zero,4ed8 <__smakebuf_r+0xfc>
    4ec8:	04801004 	movi	r18,64
    4ecc:	18820014 	ori	r2,r3,2048
    4ed0:	8080030d 	sth	r2,12(r16)
    4ed4:	003fe506 	br	4e6c <__smakebuf_r+0x90>
    4ed8:	04810004 	movi	r18,1024
    4edc:	003ffb06 	br	4ecc <__smakebuf_r+0xf0>
    4ee0:	8140038f 	ldh	r5,14(r16)
    4ee4:	8809883a 	mov	r4,r17
    4ee8:	00076240 	call	7624 <_isatty_r>
    4eec:	103fde26 	beq	r2,zero,4e68 <__smakebuf_r+0x8c>
    4ef0:	8080030b 	ldhu	r2,12(r16)
    4ef4:	80c010c4 	addi	r3,r16,67
    4ef8:	04810004 	movi	r18,1024
    4efc:	10800054 	ori	r2,r2,1
    4f00:	8080030d 	sth	r2,12(r16)
    4f04:	00800044 	movi	r2,1
    4f08:	80c00415 	stw	r3,16(r16)
    4f0c:	80800515 	stw	r2,20(r16)
    4f10:	80c00015 	stw	r3,0(r16)
    4f14:	003fd506 	br	4e6c <__smakebuf_r+0x90>
    4f18:	80c00a17 	ldw	r3,40(r16)
    4f1c:	00800034 	movhi	r2,0
    4f20:	109c1f04 	addi	r2,r2,28796
    4f24:	18bfcb1e 	bne	r3,r2,4e54 <__smakebuf_r+0x78>
    4f28:	8080030b 	ldhu	r2,12(r16)
    4f2c:	00c10004 	movi	r3,1024
    4f30:	1825883a 	mov	r18,r3
    4f34:	10c4b03a 	or	r2,r2,r3
    4f38:	8080030d 	sth	r2,12(r16)
    4f3c:	80c01315 	stw	r3,76(r16)
    4f40:	003fca06 	br	4e6c <__smakebuf_r+0x90>
    4f44:	8100030b 	ldhu	r4,12(r16)
    4f48:	2080800c 	andi	r2,r4,512
    4f4c:	103fb21e 	bne	r2,zero,4e18 <__smakebuf_r+0x3c>
    4f50:	80c010c4 	addi	r3,r16,67
    4f54:	21000094 	ori	r4,r4,2
    4f58:	00800044 	movi	r2,1
    4f5c:	80800515 	stw	r2,20(r16)
    4f60:	8100030d 	sth	r4,12(r16)
    4f64:	80c00415 	stw	r3,16(r16)
    4f68:	80c00015 	stw	r3,0(r16)
    4f6c:	003faa06 	br	4e18 <__smakebuf_r+0x3c>

00004f70 <_malloc_r>:
    4f70:	defff604 	addi	sp,sp,-40
    4f74:	28c002c4 	addi	r3,r5,11
    4f78:	00800584 	movi	r2,22
    4f7c:	dc800215 	stw	r18,8(sp)
    4f80:	dfc00915 	stw	ra,36(sp)
    4f84:	df000815 	stw	fp,32(sp)
    4f88:	ddc00715 	stw	r23,28(sp)
    4f8c:	dd800615 	stw	r22,24(sp)
    4f90:	dd400515 	stw	r21,20(sp)
    4f94:	dd000415 	stw	r20,16(sp)
    4f98:	dcc00315 	stw	r19,12(sp)
    4f9c:	dc400115 	stw	r17,4(sp)
    4fa0:	dc000015 	stw	r16,0(sp)
    4fa4:	2025883a 	mov	r18,r4
    4fa8:	10c01236 	bltu	r2,r3,4ff4 <_malloc_r+0x84>
    4fac:	04400404 	movi	r17,16
    4fb0:	8940142e 	bgeu	r17,r5,5004 <_malloc_r+0x94>
    4fb4:	00800304 	movi	r2,12
    4fb8:	0007883a 	mov	r3,zero
    4fbc:	90800015 	stw	r2,0(r18)
    4fc0:	1805883a 	mov	r2,r3
    4fc4:	dfc00917 	ldw	ra,36(sp)
    4fc8:	df000817 	ldw	fp,32(sp)
    4fcc:	ddc00717 	ldw	r23,28(sp)
    4fd0:	dd800617 	ldw	r22,24(sp)
    4fd4:	dd400517 	ldw	r21,20(sp)
    4fd8:	dd000417 	ldw	r20,16(sp)
    4fdc:	dcc00317 	ldw	r19,12(sp)
    4fe0:	dc800217 	ldw	r18,8(sp)
    4fe4:	dc400117 	ldw	r17,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00a04 	addi	sp,sp,40
    4ff0:	f800283a 	ret
    4ff4:	00bffe04 	movi	r2,-8
    4ff8:	18a2703a 	and	r17,r3,r2
    4ffc:	883fed16 	blt	r17,zero,4fb4 <_malloc_r+0x44>
    5000:	897fec36 	bltu	r17,r5,4fb4 <_malloc_r+0x44>
    5004:	9009883a 	mov	r4,r18
    5008:	000a2380 	call	a238 <__malloc_lock>
    500c:	00807dc4 	movi	r2,503
    5010:	14402b2e 	bgeu	r2,r17,50c0 <_malloc_r+0x150>
    5014:	8806d27a 	srli	r3,r17,9
    5018:	18003f1e 	bne	r3,zero,5118 <_malloc_r+0x1a8>
    501c:	880cd0fa 	srli	r6,r17,3
    5020:	300490fa 	slli	r2,r6,3
    5024:	02c00074 	movhi	r11,1
    5028:	5af37904 	addi	r11,r11,-12828
    502c:	12cb883a 	add	r5,r2,r11
    5030:	2c000317 	ldw	r16,12(r5)
    5034:	580f883a 	mov	r7,r11
    5038:	2c00041e 	bne	r5,r16,504c <_malloc_r+0xdc>
    503c:	00000a06 	br	5068 <_malloc_r+0xf8>
    5040:	1800860e 	bge	r3,zero,525c <_malloc_r+0x2ec>
    5044:	84000317 	ldw	r16,12(r16)
    5048:	2c000726 	beq	r5,r16,5068 <_malloc_r+0xf8>
    504c:	80800117 	ldw	r2,4(r16)
    5050:	00ffff04 	movi	r3,-4
    5054:	10c8703a 	and	r4,r2,r3
    5058:	2447c83a 	sub	r3,r4,r17
    505c:	008003c4 	movi	r2,15
    5060:	10fff70e 	bge	r2,r3,5040 <_malloc_r+0xd0>
    5064:	31bfffc4 	addi	r6,r6,-1
    5068:	32400044 	addi	r9,r6,1
    506c:	02800074 	movhi	r10,1
    5070:	52b37b04 	addi	r10,r10,-12820
    5074:	54000217 	ldw	r16,8(r10)
    5078:	8280a026 	beq	r16,r10,52fc <_malloc_r+0x38c>
    507c:	80800117 	ldw	r2,4(r16)
    5080:	00ffff04 	movi	r3,-4
    5084:	10ca703a 	and	r5,r2,r3
    5088:	2c4dc83a 	sub	r6,r5,r17
    508c:	008003c4 	movi	r2,15
    5090:	11808316 	blt	r2,r6,52a0 <_malloc_r+0x330>
    5094:	52800315 	stw	r10,12(r10)
    5098:	52800215 	stw	r10,8(r10)
    509c:	30002916 	blt	r6,zero,5144 <_malloc_r+0x1d4>
    50a0:	8147883a 	add	r3,r16,r5
    50a4:	18800117 	ldw	r2,4(r3)
    50a8:	9009883a 	mov	r4,r18
    50ac:	10800054 	ori	r2,r2,1
    50b0:	18800115 	stw	r2,4(r3)
    50b4:	000a2580 	call	a258 <__malloc_unlock>
    50b8:	80c00204 	addi	r3,r16,8
    50bc:	003fc006 	br	4fc0 <_malloc_r+0x50>
    50c0:	02c00074 	movhi	r11,1
    50c4:	5af37904 	addi	r11,r11,-12828
    50c8:	8ac5883a 	add	r2,r17,r11
    50cc:	14000317 	ldw	r16,12(r2)
    50d0:	580f883a 	mov	r7,r11
    50d4:	8806d0fa 	srli	r3,r17,3
    50d8:	14006c26 	beq	r2,r16,528c <_malloc_r+0x31c>
    50dc:	80c00117 	ldw	r3,4(r16)
    50e0:	00bfff04 	movi	r2,-4
    50e4:	81800317 	ldw	r6,12(r16)
    50e8:	1886703a 	and	r3,r3,r2
    50ec:	80c7883a 	add	r3,r16,r3
    50f0:	18800117 	ldw	r2,4(r3)
    50f4:	81400217 	ldw	r5,8(r16)
    50f8:	9009883a 	mov	r4,r18
    50fc:	10800054 	ori	r2,r2,1
    5100:	18800115 	stw	r2,4(r3)
    5104:	31400215 	stw	r5,8(r6)
    5108:	29800315 	stw	r6,12(r5)
    510c:	000a2580 	call	a258 <__malloc_unlock>
    5110:	80c00204 	addi	r3,r16,8
    5114:	003faa06 	br	4fc0 <_malloc_r+0x50>
    5118:	00800104 	movi	r2,4
    511c:	10c0052e 	bgeu	r2,r3,5134 <_malloc_r+0x1c4>
    5120:	00800504 	movi	r2,20
    5124:	10c07836 	bltu	r2,r3,5308 <_malloc_r+0x398>
    5128:	198016c4 	addi	r6,r3,91
    512c:	300490fa 	slli	r2,r6,3
    5130:	003fbc06 	br	5024 <_malloc_r+0xb4>
    5134:	8804d1ba 	srli	r2,r17,6
    5138:	11800e04 	addi	r6,r2,56
    513c:	300490fa 	slli	r2,r6,3
    5140:	003fb806 	br	5024 <_malloc_r+0xb4>
    5144:	00807fc4 	movi	r2,511
    5148:	1140bb36 	bltu	r2,r5,5438 <_malloc_r+0x4c8>
    514c:	2806d0fa 	srli	r3,r5,3
    5150:	573ffe04 	addi	fp,r10,-8
    5154:	00800044 	movi	r2,1
    5158:	180890fa 	slli	r4,r3,3
    515c:	1807d0ba 	srai	r3,r3,2
    5160:	e1c00117 	ldw	r7,4(fp)
    5164:	5909883a 	add	r4,r11,r4
    5168:	21400217 	ldw	r5,8(r4)
    516c:	10c4983a 	sll	r2,r2,r3
    5170:	81000315 	stw	r4,12(r16)
    5174:	81400215 	stw	r5,8(r16)
    5178:	388eb03a 	or	r7,r7,r2
    517c:	2c000315 	stw	r16,12(r5)
    5180:	24000215 	stw	r16,8(r4)
    5184:	e1c00115 	stw	r7,4(fp)
    5188:	4807883a 	mov	r3,r9
    518c:	4800cd16 	blt	r9,zero,54c4 <_malloc_r+0x554>
    5190:	1807d0ba 	srai	r3,r3,2
    5194:	00800044 	movi	r2,1
    5198:	10c8983a 	sll	r4,r2,r3
    519c:	39004436 	bltu	r7,r4,52b0 <_malloc_r+0x340>
    51a0:	21c4703a 	and	r2,r4,r7
    51a4:	10000a1e 	bne	r2,zero,51d0 <_malloc_r+0x260>
    51a8:	2109883a 	add	r4,r4,r4
    51ac:	00bfff04 	movi	r2,-4
    51b0:	4884703a 	and	r2,r9,r2
    51b4:	3906703a 	and	r3,r7,r4
    51b8:	12400104 	addi	r9,r2,4
    51bc:	1800041e 	bne	r3,zero,51d0 <_malloc_r+0x260>
    51c0:	2109883a 	add	r4,r4,r4
    51c4:	3904703a 	and	r2,r7,r4
    51c8:	4a400104 	addi	r9,r9,4
    51cc:	103ffc26 	beq	r2,zero,51c0 <_malloc_r+0x250>
    51d0:	480490fa 	slli	r2,r9,3
    51d4:	4819883a 	mov	r12,r9
    51d8:	023fff04 	movi	r8,-4
    51dc:	589b883a 	add	r13,r11,r2
    51e0:	6807883a 	mov	r3,r13
    51e4:	014003c4 	movi	r5,15
    51e8:	1c000317 	ldw	r16,12(r3)
    51ec:	1c00041e 	bne	r3,r16,5200 <_malloc_r+0x290>
    51f0:	0000a706 	br	5490 <_malloc_r+0x520>
    51f4:	3000ab0e 	bge	r6,zero,54a4 <_malloc_r+0x534>
    51f8:	84000317 	ldw	r16,12(r16)
    51fc:	1c00a426 	beq	r3,r16,5490 <_malloc_r+0x520>
    5200:	80800117 	ldw	r2,4(r16)
    5204:	1204703a 	and	r2,r2,r8
    5208:	144dc83a 	sub	r6,r2,r17
    520c:	29bff90e 	bge	r5,r6,51f4 <_malloc_r+0x284>
    5210:	81000317 	ldw	r4,12(r16)
    5214:	80c00217 	ldw	r3,8(r16)
    5218:	89400054 	ori	r5,r17,1
    521c:	8445883a 	add	r2,r16,r17
    5220:	20c00215 	stw	r3,8(r4)
    5224:	19000315 	stw	r4,12(r3)
    5228:	81400115 	stw	r5,4(r16)
    522c:	1187883a 	add	r3,r2,r6
    5230:	31000054 	ori	r4,r6,1
    5234:	50800315 	stw	r2,12(r10)
    5238:	50800215 	stw	r2,8(r10)
    523c:	19800015 	stw	r6,0(r3)
    5240:	11000115 	stw	r4,4(r2)
    5244:	12800215 	stw	r10,8(r2)
    5248:	12800315 	stw	r10,12(r2)
    524c:	9009883a 	mov	r4,r18
    5250:	000a2580 	call	a258 <__malloc_unlock>
    5254:	80c00204 	addi	r3,r16,8
    5258:	003f5906 	br	4fc0 <_malloc_r+0x50>
    525c:	8109883a 	add	r4,r16,r4
    5260:	20800117 	ldw	r2,4(r4)
    5264:	80c00217 	ldw	r3,8(r16)
    5268:	81400317 	ldw	r5,12(r16)
    526c:	10800054 	ori	r2,r2,1
    5270:	20800115 	stw	r2,4(r4)
    5274:	28c00215 	stw	r3,8(r5)
    5278:	19400315 	stw	r5,12(r3)
    527c:	9009883a 	mov	r4,r18
    5280:	000a2580 	call	a258 <__malloc_unlock>
    5284:	80c00204 	addi	r3,r16,8
    5288:	003f4d06 	br	4fc0 <_malloc_r+0x50>
    528c:	80800204 	addi	r2,r16,8
    5290:	14000317 	ldw	r16,12(r2)
    5294:	143f911e 	bne	r2,r16,50dc <_malloc_r+0x16c>
    5298:	1a400084 	addi	r9,r3,2
    529c:	003f7306 	br	506c <_malloc_r+0xfc>
    52a0:	88c00054 	ori	r3,r17,1
    52a4:	8445883a 	add	r2,r16,r17
    52a8:	80c00115 	stw	r3,4(r16)
    52ac:	003fdf06 	br	522c <_malloc_r+0x2bc>
    52b0:	e4000217 	ldw	r16,8(fp)
    52b4:	00bfff04 	movi	r2,-4
    52b8:	80c00117 	ldw	r3,4(r16)
    52bc:	802d883a 	mov	r22,r16
    52c0:	18aa703a 	and	r21,r3,r2
    52c4:	ac401636 	bltu	r21,r17,5320 <_malloc_r+0x3b0>
    52c8:	ac49c83a 	sub	r4,r21,r17
    52cc:	008003c4 	movi	r2,15
    52d0:	1100130e 	bge	r2,r4,5320 <_malloc_r+0x3b0>
    52d4:	88800054 	ori	r2,r17,1
    52d8:	8447883a 	add	r3,r16,r17
    52dc:	80800115 	stw	r2,4(r16)
    52e0:	20800054 	ori	r2,r4,1
    52e4:	18800115 	stw	r2,4(r3)
    52e8:	e0c00215 	stw	r3,8(fp)
    52ec:	9009883a 	mov	r4,r18
    52f0:	000a2580 	call	a258 <__malloc_unlock>
    52f4:	80c00204 	addi	r3,r16,8
    52f8:	003f3106 	br	4fc0 <_malloc_r+0x50>
    52fc:	39c00117 	ldw	r7,4(r7)
    5300:	573ffe04 	addi	fp,r10,-8
    5304:	003fa006 	br	5188 <_malloc_r+0x218>
    5308:	00801504 	movi	r2,84
    530c:	10c06736 	bltu	r2,r3,54ac <_malloc_r+0x53c>
    5310:	8804d33a 	srli	r2,r17,12
    5314:	11801b84 	addi	r6,r2,110
    5318:	300490fa 	slli	r2,r6,3
    531c:	003f4106 	br	5024 <_malloc_r+0xb4>
    5320:	d0a6cc17 	ldw	r2,-25808(gp)
    5324:	d0e00517 	ldw	r3,-32748(gp)
    5328:	053fffc4 	movi	r20,-1
    532c:	10800404 	addi	r2,r2,16
    5330:	88a7883a 	add	r19,r17,r2
    5334:	1d000326 	beq	r3,r20,5344 <_malloc_r+0x3d4>
    5338:	98c3ffc4 	addi	r3,r19,4095
    533c:	00bc0004 	movi	r2,-4096
    5340:	18a6703a 	and	r19,r3,r2
    5344:	9009883a 	mov	r4,r18
    5348:	980b883a 	mov	r5,r19
    534c:	00070040 	call	7004 <_sbrk_r>
    5350:	1009883a 	mov	r4,r2
    5354:	15000426 	beq	r2,r20,5368 <_malloc_r+0x3f8>
    5358:	854b883a 	add	r5,r16,r21
    535c:	1029883a 	mov	r20,r2
    5360:	11405a2e 	bgeu	r2,r5,54cc <_malloc_r+0x55c>
    5364:	87000c26 	beq	r16,fp,5398 <_malloc_r+0x428>
    5368:	e4000217 	ldw	r16,8(fp)
    536c:	80c00117 	ldw	r3,4(r16)
    5370:	00bfff04 	movi	r2,-4
    5374:	1884703a 	and	r2,r3,r2
    5378:	14400336 	bltu	r2,r17,5388 <_malloc_r+0x418>
    537c:	1449c83a 	sub	r4,r2,r17
    5380:	008003c4 	movi	r2,15
    5384:	113fd316 	blt	r2,r4,52d4 <_malloc_r+0x364>
    5388:	9009883a 	mov	r4,r18
    538c:	000a2580 	call	a258 <__malloc_unlock>
    5390:	0007883a 	mov	r3,zero
    5394:	003f0a06 	br	4fc0 <_malloc_r+0x50>
    5398:	05c00074 	movhi	r23,1
    539c:	bdfff404 	addi	r23,r23,-48
    53a0:	b8800017 	ldw	r2,0(r23)
    53a4:	988d883a 	add	r6,r19,r2
    53a8:	b9800015 	stw	r6,0(r23)
    53ac:	d0e00517 	ldw	r3,-32748(gp)
    53b0:	00bfffc4 	movi	r2,-1
    53b4:	18808e26 	beq	r3,r2,55f0 <_malloc_r+0x680>
    53b8:	2145c83a 	sub	r2,r4,r5
    53bc:	3085883a 	add	r2,r6,r2
    53c0:	b8800015 	stw	r2,0(r23)
    53c4:	20c001cc 	andi	r3,r4,7
    53c8:	18005f1e 	bne	r3,zero,5548 <_malloc_r+0x5d8>
    53cc:	000b883a 	mov	r5,zero
    53d0:	a4c5883a 	add	r2,r20,r19
    53d4:	1083ffcc 	andi	r2,r2,4095
    53d8:	00c40004 	movi	r3,4096
    53dc:	1887c83a 	sub	r3,r3,r2
    53e0:	28e7883a 	add	r19,r5,r3
    53e4:	9009883a 	mov	r4,r18
    53e8:	980b883a 	mov	r5,r19
    53ec:	00070040 	call	7004 <_sbrk_r>
    53f0:	1007883a 	mov	r3,r2
    53f4:	00bfffc4 	movi	r2,-1
    53f8:	18807a26 	beq	r3,r2,55e4 <_malloc_r+0x674>
    53fc:	1d05c83a 	sub	r2,r3,r20
    5400:	9885883a 	add	r2,r19,r2
    5404:	10c00054 	ori	r3,r2,1
    5408:	b8800017 	ldw	r2,0(r23)
    540c:	a021883a 	mov	r16,r20
    5410:	a0c00115 	stw	r3,4(r20)
    5414:	9885883a 	add	r2,r19,r2
    5418:	b8800015 	stw	r2,0(r23)
    541c:	e5000215 	stw	r20,8(fp)
    5420:	b7003626 	beq	r22,fp,54fc <_malloc_r+0x58c>
    5424:	018003c4 	movi	r6,15
    5428:	35404b36 	bltu	r6,r21,5558 <_malloc_r+0x5e8>
    542c:	00800044 	movi	r2,1
    5430:	a0800115 	stw	r2,4(r20)
    5434:	003fcd06 	br	536c <_malloc_r+0x3fc>
    5438:	2808d27a 	srli	r4,r5,9
    543c:	2000371e 	bne	r4,zero,551c <_malloc_r+0x5ac>
    5440:	2808d0fa 	srli	r4,r5,3
    5444:	200690fa 	slli	r3,r4,3
    5448:	1ad1883a 	add	r8,r3,r11
    544c:	41800217 	ldw	r6,8(r8)
    5450:	41805b26 	beq	r8,r6,55c0 <_malloc_r+0x650>
    5454:	30800117 	ldw	r2,4(r6)
    5458:	00ffff04 	movi	r3,-4
    545c:	10c4703a 	and	r2,r2,r3
    5460:	2880022e 	bgeu	r5,r2,546c <_malloc_r+0x4fc>
    5464:	31800217 	ldw	r6,8(r6)
    5468:	41bffa1e 	bne	r8,r6,5454 <_malloc_r+0x4e4>
    546c:	32000317 	ldw	r8,12(r6)
    5470:	39c00117 	ldw	r7,4(r7)
    5474:	82000315 	stw	r8,12(r16)
    5478:	81800215 	stw	r6,8(r16)
    547c:	07000074 	movhi	fp,1
    5480:	e7337904 	addi	fp,fp,-12828
    5484:	34000315 	stw	r16,12(r6)
    5488:	44000215 	stw	r16,8(r8)
    548c:	003f3e06 	br	5188 <_malloc_r+0x218>
    5490:	63000044 	addi	r12,r12,1
    5494:	608000cc 	andi	r2,r12,3
    5498:	10005d26 	beq	r2,zero,5610 <_malloc_r+0x6a0>
    549c:	18c00204 	addi	r3,r3,8
    54a0:	003f5106 	br	51e8 <_malloc_r+0x278>
    54a4:	8089883a 	add	r4,r16,r2
    54a8:	003f6d06 	br	5260 <_malloc_r+0x2f0>
    54ac:	00805504 	movi	r2,340
    54b0:	10c02036 	bltu	r2,r3,5534 <_malloc_r+0x5c4>
    54b4:	8804d3fa 	srli	r2,r17,15
    54b8:	11801dc4 	addi	r6,r2,119
    54bc:	300490fa 	slli	r2,r6,3
    54c0:	003ed806 	br	5024 <_malloc_r+0xb4>
    54c4:	48c000c4 	addi	r3,r9,3
    54c8:	003f3106 	br	5190 <_malloc_r+0x220>
    54cc:	05c00074 	movhi	r23,1
    54d0:	bdfff404 	addi	r23,r23,-48
    54d4:	b8800017 	ldw	r2,0(r23)
    54d8:	988d883a 	add	r6,r19,r2
    54dc:	b9800015 	stw	r6,0(r23)
    54e0:	293fb21e 	bne	r5,r4,53ac <_malloc_r+0x43c>
    54e4:	2083ffcc 	andi	r2,r4,4095
    54e8:	103fb01e 	bne	r2,zero,53ac <_malloc_r+0x43c>
    54ec:	e4000217 	ldw	r16,8(fp)
    54f0:	9d45883a 	add	r2,r19,r21
    54f4:	10800054 	ori	r2,r2,1
    54f8:	80800115 	stw	r2,4(r16)
    54fc:	b8c00017 	ldw	r3,0(r23)
    5500:	d0a6cd17 	ldw	r2,-25804(gp)
    5504:	10c0012e 	bgeu	r2,r3,550c <_malloc_r+0x59c>
    5508:	d0e6cd15 	stw	r3,-25804(gp)
    550c:	d0a6ce17 	ldw	r2,-25800(gp)
    5510:	10ff962e 	bgeu	r2,r3,536c <_malloc_r+0x3fc>
    5514:	d0e6ce15 	stw	r3,-25800(gp)
    5518:	003f9406 	br	536c <_malloc_r+0x3fc>
    551c:	00800104 	movi	r2,4
    5520:	11001e36 	bltu	r2,r4,559c <_malloc_r+0x62c>
    5524:	2804d1ba 	srli	r2,r5,6
    5528:	11000e04 	addi	r4,r2,56
    552c:	200690fa 	slli	r3,r4,3
    5530:	003fc506 	br	5448 <_malloc_r+0x4d8>
    5534:	00815504 	movi	r2,1364
    5538:	10c01d2e 	bgeu	r2,r3,55b0 <_malloc_r+0x640>
    553c:	01801f84 	movi	r6,126
    5540:	0080fc04 	movi	r2,1008
    5544:	003eb706 	br	5024 <_malloc_r+0xb4>
    5548:	00800204 	movi	r2,8
    554c:	10cbc83a 	sub	r5,r2,r3
    5550:	2169883a 	add	r20,r4,r5
    5554:	003f9e06 	br	53d0 <_malloc_r+0x460>
    5558:	00bffe04 	movi	r2,-8
    555c:	a93ffd04 	addi	r4,r21,-12
    5560:	2088703a 	and	r4,r4,r2
    5564:	b10b883a 	add	r5,r22,r4
    5568:	00c00144 	movi	r3,5
    556c:	28c00215 	stw	r3,8(r5)
    5570:	28c00115 	stw	r3,4(r5)
    5574:	b0800117 	ldw	r2,4(r22)
    5578:	1080004c 	andi	r2,r2,1
    557c:	2084b03a 	or	r2,r4,r2
    5580:	b0800115 	stw	r2,4(r22)
    5584:	313fdd2e 	bgeu	r6,r4,54fc <_malloc_r+0x58c>
    5588:	b1400204 	addi	r5,r22,8
    558c:	9009883a 	mov	r4,r18
    5590:	00043e80 	call	43e8 <_free_r>
    5594:	e4000217 	ldw	r16,8(fp)
    5598:	003fd806 	br	54fc <_malloc_r+0x58c>
    559c:	00800504 	movi	r2,20
    55a0:	11001536 	bltu	r2,r4,55f8 <_malloc_r+0x688>
    55a4:	210016c4 	addi	r4,r4,91
    55a8:	200690fa 	slli	r3,r4,3
    55ac:	003fa606 	br	5448 <_malloc_r+0x4d8>
    55b0:	8804d4ba 	srli	r2,r17,18
    55b4:	11801f04 	addi	r6,r2,124
    55b8:	300490fa 	slli	r2,r6,3
    55bc:	003e9906 	br	5024 <_malloc_r+0xb4>
    55c0:	2009d0ba 	srai	r4,r4,2
    55c4:	01400074 	movhi	r5,1
    55c8:	29737904 	addi	r5,r5,-12828
    55cc:	00c00044 	movi	r3,1
    55d0:	28800117 	ldw	r2,4(r5)
    55d4:	1906983a 	sll	r3,r3,r4
    55d8:	10c4b03a 	or	r2,r2,r3
    55dc:	28800115 	stw	r2,4(r5)
    55e0:	003fa306 	br	5470 <_malloc_r+0x500>
    55e4:	0027883a 	mov	r19,zero
    55e8:	00c00044 	movi	r3,1
    55ec:	003f8606 	br	5408 <_malloc_r+0x498>
    55f0:	d1200515 	stw	r4,-32748(gp)
    55f4:	003f7306 	br	53c4 <_malloc_r+0x454>
    55f8:	00801504 	movi	r2,84
    55fc:	11001936 	bltu	r2,r4,5664 <_malloc_r+0x6f4>
    5600:	2804d33a 	srli	r2,r5,12
    5604:	11001b84 	addi	r4,r2,110
    5608:	200690fa 	slli	r3,r4,3
    560c:	003f8e06 	br	5448 <_malloc_r+0x4d8>
    5610:	480b883a 	mov	r5,r9
    5614:	6807883a 	mov	r3,r13
    5618:	288000cc 	andi	r2,r5,3
    561c:	18fffe04 	addi	r3,r3,-8
    5620:	297fffc4 	addi	r5,r5,-1
    5624:	10001526 	beq	r2,zero,567c <_malloc_r+0x70c>
    5628:	18800217 	ldw	r2,8(r3)
    562c:	10fffa26 	beq	r2,r3,5618 <_malloc_r+0x6a8>
    5630:	2109883a 	add	r4,r4,r4
    5634:	393f1e36 	bltu	r7,r4,52b0 <_malloc_r+0x340>
    5638:	203f1d26 	beq	r4,zero,52b0 <_malloc_r+0x340>
    563c:	21c4703a 	and	r2,r4,r7
    5640:	10000226 	beq	r2,zero,564c <_malloc_r+0x6dc>
    5644:	6013883a 	mov	r9,r12
    5648:	003ee106 	br	51d0 <_malloc_r+0x260>
    564c:	2109883a 	add	r4,r4,r4
    5650:	3904703a 	and	r2,r7,r4
    5654:	63000104 	addi	r12,r12,4
    5658:	103ffc26 	beq	r2,zero,564c <_malloc_r+0x6dc>
    565c:	6013883a 	mov	r9,r12
    5660:	003edb06 	br	51d0 <_malloc_r+0x260>
    5664:	00805504 	movi	r2,340
    5668:	11000836 	bltu	r2,r4,568c <_malloc_r+0x71c>
    566c:	2804d3fa 	srli	r2,r5,15
    5670:	11001dc4 	addi	r4,r2,119
    5674:	200690fa 	slli	r3,r4,3
    5678:	003f7306 	br	5448 <_malloc_r+0x4d8>
    567c:	0104303a 	nor	r2,zero,r4
    5680:	388e703a 	and	r7,r7,r2
    5684:	e1c00115 	stw	r7,4(fp)
    5688:	003fe906 	br	5630 <_malloc_r+0x6c0>
    568c:	00815504 	movi	r2,1364
    5690:	1100032e 	bgeu	r2,r4,56a0 <_malloc_r+0x730>
    5694:	01001f84 	movi	r4,126
    5698:	00c0fc04 	movi	r3,1008
    569c:	003f6a06 	br	5448 <_malloc_r+0x4d8>
    56a0:	2804d4ba 	srli	r2,r5,18
    56a4:	11001f04 	addi	r4,r2,124
    56a8:	200690fa 	slli	r3,r4,3
    56ac:	003f6606 	br	5448 <_malloc_r+0x4d8>

000056b0 <memchr>:
    56b0:	008000c4 	movi	r2,3
    56b4:	29403fcc 	andi	r5,r5,255
    56b8:	2007883a 	mov	r3,r4
    56bc:	1180022e 	bgeu	r2,r6,56c8 <memchr+0x18>
    56c0:	2084703a 	and	r2,r4,r2
    56c4:	10000b26 	beq	r2,zero,56f4 <memchr+0x44>
    56c8:	313fffc4 	addi	r4,r6,-1
    56cc:	3000051e 	bne	r6,zero,56e4 <memchr+0x34>
    56d0:	00002c06 	br	5784 <memchr+0xd4>
    56d4:	213fffc4 	addi	r4,r4,-1
    56d8:	00bfffc4 	movi	r2,-1
    56dc:	18c00044 	addi	r3,r3,1
    56e0:	20802826 	beq	r4,r2,5784 <memchr+0xd4>
    56e4:	18800003 	ldbu	r2,0(r3)
    56e8:	28bffa1e 	bne	r5,r2,56d4 <memchr+0x24>
    56ec:	1805883a 	mov	r2,r3
    56f0:	f800283a 	ret
    56f4:	0011883a 	mov	r8,zero
    56f8:	0007883a 	mov	r3,zero
    56fc:	01c00104 	movi	r7,4
    5700:	4004923a 	slli	r2,r8,8
    5704:	18c00044 	addi	r3,r3,1
    5708:	1151883a 	add	r8,r2,r5
    570c:	19fffc1e 	bne	r3,r7,5700 <memchr+0x50>
    5710:	02bfbff4 	movhi	r10,65279
    5714:	52bfbfc4 	addi	r10,r10,-257
    5718:	02602074 	movhi	r9,32897
    571c:	4a602004 	addi	r9,r9,-32640
    5720:	02c000c4 	movi	r11,3
    5724:	20800017 	ldw	r2,0(r4)
    5728:	31bfff04 	addi	r6,r6,-4
    572c:	200f883a 	mov	r7,r4
    5730:	1204f03a 	xor	r2,r2,r8
    5734:	1287883a 	add	r3,r2,r10
    5738:	1a46703a 	and	r3,r3,r9
    573c:	0084303a 	nor	r2,zero,r2
    5740:	10c4703a 	and	r2,r2,r3
    5744:	10000b26 	beq	r2,zero,5774 <memchr+0xc4>
    5748:	20800003 	ldbu	r2,0(r4)
    574c:	28800f26 	beq	r5,r2,578c <memchr+0xdc>
    5750:	20800043 	ldbu	r2,1(r4)
    5754:	21c00044 	addi	r7,r4,1
    5758:	28800c26 	beq	r5,r2,578c <memchr+0xdc>
    575c:	20800083 	ldbu	r2,2(r4)
    5760:	21c00084 	addi	r7,r4,2
    5764:	28800926 	beq	r5,r2,578c <memchr+0xdc>
    5768:	208000c3 	ldbu	r2,3(r4)
    576c:	21c000c4 	addi	r7,r4,3
    5770:	28800626 	beq	r5,r2,578c <memchr+0xdc>
    5774:	21000104 	addi	r4,r4,4
    5778:	59bfea36 	bltu	r11,r6,5724 <memchr+0x74>
    577c:	2007883a 	mov	r3,r4
    5780:	003fd106 	br	56c8 <memchr+0x18>
    5784:	0005883a 	mov	r2,zero
    5788:	f800283a 	ret
    578c:	3805883a 	mov	r2,r7
    5790:	f800283a 	ret

00005794 <memcpy>:
    5794:	01c003c4 	movi	r7,15
    5798:	2007883a 	mov	r3,r4
    579c:	3980032e 	bgeu	r7,r6,57ac <memcpy+0x18>
    57a0:	2904b03a 	or	r2,r5,r4
    57a4:	108000cc 	andi	r2,r2,3
    57a8:	10000926 	beq	r2,zero,57d0 <memcpy+0x3c>
    57ac:	30000626 	beq	r6,zero,57c8 <memcpy+0x34>
    57b0:	30cd883a 	add	r6,r6,r3
    57b4:	28800003 	ldbu	r2,0(r5)
    57b8:	29400044 	addi	r5,r5,1
    57bc:	18800005 	stb	r2,0(r3)
    57c0:	18c00044 	addi	r3,r3,1
    57c4:	30fffb1e 	bne	r6,r3,57b4 <memcpy+0x20>
    57c8:	2005883a 	mov	r2,r4
    57cc:	f800283a 	ret
    57d0:	3811883a 	mov	r8,r7
    57d4:	200f883a 	mov	r7,r4
    57d8:	28c00017 	ldw	r3,0(r5)
    57dc:	31bffc04 	addi	r6,r6,-16
    57e0:	38c00015 	stw	r3,0(r7)
    57e4:	28800117 	ldw	r2,4(r5)
    57e8:	38800115 	stw	r2,4(r7)
    57ec:	28c00217 	ldw	r3,8(r5)
    57f0:	38c00215 	stw	r3,8(r7)
    57f4:	28800317 	ldw	r2,12(r5)
    57f8:	29400404 	addi	r5,r5,16
    57fc:	38800315 	stw	r2,12(r7)
    5800:	39c00404 	addi	r7,r7,16
    5804:	41bff436 	bltu	r8,r6,57d8 <memcpy+0x44>
    5808:	008000c4 	movi	r2,3
    580c:	1180072e 	bgeu	r2,r6,582c <memcpy+0x98>
    5810:	1007883a 	mov	r3,r2
    5814:	28800017 	ldw	r2,0(r5)
    5818:	31bfff04 	addi	r6,r6,-4
    581c:	29400104 	addi	r5,r5,4
    5820:	38800015 	stw	r2,0(r7)
    5824:	39c00104 	addi	r7,r7,4
    5828:	19bffa36 	bltu	r3,r6,5814 <memcpy+0x80>
    582c:	3807883a 	mov	r3,r7
    5830:	003fde06 	br	57ac <memcpy+0x18>

00005834 <memmove>:
    5834:	2807883a 	mov	r3,r5
    5838:	2011883a 	mov	r8,r4
    583c:	29000c2e 	bgeu	r5,r4,5870 <memmove+0x3c>
    5840:	298f883a 	add	r7,r5,r6
    5844:	21c00a2e 	bgeu	r4,r7,5870 <memmove+0x3c>
    5848:	30000726 	beq	r6,zero,5868 <memmove+0x34>
    584c:	2187883a 	add	r3,r4,r6
    5850:	198dc83a 	sub	r6,r3,r6
    5854:	39ffffc4 	addi	r7,r7,-1
    5858:	38800003 	ldbu	r2,0(r7)
    585c:	18ffffc4 	addi	r3,r3,-1
    5860:	18800005 	stb	r2,0(r3)
    5864:	19bffb1e 	bne	r3,r6,5854 <memmove+0x20>
    5868:	2005883a 	mov	r2,r4
    586c:	f800283a 	ret
    5870:	01c003c4 	movi	r7,15
    5874:	39800a36 	bltu	r7,r6,58a0 <memmove+0x6c>
    5878:	303ffb26 	beq	r6,zero,5868 <memmove+0x34>
    587c:	400f883a 	mov	r7,r8
    5880:	320d883a 	add	r6,r6,r8
    5884:	28800003 	ldbu	r2,0(r5)
    5888:	29400044 	addi	r5,r5,1
    588c:	38800005 	stb	r2,0(r7)
    5890:	39c00044 	addi	r7,r7,1
    5894:	39bffb1e 	bne	r7,r6,5884 <memmove+0x50>
    5898:	2005883a 	mov	r2,r4
    589c:	f800283a 	ret
    58a0:	1904b03a 	or	r2,r3,r4
    58a4:	108000cc 	andi	r2,r2,3
    58a8:	103ff31e 	bne	r2,zero,5878 <memmove+0x44>
    58ac:	3811883a 	mov	r8,r7
    58b0:	180b883a 	mov	r5,r3
    58b4:	200f883a 	mov	r7,r4
    58b8:	28c00017 	ldw	r3,0(r5)
    58bc:	31bffc04 	addi	r6,r6,-16
    58c0:	38c00015 	stw	r3,0(r7)
    58c4:	28800117 	ldw	r2,4(r5)
    58c8:	38800115 	stw	r2,4(r7)
    58cc:	28c00217 	ldw	r3,8(r5)
    58d0:	38c00215 	stw	r3,8(r7)
    58d4:	28800317 	ldw	r2,12(r5)
    58d8:	29400404 	addi	r5,r5,16
    58dc:	38800315 	stw	r2,12(r7)
    58e0:	39c00404 	addi	r7,r7,16
    58e4:	41bff436 	bltu	r8,r6,58b8 <memmove+0x84>
    58e8:	008000c4 	movi	r2,3
    58ec:	1180072e 	bgeu	r2,r6,590c <memmove+0xd8>
    58f0:	1007883a 	mov	r3,r2
    58f4:	28800017 	ldw	r2,0(r5)
    58f8:	31bfff04 	addi	r6,r6,-4
    58fc:	29400104 	addi	r5,r5,4
    5900:	38800015 	stw	r2,0(r7)
    5904:	39c00104 	addi	r7,r7,4
    5908:	19bffa36 	bltu	r3,r6,58f4 <memmove+0xc0>
    590c:	3811883a 	mov	r8,r7
    5910:	003fd906 	br	5878 <memmove+0x44>

00005914 <memset>:
    5914:	008000c4 	movi	r2,3
    5918:	29403fcc 	andi	r5,r5,255
    591c:	2007883a 	mov	r3,r4
    5920:	1180022e 	bgeu	r2,r6,592c <memset+0x18>
    5924:	2084703a 	and	r2,r4,r2
    5928:	10000826 	beq	r2,zero,594c <memset+0x38>
    592c:	30000526 	beq	r6,zero,5944 <memset+0x30>
    5930:	2805883a 	mov	r2,r5
    5934:	30cd883a 	add	r6,r6,r3
    5938:	18800005 	stb	r2,0(r3)
    593c:	18c00044 	addi	r3,r3,1
    5940:	19bffd1e 	bne	r3,r6,5938 <memset+0x24>
    5944:	2005883a 	mov	r2,r4
    5948:	f800283a 	ret
    594c:	2804923a 	slli	r2,r5,8
    5950:	020003c4 	movi	r8,15
    5954:	200f883a 	mov	r7,r4
    5958:	2884b03a 	or	r2,r5,r2
    595c:	1006943a 	slli	r3,r2,16
    5960:	10c6b03a 	or	r3,r2,r3
    5964:	41800a2e 	bgeu	r8,r6,5990 <memset+0x7c>
    5968:	4005883a 	mov	r2,r8
    596c:	31bffc04 	addi	r6,r6,-16
    5970:	38c00015 	stw	r3,0(r7)
    5974:	38c00115 	stw	r3,4(r7)
    5978:	38c00215 	stw	r3,8(r7)
    597c:	38c00315 	stw	r3,12(r7)
    5980:	39c00404 	addi	r7,r7,16
    5984:	11bff936 	bltu	r2,r6,596c <memset+0x58>
    5988:	008000c4 	movi	r2,3
    598c:	1180052e 	bgeu	r2,r6,59a4 <memset+0x90>
    5990:	31bfff04 	addi	r6,r6,-4
    5994:	008000c4 	movi	r2,3
    5998:	38c00015 	stw	r3,0(r7)
    599c:	39c00104 	addi	r7,r7,4
    59a0:	11bffb36 	bltu	r2,r6,5990 <memset+0x7c>
    59a4:	3807883a 	mov	r3,r7
    59a8:	003fe006 	br	592c <memset+0x18>

000059ac <_Bfree>:
    59ac:	28000826 	beq	r5,zero,59d0 <_Bfree+0x24>
    59b0:	28800117 	ldw	r2,4(r5)
    59b4:	21001317 	ldw	r4,76(r4)
    59b8:	1085883a 	add	r2,r2,r2
    59bc:	1085883a 	add	r2,r2,r2
    59c0:	1105883a 	add	r2,r2,r4
    59c4:	10c00017 	ldw	r3,0(r2)
    59c8:	28c00015 	stw	r3,0(r5)
    59cc:	11400015 	stw	r5,0(r2)
    59d0:	f800283a 	ret

000059d4 <__hi0bits>:
    59d4:	20bfffec 	andhi	r2,r4,65535
    59d8:	10001426 	beq	r2,zero,5a2c <__hi0bits+0x58>
    59dc:	0007883a 	mov	r3,zero
    59e0:	20bfc02c 	andhi	r2,r4,65280
    59e4:	1000021e 	bne	r2,zero,59f0 <__hi0bits+0x1c>
    59e8:	2008923a 	slli	r4,r4,8
    59ec:	18c00204 	addi	r3,r3,8
    59f0:	20bc002c 	andhi	r2,r4,61440
    59f4:	1000021e 	bne	r2,zero,5a00 <__hi0bits+0x2c>
    59f8:	2008913a 	slli	r4,r4,4
    59fc:	18c00104 	addi	r3,r3,4
    5a00:	20b0002c 	andhi	r2,r4,49152
    5a04:	1000031e 	bne	r2,zero,5a14 <__hi0bits+0x40>
    5a08:	2105883a 	add	r2,r4,r4
    5a0c:	18c00084 	addi	r3,r3,2
    5a10:	1089883a 	add	r4,r2,r2
    5a14:	20000316 	blt	r4,zero,5a24 <__hi0bits+0x50>
    5a18:	2090002c 	andhi	r2,r4,16384
    5a1c:	10000626 	beq	r2,zero,5a38 <__hi0bits+0x64>
    5a20:	18c00044 	addi	r3,r3,1
    5a24:	1805883a 	mov	r2,r3
    5a28:	f800283a 	ret
    5a2c:	2008943a 	slli	r4,r4,16
    5a30:	00c00404 	movi	r3,16
    5a34:	003fea06 	br	59e0 <__hi0bits+0xc>
    5a38:	00c00804 	movi	r3,32
    5a3c:	1805883a 	mov	r2,r3
    5a40:	f800283a 	ret

00005a44 <__lo0bits>:
    5a44:	20c00017 	ldw	r3,0(r4)
    5a48:	188001cc 	andi	r2,r3,7
    5a4c:	10000a26 	beq	r2,zero,5a78 <__lo0bits+0x34>
    5a50:	1880004c 	andi	r2,r3,1
    5a54:	1005003a 	cmpeq	r2,r2,zero
    5a58:	10002126 	beq	r2,zero,5ae0 <__lo0bits+0x9c>
    5a5c:	1880008c 	andi	r2,r3,2
    5a60:	1000251e 	bne	r2,zero,5af8 <__lo0bits+0xb4>
    5a64:	1804d0ba 	srli	r2,r3,2
    5a68:	01400084 	movi	r5,2
    5a6c:	20800015 	stw	r2,0(r4)
    5a70:	2805883a 	mov	r2,r5
    5a74:	f800283a 	ret
    5a78:	18bfffcc 	andi	r2,r3,65535
    5a7c:	10001526 	beq	r2,zero,5ad4 <__lo0bits+0x90>
    5a80:	000b883a 	mov	r5,zero
    5a84:	18803fcc 	andi	r2,r3,255
    5a88:	1000021e 	bne	r2,zero,5a94 <__lo0bits+0x50>
    5a8c:	1806d23a 	srli	r3,r3,8
    5a90:	29400204 	addi	r5,r5,8
    5a94:	188003cc 	andi	r2,r3,15
    5a98:	1000021e 	bne	r2,zero,5aa4 <__lo0bits+0x60>
    5a9c:	1806d13a 	srli	r3,r3,4
    5aa0:	29400104 	addi	r5,r5,4
    5aa4:	188000cc 	andi	r2,r3,3
    5aa8:	1000021e 	bne	r2,zero,5ab4 <__lo0bits+0x70>
    5aac:	1806d0ba 	srli	r3,r3,2
    5ab0:	29400084 	addi	r5,r5,2
    5ab4:	1880004c 	andi	r2,r3,1
    5ab8:	1000031e 	bne	r2,zero,5ac8 <__lo0bits+0x84>
    5abc:	1806d07a 	srli	r3,r3,1
    5ac0:	18000a26 	beq	r3,zero,5aec <__lo0bits+0xa8>
    5ac4:	29400044 	addi	r5,r5,1
    5ac8:	2805883a 	mov	r2,r5
    5acc:	20c00015 	stw	r3,0(r4)
    5ad0:	f800283a 	ret
    5ad4:	1806d43a 	srli	r3,r3,16
    5ad8:	01400404 	movi	r5,16
    5adc:	003fe906 	br	5a84 <__lo0bits+0x40>
    5ae0:	000b883a 	mov	r5,zero
    5ae4:	2805883a 	mov	r2,r5
    5ae8:	f800283a 	ret
    5aec:	01400804 	movi	r5,32
    5af0:	2805883a 	mov	r2,r5
    5af4:	f800283a 	ret
    5af8:	1804d07a 	srli	r2,r3,1
    5afc:	01400044 	movi	r5,1
    5b00:	20800015 	stw	r2,0(r4)
    5b04:	003fda06 	br	5a70 <__lo0bits+0x2c>

00005b08 <__mcmp>:
    5b08:	20800417 	ldw	r2,16(r4)
    5b0c:	28c00417 	ldw	r3,16(r5)
    5b10:	10cfc83a 	sub	r7,r2,r3
    5b14:	38000c1e 	bne	r7,zero,5b48 <__mcmp+0x40>
    5b18:	18c5883a 	add	r2,r3,r3
    5b1c:	1085883a 	add	r2,r2,r2
    5b20:	10c00504 	addi	r3,r2,20
    5b24:	21000504 	addi	r4,r4,20
    5b28:	28cb883a 	add	r5,r5,r3
    5b2c:	2085883a 	add	r2,r4,r2
    5b30:	10bfff04 	addi	r2,r2,-4
    5b34:	297fff04 	addi	r5,r5,-4
    5b38:	11800017 	ldw	r6,0(r2)
    5b3c:	28c00017 	ldw	r3,0(r5)
    5b40:	30c0031e 	bne	r6,r3,5b50 <__mcmp+0x48>
    5b44:	20bffa36 	bltu	r4,r2,5b30 <__mcmp+0x28>
    5b48:	3805883a 	mov	r2,r7
    5b4c:	f800283a 	ret
    5b50:	30c00336 	bltu	r6,r3,5b60 <__mcmp+0x58>
    5b54:	01c00044 	movi	r7,1
    5b58:	3805883a 	mov	r2,r7
    5b5c:	f800283a 	ret
    5b60:	01ffffc4 	movi	r7,-1
    5b64:	003ff806 	br	5b48 <__mcmp+0x40>

00005b68 <__ulp>:
    5b68:	295ffc2c 	andhi	r5,r5,32752
    5b6c:	013f3034 	movhi	r4,64704
    5b70:	290b883a 	add	r5,r5,r4
    5b74:	0145c83a 	sub	r2,zero,r5
    5b78:	1007d53a 	srai	r3,r2,20
    5b7c:	000d883a 	mov	r6,zero
    5b80:	0140040e 	bge	zero,r5,5b94 <__ulp+0x2c>
    5b84:	280f883a 	mov	r7,r5
    5b88:	3807883a 	mov	r3,r7
    5b8c:	3005883a 	mov	r2,r6
    5b90:	f800283a 	ret
    5b94:	008004c4 	movi	r2,19
    5b98:	193ffb04 	addi	r4,r3,-20
    5b9c:	10c00c0e 	bge	r2,r3,5bd0 <__ulp+0x68>
    5ba0:	008007c4 	movi	r2,31
    5ba4:	1107c83a 	sub	r3,r2,r4
    5ba8:	00800784 	movi	r2,30
    5bac:	01400044 	movi	r5,1
    5bb0:	11000216 	blt	r2,r4,5bbc <__ulp+0x54>
    5bb4:	00800044 	movi	r2,1
    5bb8:	10ca983a 	sll	r5,r2,r3
    5bbc:	000f883a 	mov	r7,zero
    5bc0:	280d883a 	mov	r6,r5
    5bc4:	3807883a 	mov	r3,r7
    5bc8:	3005883a 	mov	r2,r6
    5bcc:	f800283a 	ret
    5bd0:	00800234 	movhi	r2,8
    5bd4:	10cfd83a 	sra	r7,r2,r3
    5bd8:	000d883a 	mov	r6,zero
    5bdc:	3005883a 	mov	r2,r6
    5be0:	3807883a 	mov	r3,r7
    5be4:	f800283a 	ret

00005be8 <__b2d>:
    5be8:	20800417 	ldw	r2,16(r4)
    5bec:	defff904 	addi	sp,sp,-28
    5bf0:	dd000415 	stw	r20,16(sp)
    5bf4:	1085883a 	add	r2,r2,r2
    5bf8:	25000504 	addi	r20,r4,20
    5bfc:	1085883a 	add	r2,r2,r2
    5c00:	dc000015 	stw	r16,0(sp)
    5c04:	a0a1883a 	add	r16,r20,r2
    5c08:	dd400515 	stw	r21,20(sp)
    5c0c:	857fff17 	ldw	r21,-4(r16)
    5c10:	dc400115 	stw	r17,4(sp)
    5c14:	dfc00615 	stw	ra,24(sp)
    5c18:	a809883a 	mov	r4,r21
    5c1c:	2823883a 	mov	r17,r5
    5c20:	dcc00315 	stw	r19,12(sp)
    5c24:	dc800215 	stw	r18,8(sp)
    5c28:	00059d40 	call	59d4 <__hi0bits>
    5c2c:	100b883a 	mov	r5,r2
    5c30:	00800804 	movi	r2,32
    5c34:	1145c83a 	sub	r2,r2,r5
    5c38:	88800015 	stw	r2,0(r17)
    5c3c:	00800284 	movi	r2,10
    5c40:	80ffff04 	addi	r3,r16,-4
    5c44:	11401416 	blt	r2,r5,5c98 <__b2d+0xb0>
    5c48:	008002c4 	movi	r2,11
    5c4c:	1149c83a 	sub	r4,r2,r5
    5c50:	a0c02736 	bltu	r20,r3,5cf0 <__b2d+0x108>
    5c54:	000d883a 	mov	r6,zero
    5c58:	28800544 	addi	r2,r5,21
    5c5c:	a906d83a 	srl	r3,r21,r4
    5c60:	a884983a 	sll	r2,r21,r2
    5c64:	1ccffc34 	orhi	r19,r3,16368
    5c68:	11a4b03a 	or	r18,r2,r6
    5c6c:	9005883a 	mov	r2,r18
    5c70:	9807883a 	mov	r3,r19
    5c74:	dfc00617 	ldw	ra,24(sp)
    5c78:	dd400517 	ldw	r21,20(sp)
    5c7c:	dd000417 	ldw	r20,16(sp)
    5c80:	dcc00317 	ldw	r19,12(sp)
    5c84:	dc800217 	ldw	r18,8(sp)
    5c88:	dc400117 	ldw	r17,4(sp)
    5c8c:	dc000017 	ldw	r16,0(sp)
    5c90:	dec00704 	addi	sp,sp,28
    5c94:	f800283a 	ret
    5c98:	a0c00e36 	bltu	r20,r3,5cd4 <__b2d+0xec>
    5c9c:	293ffd44 	addi	r4,r5,-11
    5ca0:	000d883a 	mov	r6,zero
    5ca4:	20000f26 	beq	r4,zero,5ce4 <__b2d+0xfc>
    5ca8:	00800804 	movi	r2,32
    5cac:	110bc83a 	sub	r5,r2,r4
    5cb0:	a0c01236 	bltu	r20,r3,5cfc <__b2d+0x114>
    5cb4:	000f883a 	mov	r7,zero
    5cb8:	a904983a 	sll	r2,r21,r4
    5cbc:	3146d83a 	srl	r3,r6,r5
    5cc0:	3108983a 	sll	r4,r6,r4
    5cc4:	108ffc34 	orhi	r2,r2,16368
    5cc8:	18a6b03a 	or	r19,r3,r2
    5ccc:	3924b03a 	or	r18,r7,r4
    5cd0:	003fe606 	br	5c6c <__b2d+0x84>
    5cd4:	293ffd44 	addi	r4,r5,-11
    5cd8:	81bffe17 	ldw	r6,-8(r16)
    5cdc:	80fffe04 	addi	r3,r16,-8
    5ce0:	203ff11e 	bne	r4,zero,5ca8 <__b2d+0xc0>
    5ce4:	accffc34 	orhi	r19,r21,16368
    5ce8:	3025883a 	mov	r18,r6
    5cec:	003fdf06 	br	5c6c <__b2d+0x84>
    5cf0:	18bfff17 	ldw	r2,-4(r3)
    5cf4:	110cd83a 	srl	r6,r2,r4
    5cf8:	003fd706 	br	5c58 <__b2d+0x70>
    5cfc:	18bfff17 	ldw	r2,-4(r3)
    5d00:	114ed83a 	srl	r7,r2,r5
    5d04:	003fec06 	br	5cb8 <__b2d+0xd0>

00005d08 <__ratio>:
    5d08:	defff904 	addi	sp,sp,-28
    5d0c:	dc400215 	stw	r17,8(sp)
    5d10:	2823883a 	mov	r17,r5
    5d14:	d80b883a 	mov	r5,sp
    5d18:	dfc00615 	stw	ra,24(sp)
    5d1c:	dd000515 	stw	r20,20(sp)
    5d20:	dcc00415 	stw	r19,16(sp)
    5d24:	dc800315 	stw	r18,12(sp)
    5d28:	2025883a 	mov	r18,r4
    5d2c:	0005be80 	call	5be8 <__b2d>
    5d30:	8809883a 	mov	r4,r17
    5d34:	d9400104 	addi	r5,sp,4
    5d38:	1027883a 	mov	r19,r2
    5d3c:	1829883a 	mov	r20,r3
    5d40:	0005be80 	call	5be8 <__b2d>
    5d44:	89000417 	ldw	r4,16(r17)
    5d48:	91c00417 	ldw	r7,16(r18)
    5d4c:	d9800117 	ldw	r6,4(sp)
    5d50:	180b883a 	mov	r5,r3
    5d54:	390fc83a 	sub	r7,r7,r4
    5d58:	1009883a 	mov	r4,r2
    5d5c:	d8800017 	ldw	r2,0(sp)
    5d60:	380e917a 	slli	r7,r7,5
    5d64:	2011883a 	mov	r8,r4
    5d68:	1185c83a 	sub	r2,r2,r6
    5d6c:	11c5883a 	add	r2,r2,r7
    5d70:	1006953a 	slli	r3,r2,20
    5d74:	2813883a 	mov	r9,r5
    5d78:	00800d0e 	bge	zero,r2,5db0 <__ratio+0xa8>
    5d7c:	1d29883a 	add	r20,r3,r20
    5d80:	a00b883a 	mov	r5,r20
    5d84:	480f883a 	mov	r7,r9
    5d88:	9809883a 	mov	r4,r19
    5d8c:	400d883a 	mov	r6,r8
    5d90:	0008bd80 	call	8bd8 <__divdf3>
    5d94:	dfc00617 	ldw	ra,24(sp)
    5d98:	dd000517 	ldw	r20,20(sp)
    5d9c:	dcc00417 	ldw	r19,16(sp)
    5da0:	dc800317 	ldw	r18,12(sp)
    5da4:	dc400217 	ldw	r17,8(sp)
    5da8:	dec00704 	addi	sp,sp,28
    5dac:	f800283a 	ret
    5db0:	28d3c83a 	sub	r9,r5,r3
    5db4:	003ff206 	br	5d80 <__ratio+0x78>

00005db8 <_mprec_log10>:
    5db8:	defffe04 	addi	sp,sp,-8
    5dbc:	008005c4 	movi	r2,23
    5dc0:	dc000015 	stw	r16,0(sp)
    5dc4:	dfc00115 	stw	ra,4(sp)
    5dc8:	2021883a 	mov	r16,r4
    5dcc:	11000c16 	blt	r2,r4,5e00 <_mprec_log10+0x48>
    5dd0:	200490fa 	slli	r2,r4,3
    5dd4:	00c00074 	movhi	r3,1
    5dd8:	18f1d104 	addi	r3,r3,-14524
    5ddc:	10c5883a 	add	r2,r2,r3
    5de0:	12400117 	ldw	r9,4(r2)
    5de4:	12000017 	ldw	r8,0(r2)
    5de8:	4807883a 	mov	r3,r9
    5dec:	4005883a 	mov	r2,r8
    5df0:	dfc00117 	ldw	ra,4(sp)
    5df4:	dc000017 	ldw	r16,0(sp)
    5df8:	dec00204 	addi	sp,sp,8
    5dfc:	f800283a 	ret
    5e00:	0011883a 	mov	r8,zero
    5e04:	024ffc34 	movhi	r9,16368
    5e08:	0005883a 	mov	r2,zero
    5e0c:	00d00934 	movhi	r3,16420
    5e10:	480b883a 	mov	r5,r9
    5e14:	4009883a 	mov	r4,r8
    5e18:	180f883a 	mov	r7,r3
    5e1c:	100d883a 	mov	r6,r2
    5e20:	00088140 	call	8814 <__muldf3>
    5e24:	843fffc4 	addi	r16,r16,-1
    5e28:	1011883a 	mov	r8,r2
    5e2c:	1813883a 	mov	r9,r3
    5e30:	803ff51e 	bne	r16,zero,5e08 <_mprec_log10+0x50>
    5e34:	4005883a 	mov	r2,r8
    5e38:	4807883a 	mov	r3,r9
    5e3c:	dfc00117 	ldw	ra,4(sp)
    5e40:	dc000017 	ldw	r16,0(sp)
    5e44:	dec00204 	addi	sp,sp,8
    5e48:	f800283a 	ret

00005e4c <__copybits>:
    5e4c:	297fffc4 	addi	r5,r5,-1
    5e50:	30800417 	ldw	r2,16(r6)
    5e54:	280bd17a 	srai	r5,r5,5
    5e58:	31800504 	addi	r6,r6,20
    5e5c:	1085883a 	add	r2,r2,r2
    5e60:	294b883a 	add	r5,r5,r5
    5e64:	294b883a 	add	r5,r5,r5
    5e68:	1085883a 	add	r2,r2,r2
    5e6c:	290b883a 	add	r5,r5,r4
    5e70:	3087883a 	add	r3,r6,r2
    5e74:	29400104 	addi	r5,r5,4
    5e78:	30c0052e 	bgeu	r6,r3,5e90 <__copybits+0x44>
    5e7c:	30800017 	ldw	r2,0(r6)
    5e80:	31800104 	addi	r6,r6,4
    5e84:	20800015 	stw	r2,0(r4)
    5e88:	21000104 	addi	r4,r4,4
    5e8c:	30fffb36 	bltu	r6,r3,5e7c <__copybits+0x30>
    5e90:	2140032e 	bgeu	r4,r5,5ea0 <__copybits+0x54>
    5e94:	20000015 	stw	zero,0(r4)
    5e98:	21000104 	addi	r4,r4,4
    5e9c:	217ffd36 	bltu	r4,r5,5e94 <__copybits+0x48>
    5ea0:	f800283a 	ret

00005ea4 <__any_on>:
    5ea4:	20800417 	ldw	r2,16(r4)
    5ea8:	2807d17a 	srai	r3,r5,5
    5eac:	21000504 	addi	r4,r4,20
    5eb0:	10c00d0e 	bge	r2,r3,5ee8 <__any_on+0x44>
    5eb4:	1085883a 	add	r2,r2,r2
    5eb8:	1085883a 	add	r2,r2,r2
    5ebc:	208d883a 	add	r6,r4,r2
    5ec0:	2180182e 	bgeu	r4,r6,5f24 <__any_on+0x80>
    5ec4:	30bfff17 	ldw	r2,-4(r6)
    5ec8:	30ffff04 	addi	r3,r6,-4
    5ecc:	1000041e 	bne	r2,zero,5ee0 <__any_on+0x3c>
    5ed0:	20c0142e 	bgeu	r4,r3,5f24 <__any_on+0x80>
    5ed4:	18ffff04 	addi	r3,r3,-4
    5ed8:	18800017 	ldw	r2,0(r3)
    5edc:	103ffc26 	beq	r2,zero,5ed0 <__any_on+0x2c>
    5ee0:	00800044 	movi	r2,1
    5ee4:	f800283a 	ret
    5ee8:	18800a0e 	bge	r3,r2,5f14 <__any_on+0x70>
    5eec:	294007cc 	andi	r5,r5,31
    5ef0:	28000826 	beq	r5,zero,5f14 <__any_on+0x70>
    5ef4:	18c5883a 	add	r2,r3,r3
    5ef8:	1085883a 	add	r2,r2,r2
    5efc:	208d883a 	add	r6,r4,r2
    5f00:	30c00017 	ldw	r3,0(r6)
    5f04:	1944d83a 	srl	r2,r3,r5
    5f08:	1144983a 	sll	r2,r2,r5
    5f0c:	18bff41e 	bne	r3,r2,5ee0 <__any_on+0x3c>
    5f10:	003feb06 	br	5ec0 <__any_on+0x1c>
    5f14:	18c5883a 	add	r2,r3,r3
    5f18:	1085883a 	add	r2,r2,r2
    5f1c:	208d883a 	add	r6,r4,r2
    5f20:	003fe706 	br	5ec0 <__any_on+0x1c>
    5f24:	0005883a 	mov	r2,zero
    5f28:	f800283a 	ret

00005f2c <_Balloc>:
    5f2c:	20c01317 	ldw	r3,76(r4)
    5f30:	defffb04 	addi	sp,sp,-20
    5f34:	dcc00315 	stw	r19,12(sp)
    5f38:	dc800215 	stw	r18,8(sp)
    5f3c:	dfc00415 	stw	ra,16(sp)
    5f40:	2825883a 	mov	r18,r5
    5f44:	dc400115 	stw	r17,4(sp)
    5f48:	dc000015 	stw	r16,0(sp)
    5f4c:	2027883a 	mov	r19,r4
    5f50:	01800404 	movi	r6,16
    5f54:	01400104 	movi	r5,4
    5f58:	18001726 	beq	r3,zero,5fb8 <_Balloc+0x8c>
    5f5c:	01400044 	movi	r5,1
    5f60:	9485883a 	add	r2,r18,r18
    5f64:	2ca2983a 	sll	r17,r5,r18
    5f68:	1085883a 	add	r2,r2,r2
    5f6c:	10c7883a 	add	r3,r2,r3
    5f70:	1c000017 	ldw	r16,0(r3)
    5f74:	8c4d883a 	add	r6,r17,r17
    5f78:	318d883a 	add	r6,r6,r6
    5f7c:	9809883a 	mov	r4,r19
    5f80:	31800504 	addi	r6,r6,20
    5f84:	80001226 	beq	r16,zero,5fd0 <_Balloc+0xa4>
    5f88:	80800017 	ldw	r2,0(r16)
    5f8c:	18800015 	stw	r2,0(r3)
    5f90:	80000415 	stw	zero,16(r16)
    5f94:	80000315 	stw	zero,12(r16)
    5f98:	8005883a 	mov	r2,r16
    5f9c:	dfc00417 	ldw	ra,16(sp)
    5fa0:	dcc00317 	ldw	r19,12(sp)
    5fa4:	dc800217 	ldw	r18,8(sp)
    5fa8:	dc400117 	ldw	r17,4(sp)
    5fac:	dc000017 	ldw	r16,0(sp)
    5fb0:	dec00504 	addi	sp,sp,20
    5fb4:	f800283a 	ret
    5fb8:	00073680 	call	7368 <_calloc_r>
    5fbc:	1007883a 	mov	r3,r2
    5fc0:	0021883a 	mov	r16,zero
    5fc4:	98801315 	stw	r2,76(r19)
    5fc8:	103fe41e 	bne	r2,zero,5f5c <_Balloc+0x30>
    5fcc:	003ff206 	br	5f98 <_Balloc+0x6c>
    5fd0:	00073680 	call	7368 <_calloc_r>
    5fd4:	103ff026 	beq	r2,zero,5f98 <_Balloc+0x6c>
    5fd8:	1021883a 	mov	r16,r2
    5fdc:	14800115 	stw	r18,4(r2)
    5fe0:	14400215 	stw	r17,8(r2)
    5fe4:	003fea06 	br	5f90 <_Balloc+0x64>

00005fe8 <__d2b>:
    5fe8:	defff504 	addi	sp,sp,-44
    5fec:	dcc00515 	stw	r19,20(sp)
    5ff0:	04c00044 	movi	r19,1
    5ff4:	dc000215 	stw	r16,8(sp)
    5ff8:	2821883a 	mov	r16,r5
    5ffc:	980b883a 	mov	r5,r19
    6000:	ddc00915 	stw	r23,36(sp)
    6004:	dd800815 	stw	r22,32(sp)
    6008:	dd400715 	stw	r21,28(sp)
    600c:	dd000615 	stw	r20,24(sp)
    6010:	dc800415 	stw	r18,16(sp)
    6014:	dc400315 	stw	r17,12(sp)
    6018:	dfc00a15 	stw	ra,40(sp)
    601c:	3023883a 	mov	r17,r6
    6020:	382d883a 	mov	r22,r7
    6024:	ddc00b17 	ldw	r23,44(sp)
    6028:	0005f2c0 	call	5f2c <_Balloc>
    602c:	1025883a 	mov	r18,r2
    6030:	00a00034 	movhi	r2,32768
    6034:	10bfffc4 	addi	r2,r2,-1
    6038:	8888703a 	and	r4,r17,r2
    603c:	202ad53a 	srli	r21,r4,20
    6040:	00800434 	movhi	r2,16
    6044:	10bfffc4 	addi	r2,r2,-1
    6048:	8886703a 	and	r3,r17,r2
    604c:	a829003a 	cmpeq	r20,r21,zero
    6050:	800b883a 	mov	r5,r16
    6054:	d8c00115 	stw	r3,4(sp)
    6058:	94000504 	addi	r16,r18,20
    605c:	a000021e 	bne	r20,zero,6068 <__d2b+0x80>
    6060:	18c00434 	orhi	r3,r3,16
    6064:	d8c00115 	stw	r3,4(sp)
    6068:	28002726 	beq	r5,zero,6108 <__d2b+0x120>
    606c:	d809883a 	mov	r4,sp
    6070:	d9400015 	stw	r5,0(sp)
    6074:	0005a440 	call	5a44 <__lo0bits>
    6078:	100d883a 	mov	r6,r2
    607c:	10003526 	beq	r2,zero,6154 <__d2b+0x16c>
    6080:	d8c00117 	ldw	r3,4(sp)
    6084:	00800804 	movi	r2,32
    6088:	1185c83a 	sub	r2,r2,r6
    608c:	d9000017 	ldw	r4,0(sp)
    6090:	1886983a 	sll	r3,r3,r2
    6094:	1906b03a 	or	r3,r3,r4
    6098:	90c00515 	stw	r3,20(r18)
    609c:	d8c00117 	ldw	r3,4(sp)
    60a0:	1986d83a 	srl	r3,r3,r6
    60a4:	d8c00115 	stw	r3,4(sp)
    60a8:	180b003a 	cmpeq	r5,r3,zero
    60ac:	00800084 	movi	r2,2
    60b0:	114bc83a 	sub	r5,r2,r5
    60b4:	80c00115 	stw	r3,4(r16)
    60b8:	91400415 	stw	r5,16(r18)
    60bc:	a0001a1e 	bne	r20,zero,6128 <__d2b+0x140>
    60c0:	3545883a 	add	r2,r6,r21
    60c4:	10bef344 	addi	r2,r2,-1075
    60c8:	00c00d44 	movi	r3,53
    60cc:	b0800015 	stw	r2,0(r22)
    60d0:	1987c83a 	sub	r3,r3,r6
    60d4:	b8c00015 	stw	r3,0(r23)
    60d8:	9005883a 	mov	r2,r18
    60dc:	dfc00a17 	ldw	ra,40(sp)
    60e0:	ddc00917 	ldw	r23,36(sp)
    60e4:	dd800817 	ldw	r22,32(sp)
    60e8:	dd400717 	ldw	r21,28(sp)
    60ec:	dd000617 	ldw	r20,24(sp)
    60f0:	dcc00517 	ldw	r19,20(sp)
    60f4:	dc800417 	ldw	r18,16(sp)
    60f8:	dc400317 	ldw	r17,12(sp)
    60fc:	dc000217 	ldw	r16,8(sp)
    6100:	dec00b04 	addi	sp,sp,44
    6104:	f800283a 	ret
    6108:	d9000104 	addi	r4,sp,4
    610c:	0005a440 	call	5a44 <__lo0bits>
    6110:	11800804 	addi	r6,r2,32
    6114:	d8800117 	ldw	r2,4(sp)
    6118:	94c00415 	stw	r19,16(r18)
    611c:	980b883a 	mov	r5,r19
    6120:	90800515 	stw	r2,20(r18)
    6124:	a03fe626 	beq	r20,zero,60c0 <__d2b+0xd8>
    6128:	2945883a 	add	r2,r5,r5
    612c:	1085883a 	add	r2,r2,r2
    6130:	1405883a 	add	r2,r2,r16
    6134:	113fff17 	ldw	r4,-4(r2)
    6138:	30fef384 	addi	r3,r6,-1074
    613c:	2820917a 	slli	r16,r5,5
    6140:	b0c00015 	stw	r3,0(r22)
    6144:	00059d40 	call	59d4 <__hi0bits>
    6148:	80a1c83a 	sub	r16,r16,r2
    614c:	bc000015 	stw	r16,0(r23)
    6150:	003fe106 	br	60d8 <__d2b+0xf0>
    6154:	d8800017 	ldw	r2,0(sp)
    6158:	90800515 	stw	r2,20(r18)
    615c:	d8c00117 	ldw	r3,4(sp)
    6160:	003fd106 	br	60a8 <__d2b+0xc0>

00006164 <__mdiff>:
    6164:	defffb04 	addi	sp,sp,-20
    6168:	dc000015 	stw	r16,0(sp)
    616c:	2821883a 	mov	r16,r5
    6170:	dc800215 	stw	r18,8(sp)
    6174:	300b883a 	mov	r5,r6
    6178:	2025883a 	mov	r18,r4
    617c:	8009883a 	mov	r4,r16
    6180:	dc400115 	stw	r17,4(sp)
    6184:	dfc00415 	stw	ra,16(sp)
    6188:	dcc00315 	stw	r19,12(sp)
    618c:	3023883a 	mov	r17,r6
    6190:	0005b080 	call	5b08 <__mcmp>
    6194:	10004226 	beq	r2,zero,62a0 <__mdiff+0x13c>
    6198:	10005016 	blt	r2,zero,62dc <__mdiff+0x178>
    619c:	0027883a 	mov	r19,zero
    61a0:	81400117 	ldw	r5,4(r16)
    61a4:	9009883a 	mov	r4,r18
    61a8:	0005f2c0 	call	5f2c <_Balloc>
    61ac:	1019883a 	mov	r12,r2
    61b0:	82800417 	ldw	r10,16(r16)
    61b4:	88800417 	ldw	r2,16(r17)
    61b8:	81800504 	addi	r6,r16,20
    61bc:	5287883a 	add	r3,r10,r10
    61c0:	1085883a 	add	r2,r2,r2
    61c4:	18c7883a 	add	r3,r3,r3
    61c8:	1085883a 	add	r2,r2,r2
    61cc:	8a000504 	addi	r8,r17,20
    61d0:	64c00315 	stw	r19,12(r12)
    61d4:	30db883a 	add	r13,r6,r3
    61d8:	4097883a 	add	r11,r8,r2
    61dc:	61c00504 	addi	r7,r12,20
    61e0:	0013883a 	mov	r9,zero
    61e4:	31000017 	ldw	r4,0(r6)
    61e8:	41400017 	ldw	r5,0(r8)
    61ec:	42000104 	addi	r8,r8,4
    61f0:	20bfffcc 	andi	r2,r4,65535
    61f4:	28ffffcc 	andi	r3,r5,65535
    61f8:	10c5c83a 	sub	r2,r2,r3
    61fc:	1245883a 	add	r2,r2,r9
    6200:	2008d43a 	srli	r4,r4,16
    6204:	280ad43a 	srli	r5,r5,16
    6208:	1007d43a 	srai	r3,r2,16
    620c:	3880000d 	sth	r2,0(r7)
    6210:	2149c83a 	sub	r4,r4,r5
    6214:	20c9883a 	add	r4,r4,r3
    6218:	3900008d 	sth	r4,2(r7)
    621c:	31800104 	addi	r6,r6,4
    6220:	39c00104 	addi	r7,r7,4
    6224:	2013d43a 	srai	r9,r4,16
    6228:	42ffee36 	bltu	r8,r11,61e4 <__mdiff+0x80>
    622c:	33400c2e 	bgeu	r6,r13,6260 <__mdiff+0xfc>
    6230:	30800017 	ldw	r2,0(r6)
    6234:	31800104 	addi	r6,r6,4
    6238:	10ffffcc 	andi	r3,r2,65535
    623c:	1a47883a 	add	r3,r3,r9
    6240:	1004d43a 	srli	r2,r2,16
    6244:	1809d43a 	srai	r4,r3,16
    6248:	38c0000d 	sth	r3,0(r7)
    624c:	1105883a 	add	r2,r2,r4
    6250:	3880008d 	sth	r2,2(r7)
    6254:	1013d43a 	srai	r9,r2,16
    6258:	39c00104 	addi	r7,r7,4
    625c:	337ff436 	bltu	r6,r13,6230 <__mdiff+0xcc>
    6260:	38bfff17 	ldw	r2,-4(r7)
    6264:	38ffff04 	addi	r3,r7,-4
    6268:	1000041e 	bne	r2,zero,627c <__mdiff+0x118>
    626c:	18ffff04 	addi	r3,r3,-4
    6270:	18800017 	ldw	r2,0(r3)
    6274:	52bfffc4 	addi	r10,r10,-1
    6278:	103ffc26 	beq	r2,zero,626c <__mdiff+0x108>
    627c:	6005883a 	mov	r2,r12
    6280:	62800415 	stw	r10,16(r12)
    6284:	dfc00417 	ldw	ra,16(sp)
    6288:	dcc00317 	ldw	r19,12(sp)
    628c:	dc800217 	ldw	r18,8(sp)
    6290:	dc400117 	ldw	r17,4(sp)
    6294:	dc000017 	ldw	r16,0(sp)
    6298:	dec00504 	addi	sp,sp,20
    629c:	f800283a 	ret
    62a0:	9009883a 	mov	r4,r18
    62a4:	000b883a 	mov	r5,zero
    62a8:	0005f2c0 	call	5f2c <_Balloc>
    62ac:	1019883a 	mov	r12,r2
    62b0:	00800044 	movi	r2,1
    62b4:	60800415 	stw	r2,16(r12)
    62b8:	6005883a 	mov	r2,r12
    62bc:	60000515 	stw	zero,20(r12)
    62c0:	dfc00417 	ldw	ra,16(sp)
    62c4:	dcc00317 	ldw	r19,12(sp)
    62c8:	dc800217 	ldw	r18,8(sp)
    62cc:	dc400117 	ldw	r17,4(sp)
    62d0:	dc000017 	ldw	r16,0(sp)
    62d4:	dec00504 	addi	sp,sp,20
    62d8:	f800283a 	ret
    62dc:	880d883a 	mov	r6,r17
    62e0:	04c00044 	movi	r19,1
    62e4:	8023883a 	mov	r17,r16
    62e8:	3021883a 	mov	r16,r6
    62ec:	003fac06 	br	61a0 <__mdiff+0x3c>

000062f0 <__lshift>:
    62f0:	defff904 	addi	sp,sp,-28
    62f4:	28800417 	ldw	r2,16(r5)
    62f8:	dc000015 	stw	r16,0(sp)
    62fc:	3021d17a 	srai	r16,r6,5
    6300:	28c00217 	ldw	r3,8(r5)
    6304:	10800044 	addi	r2,r2,1
    6308:	dc400115 	stw	r17,4(sp)
    630c:	80a3883a 	add	r17,r16,r2
    6310:	dd400515 	stw	r21,20(sp)
    6314:	dd000415 	stw	r20,16(sp)
    6318:	dc800215 	stw	r18,8(sp)
    631c:	dfc00615 	stw	ra,24(sp)
    6320:	2825883a 	mov	r18,r5
    6324:	dcc00315 	stw	r19,12(sp)
    6328:	3029883a 	mov	r20,r6
    632c:	202b883a 	mov	r21,r4
    6330:	29400117 	ldw	r5,4(r5)
    6334:	1c40030e 	bge	r3,r17,6344 <__lshift+0x54>
    6338:	18c7883a 	add	r3,r3,r3
    633c:	29400044 	addi	r5,r5,1
    6340:	1c7ffd16 	blt	r3,r17,6338 <__lshift+0x48>
    6344:	a809883a 	mov	r4,r21
    6348:	0005f2c0 	call	5f2c <_Balloc>
    634c:	1027883a 	mov	r19,r2
    6350:	11400504 	addi	r5,r2,20
    6354:	0400090e 	bge	zero,r16,637c <__lshift+0x8c>
    6358:	2805883a 	mov	r2,r5
    635c:	0007883a 	mov	r3,zero
    6360:	18c00044 	addi	r3,r3,1
    6364:	10000015 	stw	zero,0(r2)
    6368:	10800104 	addi	r2,r2,4
    636c:	80fffc1e 	bne	r16,r3,6360 <__lshift+0x70>
    6370:	8405883a 	add	r2,r16,r16
    6374:	1085883a 	add	r2,r2,r2
    6378:	288b883a 	add	r5,r5,r2
    637c:	90800417 	ldw	r2,16(r18)
    6380:	91000504 	addi	r4,r18,20
    6384:	a18007cc 	andi	r6,r20,31
    6388:	1085883a 	add	r2,r2,r2
    638c:	1085883a 	add	r2,r2,r2
    6390:	208f883a 	add	r7,r4,r2
    6394:	30001e26 	beq	r6,zero,6410 <__lshift+0x120>
    6398:	00800804 	movi	r2,32
    639c:	1191c83a 	sub	r8,r2,r6
    63a0:	0007883a 	mov	r3,zero
    63a4:	20800017 	ldw	r2,0(r4)
    63a8:	1184983a 	sll	r2,r2,r6
    63ac:	1884b03a 	or	r2,r3,r2
    63b0:	28800015 	stw	r2,0(r5)
    63b4:	20c00017 	ldw	r3,0(r4)
    63b8:	21000104 	addi	r4,r4,4
    63bc:	29400104 	addi	r5,r5,4
    63c0:	1a06d83a 	srl	r3,r3,r8
    63c4:	21fff736 	bltu	r4,r7,63a4 <__lshift+0xb4>
    63c8:	28c00015 	stw	r3,0(r5)
    63cc:	18000126 	beq	r3,zero,63d4 <__lshift+0xe4>
    63d0:	8c400044 	addi	r17,r17,1
    63d4:	88bfffc4 	addi	r2,r17,-1
    63d8:	98800415 	stw	r2,16(r19)
    63dc:	a809883a 	mov	r4,r21
    63e0:	900b883a 	mov	r5,r18
    63e4:	00059ac0 	call	59ac <_Bfree>
    63e8:	9805883a 	mov	r2,r19
    63ec:	dfc00617 	ldw	ra,24(sp)
    63f0:	dd400517 	ldw	r21,20(sp)
    63f4:	dd000417 	ldw	r20,16(sp)
    63f8:	dcc00317 	ldw	r19,12(sp)
    63fc:	dc800217 	ldw	r18,8(sp)
    6400:	dc400117 	ldw	r17,4(sp)
    6404:	dc000017 	ldw	r16,0(sp)
    6408:	dec00704 	addi	sp,sp,28
    640c:	f800283a 	ret
    6410:	20800017 	ldw	r2,0(r4)
    6414:	21000104 	addi	r4,r4,4
    6418:	28800015 	stw	r2,0(r5)
    641c:	29400104 	addi	r5,r5,4
    6420:	21ffec2e 	bgeu	r4,r7,63d4 <__lshift+0xe4>
    6424:	20800017 	ldw	r2,0(r4)
    6428:	21000104 	addi	r4,r4,4
    642c:	28800015 	stw	r2,0(r5)
    6430:	29400104 	addi	r5,r5,4
    6434:	21fff636 	bltu	r4,r7,6410 <__lshift+0x120>
    6438:	003fe606 	br	63d4 <__lshift+0xe4>

0000643c <__multiply>:
    643c:	defff904 	addi	sp,sp,-28
    6440:	dcc00315 	stw	r19,12(sp)
    6444:	dc800215 	stw	r18,8(sp)
    6448:	2cc00417 	ldw	r19,16(r5)
    644c:	34800417 	ldw	r18,16(r6)
    6450:	dd000415 	stw	r20,16(sp)
    6454:	dc400115 	stw	r17,4(sp)
    6458:	dfc00615 	stw	ra,24(sp)
    645c:	dd400515 	stw	r21,20(sp)
    6460:	dc000015 	stw	r16,0(sp)
    6464:	2823883a 	mov	r17,r5
    6468:	3029883a 	mov	r20,r6
    646c:	9c80040e 	bge	r19,r18,6480 <__multiply+0x44>
    6470:	9027883a 	mov	r19,r18
    6474:	2c800417 	ldw	r18,16(r5)
    6478:	2829883a 	mov	r20,r5
    647c:	3023883a 	mov	r17,r6
    6480:	88800217 	ldw	r2,8(r17)
    6484:	9ca1883a 	add	r16,r19,r18
    6488:	89400117 	ldw	r5,4(r17)
    648c:	1400010e 	bge	r2,r16,6494 <__multiply+0x58>
    6490:	29400044 	addi	r5,r5,1
    6494:	0005f2c0 	call	5f2c <_Balloc>
    6498:	102b883a 	mov	r21,r2
    649c:	8405883a 	add	r2,r16,r16
    64a0:	1085883a 	add	r2,r2,r2
    64a4:	a9000504 	addi	r4,r21,20
    64a8:	209d883a 	add	r14,r4,r2
    64ac:	2380042e 	bgeu	r4,r14,64c0 <__multiply+0x84>
    64b0:	2005883a 	mov	r2,r4
    64b4:	10000015 	stw	zero,0(r2)
    64b8:	10800104 	addi	r2,r2,4
    64bc:	13bffd36 	bltu	r2,r14,64b4 <__multiply+0x78>
    64c0:	9485883a 	add	r2,r18,r18
    64c4:	9cc7883a 	add	r3,r19,r19
    64c8:	a1800504 	addi	r6,r20,20
    64cc:	1085883a 	add	r2,r2,r2
    64d0:	8b400504 	addi	r13,r17,20
    64d4:	18c7883a 	add	r3,r3,r3
    64d8:	309f883a 	add	r15,r6,r2
    64dc:	68d7883a 	add	r11,r13,r3
    64e0:	33c03b2e 	bgeu	r6,r15,65d0 <__multiply+0x194>
    64e4:	2019883a 	mov	r12,r4
    64e8:	30800017 	ldw	r2,0(r6)
    64ec:	127fffcc 	andi	r9,r2,65535
    64f0:	48001826 	beq	r9,zero,6554 <__multiply+0x118>
    64f4:	6811883a 	mov	r8,r13
    64f8:	600f883a 	mov	r7,r12
    64fc:	0015883a 	mov	r10,zero
    6500:	40c00017 	ldw	r3,0(r8)
    6504:	39400017 	ldw	r5,0(r7)
    6508:	42000104 	addi	r8,r8,4
    650c:	193fffcc 	andi	r4,r3,65535
    6510:	4909383a 	mul	r4,r9,r4
    6514:	1806d43a 	srli	r3,r3,16
    6518:	28bfffcc 	andi	r2,r5,65535
    651c:	5085883a 	add	r2,r10,r2
    6520:	2089883a 	add	r4,r4,r2
    6524:	48c7383a 	mul	r3,r9,r3
    6528:	280ad43a 	srli	r5,r5,16
    652c:	2004d43a 	srli	r2,r4,16
    6530:	3900000d 	sth	r4,0(r7)
    6534:	1947883a 	add	r3,r3,r5
    6538:	10c5883a 	add	r2,r2,r3
    653c:	3880008d 	sth	r2,2(r7)
    6540:	1014d43a 	srli	r10,r2,16
    6544:	39c00104 	addi	r7,r7,4
    6548:	42ffed36 	bltu	r8,r11,6500 <__multiply+0xc4>
    654c:	3a800015 	stw	r10,0(r7)
    6550:	30800017 	ldw	r2,0(r6)
    6554:	1012d43a 	srli	r9,r2,16
    6558:	48001926 	beq	r9,zero,65c0 <__multiply+0x184>
    655c:	60800017 	ldw	r2,0(r12)
    6560:	6811883a 	mov	r8,r13
    6564:	600f883a 	mov	r7,r12
    6568:	0015883a 	mov	r10,zero
    656c:	100b883a 	mov	r5,r2
    6570:	41000017 	ldw	r4,0(r8)
    6574:	2806d43a 	srli	r3,r5,16
    6578:	3880000d 	sth	r2,0(r7)
    657c:	20bfffcc 	andi	r2,r4,65535
    6580:	4885383a 	mul	r2,r9,r2
    6584:	50c7883a 	add	r3,r10,r3
    6588:	2008d43a 	srli	r4,r4,16
    658c:	10c5883a 	add	r2,r2,r3
    6590:	3880008d 	sth	r2,2(r7)
    6594:	39c00104 	addi	r7,r7,4
    6598:	39400017 	ldw	r5,0(r7)
    659c:	4909383a 	mul	r4,r9,r4
    65a0:	1004d43a 	srli	r2,r2,16
    65a4:	28ffffcc 	andi	r3,r5,65535
    65a8:	20c9883a 	add	r4,r4,r3
    65ac:	1105883a 	add	r2,r2,r4
    65b0:	42000104 	addi	r8,r8,4
    65b4:	1014d43a 	srli	r10,r2,16
    65b8:	42ffed36 	bltu	r8,r11,6570 <__multiply+0x134>
    65bc:	38800015 	stw	r2,0(r7)
    65c0:	31800104 	addi	r6,r6,4
    65c4:	33c0022e 	bgeu	r6,r15,65d0 <__multiply+0x194>
    65c8:	63000104 	addi	r12,r12,4
    65cc:	003fc606 	br	64e8 <__multiply+0xac>
    65d0:	0400090e 	bge	zero,r16,65f8 <__multiply+0x1bc>
    65d4:	70bfff17 	ldw	r2,-4(r14)
    65d8:	70ffff04 	addi	r3,r14,-4
    65dc:	10000326 	beq	r2,zero,65ec <__multiply+0x1b0>
    65e0:	00000506 	br	65f8 <__multiply+0x1bc>
    65e4:	18800017 	ldw	r2,0(r3)
    65e8:	1000031e 	bne	r2,zero,65f8 <__multiply+0x1bc>
    65ec:	843fffc4 	addi	r16,r16,-1
    65f0:	18ffff04 	addi	r3,r3,-4
    65f4:	803ffb1e 	bne	r16,zero,65e4 <__multiply+0x1a8>
    65f8:	a805883a 	mov	r2,r21
    65fc:	ac000415 	stw	r16,16(r21)
    6600:	dfc00617 	ldw	ra,24(sp)
    6604:	dd400517 	ldw	r21,20(sp)
    6608:	dd000417 	ldw	r20,16(sp)
    660c:	dcc00317 	ldw	r19,12(sp)
    6610:	dc800217 	ldw	r18,8(sp)
    6614:	dc400117 	ldw	r17,4(sp)
    6618:	dc000017 	ldw	r16,0(sp)
    661c:	dec00704 	addi	sp,sp,28
    6620:	f800283a 	ret

00006624 <__i2b>:
    6624:	defffd04 	addi	sp,sp,-12
    6628:	dc000015 	stw	r16,0(sp)
    662c:	04000044 	movi	r16,1
    6630:	dc800115 	stw	r18,4(sp)
    6634:	2825883a 	mov	r18,r5
    6638:	800b883a 	mov	r5,r16
    663c:	dfc00215 	stw	ra,8(sp)
    6640:	0005f2c0 	call	5f2c <_Balloc>
    6644:	14000415 	stw	r16,16(r2)
    6648:	14800515 	stw	r18,20(r2)
    664c:	dfc00217 	ldw	ra,8(sp)
    6650:	dc800117 	ldw	r18,4(sp)
    6654:	dc000017 	ldw	r16,0(sp)
    6658:	dec00304 	addi	sp,sp,12
    665c:	f800283a 	ret

00006660 <__multadd>:
    6660:	defffa04 	addi	sp,sp,-24
    6664:	dc800215 	stw	r18,8(sp)
    6668:	2c800417 	ldw	r18,16(r5)
    666c:	dd000415 	stw	r20,16(sp)
    6670:	dcc00315 	stw	r19,12(sp)
    6674:	dc000015 	stw	r16,0(sp)
    6678:	dfc00515 	stw	ra,20(sp)
    667c:	3821883a 	mov	r16,r7
    6680:	dc400115 	stw	r17,4(sp)
    6684:	2827883a 	mov	r19,r5
    6688:	2029883a 	mov	r20,r4
    668c:	2a000504 	addi	r8,r5,20
    6690:	000f883a 	mov	r7,zero
    6694:	40800017 	ldw	r2,0(r8)
    6698:	39c00044 	addi	r7,r7,1
    669c:	10ffffcc 	andi	r3,r2,65535
    66a0:	1987383a 	mul	r3,r3,r6
    66a4:	1004d43a 	srli	r2,r2,16
    66a8:	1c07883a 	add	r3,r3,r16
    66ac:	180ad43a 	srli	r5,r3,16
    66b0:	1185383a 	mul	r2,r2,r6
    66b4:	18ffffcc 	andi	r3,r3,65535
    66b8:	1145883a 	add	r2,r2,r5
    66bc:	1008943a 	slli	r4,r2,16
    66c0:	1020d43a 	srli	r16,r2,16
    66c4:	20c9883a 	add	r4,r4,r3
    66c8:	41000015 	stw	r4,0(r8)
    66cc:	42000104 	addi	r8,r8,4
    66d0:	3cbff016 	blt	r7,r18,6694 <__multadd+0x34>
    66d4:	80000826 	beq	r16,zero,66f8 <__multadd+0x98>
    66d8:	98800217 	ldw	r2,8(r19)
    66dc:	90800f0e 	bge	r18,r2,671c <__multadd+0xbc>
    66e0:	9485883a 	add	r2,r18,r18
    66e4:	1085883a 	add	r2,r2,r2
    66e8:	14c5883a 	add	r2,r2,r19
    66ec:	90c00044 	addi	r3,r18,1
    66f0:	14000515 	stw	r16,20(r2)
    66f4:	98c00415 	stw	r3,16(r19)
    66f8:	9805883a 	mov	r2,r19
    66fc:	dfc00517 	ldw	ra,20(sp)
    6700:	dd000417 	ldw	r20,16(sp)
    6704:	dcc00317 	ldw	r19,12(sp)
    6708:	dc800217 	ldw	r18,8(sp)
    670c:	dc400117 	ldw	r17,4(sp)
    6710:	dc000017 	ldw	r16,0(sp)
    6714:	dec00604 	addi	sp,sp,24
    6718:	f800283a 	ret
    671c:	99400117 	ldw	r5,4(r19)
    6720:	a009883a 	mov	r4,r20
    6724:	29400044 	addi	r5,r5,1
    6728:	0005f2c0 	call	5f2c <_Balloc>
    672c:	99800417 	ldw	r6,16(r19)
    6730:	99400304 	addi	r5,r19,12
    6734:	11000304 	addi	r4,r2,12
    6738:	318d883a 	add	r6,r6,r6
    673c:	318d883a 	add	r6,r6,r6
    6740:	31800204 	addi	r6,r6,8
    6744:	1023883a 	mov	r17,r2
    6748:	00057940 	call	5794 <memcpy>
    674c:	980b883a 	mov	r5,r19
    6750:	a009883a 	mov	r4,r20
    6754:	00059ac0 	call	59ac <_Bfree>
    6758:	8827883a 	mov	r19,r17
    675c:	003fe006 	br	66e0 <__multadd+0x80>

00006760 <__pow5mult>:
    6760:	defffa04 	addi	sp,sp,-24
    6764:	308000cc 	andi	r2,r6,3
    6768:	dd000415 	stw	r20,16(sp)
    676c:	dcc00315 	stw	r19,12(sp)
    6770:	dc000015 	stw	r16,0(sp)
    6774:	dfc00515 	stw	ra,20(sp)
    6778:	dc800215 	stw	r18,8(sp)
    677c:	dc400115 	stw	r17,4(sp)
    6780:	3021883a 	mov	r16,r6
    6784:	2027883a 	mov	r19,r4
    6788:	2829883a 	mov	r20,r5
    678c:	10002b1e 	bne	r2,zero,683c <__pow5mult+0xdc>
    6790:	8025d0ba 	srai	r18,r16,2
    6794:	90001b26 	beq	r18,zero,6804 <__pow5mult+0xa4>
    6798:	9c001217 	ldw	r16,72(r19)
    679c:	8000081e 	bne	r16,zero,67c0 <__pow5mult+0x60>
    67a0:	00003006 	br	6864 <__pow5mult+0x104>
    67a4:	800b883a 	mov	r5,r16
    67a8:	800d883a 	mov	r6,r16
    67ac:	9809883a 	mov	r4,r19
    67b0:	90001426 	beq	r18,zero,6804 <__pow5mult+0xa4>
    67b4:	80800017 	ldw	r2,0(r16)
    67b8:	10001b26 	beq	r2,zero,6828 <__pow5mult+0xc8>
    67bc:	1021883a 	mov	r16,r2
    67c0:	9080004c 	andi	r2,r18,1
    67c4:	1005003a 	cmpeq	r2,r2,zero
    67c8:	9025d07a 	srai	r18,r18,1
    67cc:	800d883a 	mov	r6,r16
    67d0:	9809883a 	mov	r4,r19
    67d4:	a00b883a 	mov	r5,r20
    67d8:	103ff21e 	bne	r2,zero,67a4 <__pow5mult+0x44>
    67dc:	000643c0 	call	643c <__multiply>
    67e0:	a00b883a 	mov	r5,r20
    67e4:	9809883a 	mov	r4,r19
    67e8:	1023883a 	mov	r17,r2
    67ec:	00059ac0 	call	59ac <_Bfree>
    67f0:	8829883a 	mov	r20,r17
    67f4:	800b883a 	mov	r5,r16
    67f8:	800d883a 	mov	r6,r16
    67fc:	9809883a 	mov	r4,r19
    6800:	903fec1e 	bne	r18,zero,67b4 <__pow5mult+0x54>
    6804:	a005883a 	mov	r2,r20
    6808:	dfc00517 	ldw	ra,20(sp)
    680c:	dd000417 	ldw	r20,16(sp)
    6810:	dcc00317 	ldw	r19,12(sp)
    6814:	dc800217 	ldw	r18,8(sp)
    6818:	dc400117 	ldw	r17,4(sp)
    681c:	dc000017 	ldw	r16,0(sp)
    6820:	dec00604 	addi	sp,sp,24
    6824:	f800283a 	ret
    6828:	000643c0 	call	643c <__multiply>
    682c:	80800015 	stw	r2,0(r16)
    6830:	1021883a 	mov	r16,r2
    6834:	10000015 	stw	zero,0(r2)
    6838:	003fe106 	br	67c0 <__pow5mult+0x60>
    683c:	1085883a 	add	r2,r2,r2
    6840:	00c00074 	movhi	r3,1
    6844:	18f21704 	addi	r3,r3,-14244
    6848:	1085883a 	add	r2,r2,r2
    684c:	10c5883a 	add	r2,r2,r3
    6850:	11bfff17 	ldw	r6,-4(r2)
    6854:	000f883a 	mov	r7,zero
    6858:	00066600 	call	6660 <__multadd>
    685c:	1029883a 	mov	r20,r2
    6860:	003fcb06 	br	6790 <__pow5mult+0x30>
    6864:	9809883a 	mov	r4,r19
    6868:	01409c44 	movi	r5,625
    686c:	00066240 	call	6624 <__i2b>
    6870:	98801215 	stw	r2,72(r19)
    6874:	1021883a 	mov	r16,r2
    6878:	10000015 	stw	zero,0(r2)
    687c:	003fd006 	br	67c0 <__pow5mult+0x60>

00006880 <__s2b>:
    6880:	defff904 	addi	sp,sp,-28
    6884:	dcc00315 	stw	r19,12(sp)
    6888:	dc800215 	stw	r18,8(sp)
    688c:	2827883a 	mov	r19,r5
    6890:	2025883a 	mov	r18,r4
    6894:	01400244 	movi	r5,9
    6898:	39000204 	addi	r4,r7,8
    689c:	dd000415 	stw	r20,16(sp)
    68a0:	dc400115 	stw	r17,4(sp)
    68a4:	dfc00615 	stw	ra,24(sp)
    68a8:	dd400515 	stw	r21,20(sp)
    68ac:	dc000015 	stw	r16,0(sp)
    68b0:	3829883a 	mov	r20,r7
    68b4:	3023883a 	mov	r17,r6
    68b8:	00094b80 	call	94b8 <__divsi3>
    68bc:	00c00044 	movi	r3,1
    68c0:	1880350e 	bge	r3,r2,6998 <__s2b+0x118>
    68c4:	000b883a 	mov	r5,zero
    68c8:	18c7883a 	add	r3,r3,r3
    68cc:	29400044 	addi	r5,r5,1
    68d0:	18bffd16 	blt	r3,r2,68c8 <__s2b+0x48>
    68d4:	9009883a 	mov	r4,r18
    68d8:	0005f2c0 	call	5f2c <_Balloc>
    68dc:	1011883a 	mov	r8,r2
    68e0:	d8800717 	ldw	r2,28(sp)
    68e4:	00c00044 	movi	r3,1
    68e8:	01800244 	movi	r6,9
    68ec:	40800515 	stw	r2,20(r8)
    68f0:	40c00415 	stw	r3,16(r8)
    68f4:	3440260e 	bge	r6,r17,6990 <__s2b+0x110>
    68f8:	3021883a 	mov	r16,r6
    68fc:	99ab883a 	add	r21,r19,r6
    6900:	9c05883a 	add	r2,r19,r16
    6904:	11c00007 	ldb	r7,0(r2)
    6908:	400b883a 	mov	r5,r8
    690c:	9009883a 	mov	r4,r18
    6910:	39fff404 	addi	r7,r7,-48
    6914:	01800284 	movi	r6,10
    6918:	00066600 	call	6660 <__multadd>
    691c:	84000044 	addi	r16,r16,1
    6920:	1011883a 	mov	r8,r2
    6924:	8c3ff61e 	bne	r17,r16,6900 <__s2b+0x80>
    6928:	ac45883a 	add	r2,r21,r17
    692c:	117ffe04 	addi	r5,r2,-8
    6930:	880d883a 	mov	r6,r17
    6934:	35000c0e 	bge	r6,r20,6968 <__s2b+0xe8>
    6938:	a185c83a 	sub	r2,r20,r6
    693c:	2821883a 	mov	r16,r5
    6940:	28a3883a 	add	r17,r5,r2
    6944:	81c00007 	ldb	r7,0(r16)
    6948:	400b883a 	mov	r5,r8
    694c:	9009883a 	mov	r4,r18
    6950:	39fff404 	addi	r7,r7,-48
    6954:	01800284 	movi	r6,10
    6958:	00066600 	call	6660 <__multadd>
    695c:	84000044 	addi	r16,r16,1
    6960:	1011883a 	mov	r8,r2
    6964:	847ff71e 	bne	r16,r17,6944 <__s2b+0xc4>
    6968:	4005883a 	mov	r2,r8
    696c:	dfc00617 	ldw	ra,24(sp)
    6970:	dd400517 	ldw	r21,20(sp)
    6974:	dd000417 	ldw	r20,16(sp)
    6978:	dcc00317 	ldw	r19,12(sp)
    697c:	dc800217 	ldw	r18,8(sp)
    6980:	dc400117 	ldw	r17,4(sp)
    6984:	dc000017 	ldw	r16,0(sp)
    6988:	dec00704 	addi	sp,sp,28
    698c:	f800283a 	ret
    6990:	99400284 	addi	r5,r19,10
    6994:	003fe706 	br	6934 <__s2b+0xb4>
    6998:	000b883a 	mov	r5,zero
    699c:	003fcd06 	br	68d4 <__s2b+0x54>

000069a0 <_realloc_r>:
    69a0:	defff404 	addi	sp,sp,-48
    69a4:	dd800815 	stw	r22,32(sp)
    69a8:	dc800415 	stw	r18,16(sp)
    69ac:	dc400315 	stw	r17,12(sp)
    69b0:	dfc00b15 	stw	ra,44(sp)
    69b4:	df000a15 	stw	fp,40(sp)
    69b8:	ddc00915 	stw	r23,36(sp)
    69bc:	dd400715 	stw	r21,28(sp)
    69c0:	dd000615 	stw	r20,24(sp)
    69c4:	dcc00515 	stw	r19,20(sp)
    69c8:	dc000215 	stw	r16,8(sp)
    69cc:	2825883a 	mov	r18,r5
    69d0:	3023883a 	mov	r17,r6
    69d4:	202d883a 	mov	r22,r4
    69d8:	2800c926 	beq	r5,zero,6d00 <_realloc_r+0x360>
    69dc:	000a2380 	call	a238 <__malloc_lock>
    69e0:	943ffe04 	addi	r16,r18,-8
    69e4:	88c002c4 	addi	r3,r17,11
    69e8:	00800584 	movi	r2,22
    69ec:	82000117 	ldw	r8,4(r16)
    69f0:	10c01b2e 	bgeu	r2,r3,6a60 <_realloc_r+0xc0>
    69f4:	00bffe04 	movi	r2,-8
    69f8:	188e703a 	and	r7,r3,r2
    69fc:	3839883a 	mov	fp,r7
    6a00:	38001a16 	blt	r7,zero,6a6c <_realloc_r+0xcc>
    6a04:	e4401936 	bltu	fp,r17,6a6c <_realloc_r+0xcc>
    6a08:	013fff04 	movi	r4,-4
    6a0c:	4126703a 	and	r19,r8,r4
    6a10:	99c02616 	blt	r19,r7,6aac <_realloc_r+0x10c>
    6a14:	802b883a 	mov	r21,r16
    6a18:	9829883a 	mov	r20,r19
    6a1c:	84000204 	addi	r16,r16,8
    6a20:	a80f883a 	mov	r7,r21
    6a24:	a70dc83a 	sub	r6,r20,fp
    6a28:	008003c4 	movi	r2,15
    6a2c:	1180c136 	bltu	r2,r6,6d34 <_realloc_r+0x394>
    6a30:	38800117 	ldw	r2,4(r7)
    6a34:	a549883a 	add	r4,r20,r21
    6a38:	1080004c 	andi	r2,r2,1
    6a3c:	a084b03a 	or	r2,r20,r2
    6a40:	38800115 	stw	r2,4(r7)
    6a44:	20c00117 	ldw	r3,4(r4)
    6a48:	18c00054 	ori	r3,r3,1
    6a4c:	20c00115 	stw	r3,4(r4)
    6a50:	b009883a 	mov	r4,r22
    6a54:	000a2580 	call	a258 <__malloc_unlock>
    6a58:	8023883a 	mov	r17,r16
    6a5c:	00000606 	br	6a78 <_realloc_r+0xd8>
    6a60:	01c00404 	movi	r7,16
    6a64:	3839883a 	mov	fp,r7
    6a68:	e47fe72e 	bgeu	fp,r17,6a08 <_realloc_r+0x68>
    6a6c:	00800304 	movi	r2,12
    6a70:	0023883a 	mov	r17,zero
    6a74:	b0800015 	stw	r2,0(r22)
    6a78:	8805883a 	mov	r2,r17
    6a7c:	dfc00b17 	ldw	ra,44(sp)
    6a80:	df000a17 	ldw	fp,40(sp)
    6a84:	ddc00917 	ldw	r23,36(sp)
    6a88:	dd800817 	ldw	r22,32(sp)
    6a8c:	dd400717 	ldw	r21,28(sp)
    6a90:	dd000617 	ldw	r20,24(sp)
    6a94:	dcc00517 	ldw	r19,20(sp)
    6a98:	dc800417 	ldw	r18,16(sp)
    6a9c:	dc400317 	ldw	r17,12(sp)
    6aa0:	dc000217 	ldw	r16,8(sp)
    6aa4:	dec00c04 	addi	sp,sp,48
    6aa8:	f800283a 	ret
    6aac:	00800074 	movhi	r2,1
    6ab0:	10b37904 	addi	r2,r2,-12828
    6ab4:	12400217 	ldw	r9,8(r2)
    6ab8:	84cd883a 	add	r6,r16,r19
    6abc:	802b883a 	mov	r21,r16
    6ac0:	3240b926 	beq	r6,r9,6da8 <_realloc_r+0x408>
    6ac4:	31400117 	ldw	r5,4(r6)
    6ac8:	00bfff84 	movi	r2,-2
    6acc:	2884703a 	and	r2,r5,r2
    6ad0:	1185883a 	add	r2,r2,r6
    6ad4:	10c00117 	ldw	r3,4(r2)
    6ad8:	18c0004c 	andi	r3,r3,1
    6adc:	1807003a 	cmpeq	r3,r3,zero
    6ae0:	1800a326 	beq	r3,zero,6d70 <_realloc_r+0x3d0>
    6ae4:	2908703a 	and	r4,r5,r4
    6ae8:	9929883a 	add	r20,r19,r4
    6aec:	a1c0a30e 	bge	r20,r7,6d7c <_realloc_r+0x3dc>
    6af0:	4080004c 	andi	r2,r8,1
    6af4:	1000551e 	bne	r2,zero,6c4c <_realloc_r+0x2ac>
    6af8:	80800017 	ldw	r2,0(r16)
    6afc:	80afc83a 	sub	r23,r16,r2
    6b00:	b8c00117 	ldw	r3,4(r23)
    6b04:	00bfff04 	movi	r2,-4
    6b08:	1884703a 	and	r2,r3,r2
    6b0c:	30002e26 	beq	r6,zero,6bc8 <_realloc_r+0x228>
    6b10:	3240b926 	beq	r6,r9,6df8 <_realloc_r+0x458>
    6b14:	98a9883a 	add	r20,r19,r2
    6b18:	2509883a 	add	r4,r4,r20
    6b1c:	d9000015 	stw	r4,0(sp)
    6b20:	21c02a16 	blt	r4,r7,6bcc <_realloc_r+0x22c>
    6b24:	30800317 	ldw	r2,12(r6)
    6b28:	30c00217 	ldw	r3,8(r6)
    6b2c:	01400904 	movi	r5,36
    6b30:	99bfff04 	addi	r6,r19,-4
    6b34:	18800315 	stw	r2,12(r3)
    6b38:	10c00215 	stw	r3,8(r2)
    6b3c:	b9000317 	ldw	r4,12(r23)
    6b40:	b8800217 	ldw	r2,8(r23)
    6b44:	b82b883a 	mov	r21,r23
    6b48:	bc000204 	addi	r16,r23,8
    6b4c:	20800215 	stw	r2,8(r4)
    6b50:	11000315 	stw	r4,12(r2)
    6b54:	2980e436 	bltu	r5,r6,6ee8 <_realloc_r+0x548>
    6b58:	008004c4 	movi	r2,19
    6b5c:	9009883a 	mov	r4,r18
    6b60:	8011883a 	mov	r8,r16
    6b64:	11800f2e 	bgeu	r2,r6,6ba4 <_realloc_r+0x204>
    6b68:	90800017 	ldw	r2,0(r18)
    6b6c:	ba000404 	addi	r8,r23,16
    6b70:	91000204 	addi	r4,r18,8
    6b74:	b8800215 	stw	r2,8(r23)
    6b78:	90c00117 	ldw	r3,4(r18)
    6b7c:	008006c4 	movi	r2,27
    6b80:	b8c00315 	stw	r3,12(r23)
    6b84:	1180072e 	bgeu	r2,r6,6ba4 <_realloc_r+0x204>
    6b88:	90c00217 	ldw	r3,8(r18)
    6b8c:	ba000604 	addi	r8,r23,24
    6b90:	91000404 	addi	r4,r18,16
    6b94:	b8c00415 	stw	r3,16(r23)
    6b98:	90800317 	ldw	r2,12(r18)
    6b9c:	b8800515 	stw	r2,20(r23)
    6ba0:	3140e726 	beq	r6,r5,6f40 <_realloc_r+0x5a0>
    6ba4:	20800017 	ldw	r2,0(r4)
    6ba8:	dd000017 	ldw	r20,0(sp)
    6bac:	b80f883a 	mov	r7,r23
    6bb0:	40800015 	stw	r2,0(r8)
    6bb4:	20c00117 	ldw	r3,4(r4)
    6bb8:	40c00115 	stw	r3,4(r8)
    6bbc:	20800217 	ldw	r2,8(r4)
    6bc0:	40800215 	stw	r2,8(r8)
    6bc4:	003f9706 	br	6a24 <_realloc_r+0x84>
    6bc8:	98a9883a 	add	r20,r19,r2
    6bcc:	a1c01f16 	blt	r20,r7,6c4c <_realloc_r+0x2ac>
    6bd0:	b8c00317 	ldw	r3,12(r23)
    6bd4:	b8800217 	ldw	r2,8(r23)
    6bd8:	99bfff04 	addi	r6,r19,-4
    6bdc:	01400904 	movi	r5,36
    6be0:	b82b883a 	mov	r21,r23
    6be4:	18800215 	stw	r2,8(r3)
    6be8:	10c00315 	stw	r3,12(r2)
    6bec:	bc000204 	addi	r16,r23,8
    6bf0:	2980c336 	bltu	r5,r6,6f00 <_realloc_r+0x560>
    6bf4:	008004c4 	movi	r2,19
    6bf8:	9009883a 	mov	r4,r18
    6bfc:	8011883a 	mov	r8,r16
    6c00:	11800f2e 	bgeu	r2,r6,6c40 <_realloc_r+0x2a0>
    6c04:	90800017 	ldw	r2,0(r18)
    6c08:	ba000404 	addi	r8,r23,16
    6c0c:	91000204 	addi	r4,r18,8
    6c10:	b8800215 	stw	r2,8(r23)
    6c14:	90c00117 	ldw	r3,4(r18)
    6c18:	008006c4 	movi	r2,27
    6c1c:	b8c00315 	stw	r3,12(r23)
    6c20:	1180072e 	bgeu	r2,r6,6c40 <_realloc_r+0x2a0>
    6c24:	90c00217 	ldw	r3,8(r18)
    6c28:	ba000604 	addi	r8,r23,24
    6c2c:	91000404 	addi	r4,r18,16
    6c30:	b8c00415 	stw	r3,16(r23)
    6c34:	90800317 	ldw	r2,12(r18)
    6c38:	b8800515 	stw	r2,20(r23)
    6c3c:	3140c726 	beq	r6,r5,6f5c <_realloc_r+0x5bc>
    6c40:	20800017 	ldw	r2,0(r4)
    6c44:	b80f883a 	mov	r7,r23
    6c48:	003fd906 	br	6bb0 <_realloc_r+0x210>
    6c4c:	880b883a 	mov	r5,r17
    6c50:	b009883a 	mov	r4,r22
    6c54:	0004f700 	call	4f70 <_malloc_r>
    6c58:	1023883a 	mov	r17,r2
    6c5c:	10002526 	beq	r2,zero,6cf4 <_realloc_r+0x354>
    6c60:	80800117 	ldw	r2,4(r16)
    6c64:	00ffff84 	movi	r3,-2
    6c68:	893ffe04 	addi	r4,r17,-8
    6c6c:	10c4703a 	and	r2,r2,r3
    6c70:	8085883a 	add	r2,r16,r2
    6c74:	20809526 	beq	r4,r2,6ecc <_realloc_r+0x52c>
    6c78:	99bfff04 	addi	r6,r19,-4
    6c7c:	01c00904 	movi	r7,36
    6c80:	39804536 	bltu	r7,r6,6d98 <_realloc_r+0x3f8>
    6c84:	008004c4 	movi	r2,19
    6c88:	9009883a 	mov	r4,r18
    6c8c:	880b883a 	mov	r5,r17
    6c90:	11800f2e 	bgeu	r2,r6,6cd0 <_realloc_r+0x330>
    6c94:	90800017 	ldw	r2,0(r18)
    6c98:	89400204 	addi	r5,r17,8
    6c9c:	91000204 	addi	r4,r18,8
    6ca0:	88800015 	stw	r2,0(r17)
    6ca4:	90c00117 	ldw	r3,4(r18)
    6ca8:	008006c4 	movi	r2,27
    6cac:	88c00115 	stw	r3,4(r17)
    6cb0:	1180072e 	bgeu	r2,r6,6cd0 <_realloc_r+0x330>
    6cb4:	90c00217 	ldw	r3,8(r18)
    6cb8:	89400404 	addi	r5,r17,16
    6cbc:	91000404 	addi	r4,r18,16
    6cc0:	88c00215 	stw	r3,8(r17)
    6cc4:	90800317 	ldw	r2,12(r18)
    6cc8:	88800315 	stw	r2,12(r17)
    6ccc:	31c09126 	beq	r6,r7,6f14 <_realloc_r+0x574>
    6cd0:	20800017 	ldw	r2,0(r4)
    6cd4:	28800015 	stw	r2,0(r5)
    6cd8:	20c00117 	ldw	r3,4(r4)
    6cdc:	28c00115 	stw	r3,4(r5)
    6ce0:	20800217 	ldw	r2,8(r4)
    6ce4:	28800215 	stw	r2,8(r5)
    6ce8:	900b883a 	mov	r5,r18
    6cec:	b009883a 	mov	r4,r22
    6cf0:	00043e80 	call	43e8 <_free_r>
    6cf4:	b009883a 	mov	r4,r22
    6cf8:	000a2580 	call	a258 <__malloc_unlock>
    6cfc:	003f5e06 	br	6a78 <_realloc_r+0xd8>
    6d00:	300b883a 	mov	r5,r6
    6d04:	dfc00b17 	ldw	ra,44(sp)
    6d08:	df000a17 	ldw	fp,40(sp)
    6d0c:	ddc00917 	ldw	r23,36(sp)
    6d10:	dd800817 	ldw	r22,32(sp)
    6d14:	dd400717 	ldw	r21,28(sp)
    6d18:	dd000617 	ldw	r20,24(sp)
    6d1c:	dcc00517 	ldw	r19,20(sp)
    6d20:	dc800417 	ldw	r18,16(sp)
    6d24:	dc400317 	ldw	r17,12(sp)
    6d28:	dc000217 	ldw	r16,8(sp)
    6d2c:	dec00c04 	addi	sp,sp,48
    6d30:	0004f701 	jmpi	4f70 <_malloc_r>
    6d34:	38800117 	ldw	r2,4(r7)
    6d38:	e54b883a 	add	r5,fp,r21
    6d3c:	31000054 	ori	r4,r6,1
    6d40:	1080004c 	andi	r2,r2,1
    6d44:	1704b03a 	or	r2,r2,fp
    6d48:	38800115 	stw	r2,4(r7)
    6d4c:	29000115 	stw	r4,4(r5)
    6d50:	2987883a 	add	r3,r5,r6
    6d54:	18800117 	ldw	r2,4(r3)
    6d58:	29400204 	addi	r5,r5,8
    6d5c:	b009883a 	mov	r4,r22
    6d60:	10800054 	ori	r2,r2,1
    6d64:	18800115 	stw	r2,4(r3)
    6d68:	00043e80 	call	43e8 <_free_r>
    6d6c:	003f3806 	br	6a50 <_realloc_r+0xb0>
    6d70:	000d883a 	mov	r6,zero
    6d74:	0009883a 	mov	r4,zero
    6d78:	003f5d06 	br	6af0 <_realloc_r+0x150>
    6d7c:	30c00217 	ldw	r3,8(r6)
    6d80:	30800317 	ldw	r2,12(r6)
    6d84:	800f883a 	mov	r7,r16
    6d88:	84000204 	addi	r16,r16,8
    6d8c:	10c00215 	stw	r3,8(r2)
    6d90:	18800315 	stw	r2,12(r3)
    6d94:	003f2306 	br	6a24 <_realloc_r+0x84>
    6d98:	8809883a 	mov	r4,r17
    6d9c:	900b883a 	mov	r5,r18
    6da0:	00058340 	call	5834 <memmove>
    6da4:	003fd006 	br	6ce8 <_realloc_r+0x348>
    6da8:	30800117 	ldw	r2,4(r6)
    6dac:	e0c00404 	addi	r3,fp,16
    6db0:	1108703a 	and	r4,r2,r4
    6db4:	9905883a 	add	r2,r19,r4
    6db8:	10ff4d16 	blt	r2,r3,6af0 <_realloc_r+0x150>
    6dbc:	1705c83a 	sub	r2,r2,fp
    6dc0:	870b883a 	add	r5,r16,fp
    6dc4:	10800054 	ori	r2,r2,1
    6dc8:	28800115 	stw	r2,4(r5)
    6dcc:	80c00117 	ldw	r3,4(r16)
    6dd0:	00800074 	movhi	r2,1
    6dd4:	10b37904 	addi	r2,r2,-12828
    6dd8:	b009883a 	mov	r4,r22
    6ddc:	18c0004c 	andi	r3,r3,1
    6de0:	e0c6b03a 	or	r3,fp,r3
    6de4:	11400215 	stw	r5,8(r2)
    6de8:	80c00115 	stw	r3,4(r16)
    6dec:	000a2580 	call	a258 <__malloc_unlock>
    6df0:	84400204 	addi	r17,r16,8
    6df4:	003f2006 	br	6a78 <_realloc_r+0xd8>
    6df8:	98a9883a 	add	r20,r19,r2
    6dfc:	2509883a 	add	r4,r4,r20
    6e00:	e0800404 	addi	r2,fp,16
    6e04:	d9000115 	stw	r4,4(sp)
    6e08:	20bf7016 	blt	r4,r2,6bcc <_realloc_r+0x22c>
    6e0c:	b8c00317 	ldw	r3,12(r23)
    6e10:	b8800217 	ldw	r2,8(r23)
    6e14:	99bfff04 	addi	r6,r19,-4
    6e18:	01400904 	movi	r5,36
    6e1c:	18800215 	stw	r2,8(r3)
    6e20:	10c00315 	stw	r3,12(r2)
    6e24:	bc400204 	addi	r17,r23,8
    6e28:	29804136 	bltu	r5,r6,6f30 <_realloc_r+0x590>
    6e2c:	008004c4 	movi	r2,19
    6e30:	9009883a 	mov	r4,r18
    6e34:	880f883a 	mov	r7,r17
    6e38:	11800f2e 	bgeu	r2,r6,6e78 <_realloc_r+0x4d8>
    6e3c:	90800017 	ldw	r2,0(r18)
    6e40:	b9c00404 	addi	r7,r23,16
    6e44:	91000204 	addi	r4,r18,8
    6e48:	b8800215 	stw	r2,8(r23)
    6e4c:	90c00117 	ldw	r3,4(r18)
    6e50:	008006c4 	movi	r2,27
    6e54:	b8c00315 	stw	r3,12(r23)
    6e58:	1180072e 	bgeu	r2,r6,6e78 <_realloc_r+0x4d8>
    6e5c:	90c00217 	ldw	r3,8(r18)
    6e60:	b9c00604 	addi	r7,r23,24
    6e64:	91000404 	addi	r4,r18,16
    6e68:	b8c00415 	stw	r3,16(r23)
    6e6c:	90800317 	ldw	r2,12(r18)
    6e70:	b8800515 	stw	r2,20(r23)
    6e74:	31404026 	beq	r6,r5,6f78 <_realloc_r+0x5d8>
    6e78:	20800017 	ldw	r2,0(r4)
    6e7c:	38800015 	stw	r2,0(r7)
    6e80:	20c00117 	ldw	r3,4(r4)
    6e84:	38c00115 	stw	r3,4(r7)
    6e88:	20800217 	ldw	r2,8(r4)
    6e8c:	38800215 	stw	r2,8(r7)
    6e90:	d8c00117 	ldw	r3,4(sp)
    6e94:	bf0b883a 	add	r5,r23,fp
    6e98:	b009883a 	mov	r4,r22
    6e9c:	1f05c83a 	sub	r2,r3,fp
    6ea0:	10800054 	ori	r2,r2,1
    6ea4:	28800115 	stw	r2,4(r5)
    6ea8:	b8c00117 	ldw	r3,4(r23)
    6eac:	00800074 	movhi	r2,1
    6eb0:	10b37904 	addi	r2,r2,-12828
    6eb4:	11400215 	stw	r5,8(r2)
    6eb8:	18c0004c 	andi	r3,r3,1
    6ebc:	e0c6b03a 	or	r3,fp,r3
    6ec0:	b8c00115 	stw	r3,4(r23)
    6ec4:	000a2580 	call	a258 <__malloc_unlock>
    6ec8:	003eeb06 	br	6a78 <_realloc_r+0xd8>
    6ecc:	20800117 	ldw	r2,4(r4)
    6ed0:	00ffff04 	movi	r3,-4
    6ed4:	800f883a 	mov	r7,r16
    6ed8:	10c4703a 	and	r2,r2,r3
    6edc:	98a9883a 	add	r20,r19,r2
    6ee0:	84000204 	addi	r16,r16,8
    6ee4:	003ecf06 	br	6a24 <_realloc_r+0x84>
    6ee8:	900b883a 	mov	r5,r18
    6eec:	8009883a 	mov	r4,r16
    6ef0:	00058340 	call	5834 <memmove>
    6ef4:	dd000017 	ldw	r20,0(sp)
    6ef8:	b80f883a 	mov	r7,r23
    6efc:	003ec906 	br	6a24 <_realloc_r+0x84>
    6f00:	900b883a 	mov	r5,r18
    6f04:	8009883a 	mov	r4,r16
    6f08:	00058340 	call	5834 <memmove>
    6f0c:	b80f883a 	mov	r7,r23
    6f10:	003ec406 	br	6a24 <_realloc_r+0x84>
    6f14:	90c00417 	ldw	r3,16(r18)
    6f18:	89400604 	addi	r5,r17,24
    6f1c:	91000604 	addi	r4,r18,24
    6f20:	88c00415 	stw	r3,16(r17)
    6f24:	90800517 	ldw	r2,20(r18)
    6f28:	88800515 	stw	r2,20(r17)
    6f2c:	003f6806 	br	6cd0 <_realloc_r+0x330>
    6f30:	900b883a 	mov	r5,r18
    6f34:	8809883a 	mov	r4,r17
    6f38:	00058340 	call	5834 <memmove>
    6f3c:	003fd406 	br	6e90 <_realloc_r+0x4f0>
    6f40:	90c00417 	ldw	r3,16(r18)
    6f44:	91000604 	addi	r4,r18,24
    6f48:	ba000804 	addi	r8,r23,32
    6f4c:	b8c00615 	stw	r3,24(r23)
    6f50:	90800517 	ldw	r2,20(r18)
    6f54:	b8800715 	stw	r2,28(r23)
    6f58:	003f1206 	br	6ba4 <_realloc_r+0x204>
    6f5c:	90c00417 	ldw	r3,16(r18)
    6f60:	91000604 	addi	r4,r18,24
    6f64:	ba000804 	addi	r8,r23,32
    6f68:	b8c00615 	stw	r3,24(r23)
    6f6c:	90800517 	ldw	r2,20(r18)
    6f70:	b8800715 	stw	r2,28(r23)
    6f74:	003f3206 	br	6c40 <_realloc_r+0x2a0>
    6f78:	90c00417 	ldw	r3,16(r18)
    6f7c:	91000604 	addi	r4,r18,24
    6f80:	b9c00804 	addi	r7,r23,32
    6f84:	b8c00615 	stw	r3,24(r23)
    6f88:	90800517 	ldw	r2,20(r18)
    6f8c:	b8800715 	stw	r2,28(r23)
    6f90:	003fb906 	br	6e78 <_realloc_r+0x4d8>

00006f94 <__isinfd>:
    6f94:	200d883a 	mov	r6,r4
    6f98:	0109c83a 	sub	r4,zero,r4
    6f9c:	2188b03a 	or	r4,r4,r6
    6fa0:	2008d7fa 	srli	r4,r4,31
    6fa4:	00a00034 	movhi	r2,32768
    6fa8:	10bfffc4 	addi	r2,r2,-1
    6fac:	1144703a 	and	r2,r2,r5
    6fb0:	2088b03a 	or	r4,r4,r2
    6fb4:	009ffc34 	movhi	r2,32752
    6fb8:	1105c83a 	sub	r2,r2,r4
    6fbc:	0087c83a 	sub	r3,zero,r2
    6fc0:	10c4b03a 	or	r2,r2,r3
    6fc4:	1004d7fa 	srli	r2,r2,31
    6fc8:	00c00044 	movi	r3,1
    6fcc:	1885c83a 	sub	r2,r3,r2
    6fd0:	f800283a 	ret

00006fd4 <__isnand>:
    6fd4:	200d883a 	mov	r6,r4
    6fd8:	0109c83a 	sub	r4,zero,r4
    6fdc:	2188b03a 	or	r4,r4,r6
    6fe0:	2008d7fa 	srli	r4,r4,31
    6fe4:	00a00034 	movhi	r2,32768
    6fe8:	10bfffc4 	addi	r2,r2,-1
    6fec:	1144703a 	and	r2,r2,r5
    6ff0:	2088b03a 	or	r4,r4,r2
    6ff4:	009ffc34 	movhi	r2,32752
    6ff8:	1105c83a 	sub	r2,r2,r4
    6ffc:	1004d7fa 	srli	r2,r2,31
    7000:	f800283a 	ret

00007004 <_sbrk_r>:
    7004:	defffd04 	addi	sp,sp,-12
    7008:	dc000015 	stw	r16,0(sp)
    700c:	04000074 	movhi	r16,1
    7010:	843fed04 	addi	r16,r16,-76
    7014:	dc400115 	stw	r17,4(sp)
    7018:	80000015 	stw	zero,0(r16)
    701c:	2023883a 	mov	r17,r4
    7020:	2809883a 	mov	r4,r5
    7024:	dfc00215 	stw	ra,8(sp)
    7028:	000a4580 	call	a458 <sbrk>
    702c:	1007883a 	mov	r3,r2
    7030:	00bfffc4 	movi	r2,-1
    7034:	18800626 	beq	r3,r2,7050 <_sbrk_r+0x4c>
    7038:	1805883a 	mov	r2,r3
    703c:	dfc00217 	ldw	ra,8(sp)
    7040:	dc400117 	ldw	r17,4(sp)
    7044:	dc000017 	ldw	r16,0(sp)
    7048:	dec00304 	addi	sp,sp,12
    704c:	f800283a 	ret
    7050:	80800017 	ldw	r2,0(r16)
    7054:	103ff826 	beq	r2,zero,7038 <_sbrk_r+0x34>
    7058:	88800015 	stw	r2,0(r17)
    705c:	1805883a 	mov	r2,r3
    7060:	dfc00217 	ldw	ra,8(sp)
    7064:	dc400117 	ldw	r17,4(sp)
    7068:	dc000017 	ldw	r16,0(sp)
    706c:	dec00304 	addi	sp,sp,12
    7070:	f800283a 	ret

00007074 <__sclose>:
    7074:	2940038f 	ldh	r5,14(r5)
    7078:	000741c1 	jmpi	741c <_close_r>

0000707c <__sseek>:
    707c:	defffe04 	addi	sp,sp,-8
    7080:	dc000015 	stw	r16,0(sp)
    7084:	2821883a 	mov	r16,r5
    7088:	2940038f 	ldh	r5,14(r5)
    708c:	dfc00115 	stw	ra,4(sp)
    7090:	00076940 	call	7694 <_lseek_r>
    7094:	1007883a 	mov	r3,r2
    7098:	00bfffc4 	movi	r2,-1
    709c:	18800926 	beq	r3,r2,70c4 <__sseek+0x48>
    70a0:	8080030b 	ldhu	r2,12(r16)
    70a4:	80c01415 	stw	r3,80(r16)
    70a8:	10840014 	ori	r2,r2,4096
    70ac:	8080030d 	sth	r2,12(r16)
    70b0:	1805883a 	mov	r2,r3
    70b4:	dfc00117 	ldw	ra,4(sp)
    70b8:	dc000017 	ldw	r16,0(sp)
    70bc:	dec00204 	addi	sp,sp,8
    70c0:	f800283a 	ret
    70c4:	8080030b 	ldhu	r2,12(r16)
    70c8:	10bbffcc 	andi	r2,r2,61439
    70cc:	8080030d 	sth	r2,12(r16)
    70d0:	1805883a 	mov	r2,r3
    70d4:	dfc00117 	ldw	ra,4(sp)
    70d8:	dc000017 	ldw	r16,0(sp)
    70dc:	dec00204 	addi	sp,sp,8
    70e0:	f800283a 	ret

000070e4 <__swrite>:
    70e4:	2880030b 	ldhu	r2,12(r5)
    70e8:	defffb04 	addi	sp,sp,-20
    70ec:	dcc00315 	stw	r19,12(sp)
    70f0:	1080400c 	andi	r2,r2,256
    70f4:	dc800215 	stw	r18,8(sp)
    70f8:	dc400115 	stw	r17,4(sp)
    70fc:	dc000015 	stw	r16,0(sp)
    7100:	3027883a 	mov	r19,r6
    7104:	3825883a 	mov	r18,r7
    7108:	dfc00415 	stw	ra,16(sp)
    710c:	2821883a 	mov	r16,r5
    7110:	000d883a 	mov	r6,zero
    7114:	01c00084 	movi	r7,2
    7118:	2023883a 	mov	r17,r4
    711c:	10000226 	beq	r2,zero,7128 <__swrite+0x44>
    7120:	2940038f 	ldh	r5,14(r5)
    7124:	00076940 	call	7694 <_lseek_r>
    7128:	8080030b 	ldhu	r2,12(r16)
    712c:	8140038f 	ldh	r5,14(r16)
    7130:	8809883a 	mov	r4,r17
    7134:	10bbffcc 	andi	r2,r2,61439
    7138:	980d883a 	mov	r6,r19
    713c:	900f883a 	mov	r7,r18
    7140:	8080030d 	sth	r2,12(r16)
    7144:	dfc00417 	ldw	ra,16(sp)
    7148:	dcc00317 	ldw	r19,12(sp)
    714c:	dc800217 	ldw	r18,8(sp)
    7150:	dc400117 	ldw	r17,4(sp)
    7154:	dc000017 	ldw	r16,0(sp)
    7158:	dec00504 	addi	sp,sp,20
    715c:	00072f01 	jmpi	72f0 <_write_r>

00007160 <__sread>:
    7160:	defffe04 	addi	sp,sp,-8
    7164:	dc000015 	stw	r16,0(sp)
    7168:	2821883a 	mov	r16,r5
    716c:	2940038f 	ldh	r5,14(r5)
    7170:	dfc00115 	stw	ra,4(sp)
    7174:	000770c0 	call	770c <_read_r>
    7178:	1007883a 	mov	r3,r2
    717c:	10000816 	blt	r2,zero,71a0 <__sread+0x40>
    7180:	80801417 	ldw	r2,80(r16)
    7184:	10c5883a 	add	r2,r2,r3
    7188:	80801415 	stw	r2,80(r16)
    718c:	1805883a 	mov	r2,r3
    7190:	dfc00117 	ldw	ra,4(sp)
    7194:	dc000017 	ldw	r16,0(sp)
    7198:	dec00204 	addi	sp,sp,8
    719c:	f800283a 	ret
    71a0:	8080030b 	ldhu	r2,12(r16)
    71a4:	10bbffcc 	andi	r2,r2,61439
    71a8:	8080030d 	sth	r2,12(r16)
    71ac:	1805883a 	mov	r2,r3
    71b0:	dfc00117 	ldw	ra,4(sp)
    71b4:	dc000017 	ldw	r16,0(sp)
    71b8:	dec00204 	addi	sp,sp,8
    71bc:	f800283a 	ret

000071c0 <strcmp>:
    71c0:	2144b03a 	or	r2,r4,r5
    71c4:	108000cc 	andi	r2,r2,3
    71c8:	10001d1e 	bne	r2,zero,7240 <strcmp+0x80>
    71cc:	200f883a 	mov	r7,r4
    71d0:	28800017 	ldw	r2,0(r5)
    71d4:	21000017 	ldw	r4,0(r4)
    71d8:	280d883a 	mov	r6,r5
    71dc:	2080161e 	bne	r4,r2,7238 <strcmp+0x78>
    71e0:	023fbff4 	movhi	r8,65279
    71e4:	423fbfc4 	addi	r8,r8,-257
    71e8:	2207883a 	add	r3,r4,r8
    71ec:	01602074 	movhi	r5,32897
    71f0:	29602004 	addi	r5,r5,-32640
    71f4:	1946703a 	and	r3,r3,r5
    71f8:	0104303a 	nor	r2,zero,r4
    71fc:	10c4703a 	and	r2,r2,r3
    7200:	10001c1e 	bne	r2,zero,7274 <strcmp+0xb4>
    7204:	4013883a 	mov	r9,r8
    7208:	2811883a 	mov	r8,r5
    720c:	00000106 	br	7214 <strcmp+0x54>
    7210:	1800181e 	bne	r3,zero,7274 <strcmp+0xb4>
    7214:	39c00104 	addi	r7,r7,4
    7218:	39000017 	ldw	r4,0(r7)
    721c:	31800104 	addi	r6,r6,4
    7220:	31400017 	ldw	r5,0(r6)
    7224:	2245883a 	add	r2,r4,r9
    7228:	1204703a 	and	r2,r2,r8
    722c:	0106303a 	nor	r3,zero,r4
    7230:	1886703a 	and	r3,r3,r2
    7234:	217ff626 	beq	r4,r5,7210 <strcmp+0x50>
    7238:	3809883a 	mov	r4,r7
    723c:	300b883a 	mov	r5,r6
    7240:	20c00007 	ldb	r3,0(r4)
    7244:	1800051e 	bne	r3,zero,725c <strcmp+0x9c>
    7248:	00000606 	br	7264 <strcmp+0xa4>
    724c:	21000044 	addi	r4,r4,1
    7250:	20c00007 	ldb	r3,0(r4)
    7254:	29400044 	addi	r5,r5,1
    7258:	18000226 	beq	r3,zero,7264 <strcmp+0xa4>
    725c:	28800007 	ldb	r2,0(r5)
    7260:	18bffa26 	beq	r3,r2,724c <strcmp+0x8c>
    7264:	20c00003 	ldbu	r3,0(r4)
    7268:	28800003 	ldbu	r2,0(r5)
    726c:	1885c83a 	sub	r2,r3,r2
    7270:	f800283a 	ret
    7274:	0005883a 	mov	r2,zero
    7278:	f800283a 	ret

0000727c <strlen>:
    727c:	208000cc 	andi	r2,r4,3
    7280:	2011883a 	mov	r8,r4
    7284:	1000161e 	bne	r2,zero,72e0 <strlen+0x64>
    7288:	20c00017 	ldw	r3,0(r4)
    728c:	017fbff4 	movhi	r5,65279
    7290:	297fbfc4 	addi	r5,r5,-257
    7294:	01e02074 	movhi	r7,32897
    7298:	39e02004 	addi	r7,r7,-32640
    729c:	1945883a 	add	r2,r3,r5
    72a0:	11c4703a 	and	r2,r2,r7
    72a4:	00c6303a 	nor	r3,zero,r3
    72a8:	1886703a 	and	r3,r3,r2
    72ac:	18000c1e 	bne	r3,zero,72e0 <strlen+0x64>
    72b0:	280d883a 	mov	r6,r5
    72b4:	380b883a 	mov	r5,r7
    72b8:	21000104 	addi	r4,r4,4
    72bc:	20800017 	ldw	r2,0(r4)
    72c0:	1187883a 	add	r3,r2,r6
    72c4:	1946703a 	and	r3,r3,r5
    72c8:	0084303a 	nor	r2,zero,r2
    72cc:	10c4703a 	and	r2,r2,r3
    72d0:	103ff926 	beq	r2,zero,72b8 <strlen+0x3c>
    72d4:	20800007 	ldb	r2,0(r4)
    72d8:	10000326 	beq	r2,zero,72e8 <strlen+0x6c>
    72dc:	21000044 	addi	r4,r4,1
    72e0:	20800007 	ldb	r2,0(r4)
    72e4:	103ffd1e 	bne	r2,zero,72dc <strlen+0x60>
    72e8:	2205c83a 	sub	r2,r4,r8
    72ec:	f800283a 	ret

000072f0 <_write_r>:
    72f0:	defffd04 	addi	sp,sp,-12
    72f4:	dc000015 	stw	r16,0(sp)
    72f8:	04000074 	movhi	r16,1
    72fc:	843fed04 	addi	r16,r16,-76
    7300:	dc400115 	stw	r17,4(sp)
    7304:	80000015 	stw	zero,0(r16)
    7308:	2023883a 	mov	r17,r4
    730c:	2809883a 	mov	r4,r5
    7310:	300b883a 	mov	r5,r6
    7314:	380d883a 	mov	r6,r7
    7318:	dfc00215 	stw	ra,8(sp)
    731c:	000a5140 	call	a514 <write>
    7320:	1007883a 	mov	r3,r2
    7324:	00bfffc4 	movi	r2,-1
    7328:	18800626 	beq	r3,r2,7344 <_write_r+0x54>
    732c:	1805883a 	mov	r2,r3
    7330:	dfc00217 	ldw	ra,8(sp)
    7334:	dc400117 	ldw	r17,4(sp)
    7338:	dc000017 	ldw	r16,0(sp)
    733c:	dec00304 	addi	sp,sp,12
    7340:	f800283a 	ret
    7344:	80800017 	ldw	r2,0(r16)
    7348:	103ff826 	beq	r2,zero,732c <_write_r+0x3c>
    734c:	88800015 	stw	r2,0(r17)
    7350:	1805883a 	mov	r2,r3
    7354:	dfc00217 	ldw	ra,8(sp)
    7358:	dc400117 	ldw	r17,4(sp)
    735c:	dc000017 	ldw	r16,0(sp)
    7360:	dec00304 	addi	sp,sp,12
    7364:	f800283a 	ret

00007368 <_calloc_r>:
    7368:	298b383a 	mul	r5,r5,r6
    736c:	defffe04 	addi	sp,sp,-8
    7370:	dc000015 	stw	r16,0(sp)
    7374:	dfc00115 	stw	ra,4(sp)
    7378:	0004f700 	call	4f70 <_malloc_r>
    737c:	1021883a 	mov	r16,r2
    7380:	01c00904 	movi	r7,36
    7384:	10000d26 	beq	r2,zero,73bc <_calloc_r+0x54>
    7388:	10ffff17 	ldw	r3,-4(r2)
    738c:	1009883a 	mov	r4,r2
    7390:	00bfff04 	movi	r2,-4
    7394:	1886703a 	and	r3,r3,r2
    7398:	1887883a 	add	r3,r3,r2
    739c:	180d883a 	mov	r6,r3
    73a0:	000b883a 	mov	r5,zero
    73a4:	38c01736 	bltu	r7,r3,7404 <_calloc_r+0x9c>
    73a8:	008004c4 	movi	r2,19
    73ac:	10c00836 	bltu	r2,r3,73d0 <_calloc_r+0x68>
    73b0:	20000215 	stw	zero,8(r4)
    73b4:	20000015 	stw	zero,0(r4)
    73b8:	20000115 	stw	zero,4(r4)
    73bc:	8005883a 	mov	r2,r16
    73c0:	dfc00117 	ldw	ra,4(sp)
    73c4:	dc000017 	ldw	r16,0(sp)
    73c8:	dec00204 	addi	sp,sp,8
    73cc:	f800283a 	ret
    73d0:	008006c4 	movi	r2,27
    73d4:	80000015 	stw	zero,0(r16)
    73d8:	80000115 	stw	zero,4(r16)
    73dc:	81000204 	addi	r4,r16,8
    73e0:	10fff32e 	bgeu	r2,r3,73b0 <_calloc_r+0x48>
    73e4:	80000215 	stw	zero,8(r16)
    73e8:	80000315 	stw	zero,12(r16)
    73ec:	81000404 	addi	r4,r16,16
    73f0:	19ffef1e 	bne	r3,r7,73b0 <_calloc_r+0x48>
    73f4:	81000604 	addi	r4,r16,24
    73f8:	80000415 	stw	zero,16(r16)
    73fc:	80000515 	stw	zero,20(r16)
    7400:	003feb06 	br	73b0 <_calloc_r+0x48>
    7404:	00059140 	call	5914 <memset>
    7408:	8005883a 	mov	r2,r16
    740c:	dfc00117 	ldw	ra,4(sp)
    7410:	dc000017 	ldw	r16,0(sp)
    7414:	dec00204 	addi	sp,sp,8
    7418:	f800283a 	ret

0000741c <_close_r>:
    741c:	defffd04 	addi	sp,sp,-12
    7420:	dc000015 	stw	r16,0(sp)
    7424:	04000074 	movhi	r16,1
    7428:	843fed04 	addi	r16,r16,-76
    742c:	dc400115 	stw	r17,4(sp)
    7430:	80000015 	stw	zero,0(r16)
    7434:	2023883a 	mov	r17,r4
    7438:	2809883a 	mov	r4,r5
    743c:	dfc00215 	stw	ra,8(sp)
    7440:	0009bb40 	call	9bb4 <close>
    7444:	1007883a 	mov	r3,r2
    7448:	00bfffc4 	movi	r2,-1
    744c:	18800626 	beq	r3,r2,7468 <_close_r+0x4c>
    7450:	1805883a 	mov	r2,r3
    7454:	dfc00217 	ldw	ra,8(sp)
    7458:	dc400117 	ldw	r17,4(sp)
    745c:	dc000017 	ldw	r16,0(sp)
    7460:	dec00304 	addi	sp,sp,12
    7464:	f800283a 	ret
    7468:	80800017 	ldw	r2,0(r16)
    746c:	103ff826 	beq	r2,zero,7450 <_close_r+0x34>
    7470:	88800015 	stw	r2,0(r17)
    7474:	1805883a 	mov	r2,r3
    7478:	dfc00217 	ldw	ra,8(sp)
    747c:	dc400117 	ldw	r17,4(sp)
    7480:	dc000017 	ldw	r16,0(sp)
    7484:	dec00304 	addi	sp,sp,12
    7488:	f800283a 	ret

0000748c <_fclose_r>:
    748c:	defffc04 	addi	sp,sp,-16
    7490:	dc400115 	stw	r17,4(sp)
    7494:	dc000015 	stw	r16,0(sp)
    7498:	dfc00315 	stw	ra,12(sp)
    749c:	dc800215 	stw	r18,8(sp)
    74a0:	2821883a 	mov	r16,r5
    74a4:	2023883a 	mov	r17,r4
    74a8:	28002926 	beq	r5,zero,7550 <_fclose_r+0xc4>
    74ac:	00040540 	call	4054 <__sfp_lock_acquire>
    74b0:	88000226 	beq	r17,zero,74bc <_fclose_r+0x30>
    74b4:	88800e17 	ldw	r2,56(r17)
    74b8:	10002d26 	beq	r2,zero,7570 <_fclose_r+0xe4>
    74bc:	8080030f 	ldh	r2,12(r16)
    74c0:	10002226 	beq	r2,zero,754c <_fclose_r+0xc0>
    74c4:	8809883a 	mov	r4,r17
    74c8:	800b883a 	mov	r5,r16
    74cc:	0003dcc0 	call	3dcc <_fflush_r>
    74d0:	1025883a 	mov	r18,r2
    74d4:	80800b17 	ldw	r2,44(r16)
    74d8:	10000426 	beq	r2,zero,74ec <_fclose_r+0x60>
    74dc:	81400717 	ldw	r5,28(r16)
    74e0:	8809883a 	mov	r4,r17
    74e4:	103ee83a 	callr	r2
    74e8:	10002a16 	blt	r2,zero,7594 <_fclose_r+0x108>
    74ec:	8080030b 	ldhu	r2,12(r16)
    74f0:	1080200c 	andi	r2,r2,128
    74f4:	1000231e 	bne	r2,zero,7584 <_fclose_r+0xf8>
    74f8:	81400c17 	ldw	r5,48(r16)
    74fc:	28000526 	beq	r5,zero,7514 <_fclose_r+0x88>
    7500:	80801004 	addi	r2,r16,64
    7504:	28800226 	beq	r5,r2,7510 <_fclose_r+0x84>
    7508:	8809883a 	mov	r4,r17
    750c:	00043e80 	call	43e8 <_free_r>
    7510:	80000c15 	stw	zero,48(r16)
    7514:	81401117 	ldw	r5,68(r16)
    7518:	28000326 	beq	r5,zero,7528 <_fclose_r+0x9c>
    751c:	8809883a 	mov	r4,r17
    7520:	00043e80 	call	43e8 <_free_r>
    7524:	80001115 	stw	zero,68(r16)
    7528:	8000030d 	sth	zero,12(r16)
    752c:	00040580 	call	4058 <__sfp_lock_release>
    7530:	9005883a 	mov	r2,r18
    7534:	dfc00317 	ldw	ra,12(sp)
    7538:	dc800217 	ldw	r18,8(sp)
    753c:	dc400117 	ldw	r17,4(sp)
    7540:	dc000017 	ldw	r16,0(sp)
    7544:	dec00404 	addi	sp,sp,16
    7548:	f800283a 	ret
    754c:	00040580 	call	4058 <__sfp_lock_release>
    7550:	0025883a 	mov	r18,zero
    7554:	9005883a 	mov	r2,r18
    7558:	dfc00317 	ldw	ra,12(sp)
    755c:	dc800217 	ldw	r18,8(sp)
    7560:	dc400117 	ldw	r17,4(sp)
    7564:	dc000017 	ldw	r16,0(sp)
    7568:	dec00404 	addi	sp,sp,16
    756c:	f800283a 	ret
    7570:	8809883a 	mov	r4,r17
    7574:	00040640 	call	4064 <__sinit>
    7578:	8080030f 	ldh	r2,12(r16)
    757c:	103fd11e 	bne	r2,zero,74c4 <_fclose_r+0x38>
    7580:	003ff206 	br	754c <_fclose_r+0xc0>
    7584:	81400417 	ldw	r5,16(r16)
    7588:	8809883a 	mov	r4,r17
    758c:	00043e80 	call	43e8 <_free_r>
    7590:	003fd906 	br	74f8 <_fclose_r+0x6c>
    7594:	04bfffc4 	movi	r18,-1
    7598:	003fd406 	br	74ec <_fclose_r+0x60>

0000759c <fclose>:
    759c:	00800074 	movhi	r2,1
    75a0:	10b91e04 	addi	r2,r2,-7048
    75a4:	200b883a 	mov	r5,r4
    75a8:	11000017 	ldw	r4,0(r2)
    75ac:	000748c1 	jmpi	748c <_fclose_r>

000075b0 <_fstat_r>:
    75b0:	defffd04 	addi	sp,sp,-12
    75b4:	dc000015 	stw	r16,0(sp)
    75b8:	04000074 	movhi	r16,1
    75bc:	843fed04 	addi	r16,r16,-76
    75c0:	dc400115 	stw	r17,4(sp)
    75c4:	80000015 	stw	zero,0(r16)
    75c8:	2023883a 	mov	r17,r4
    75cc:	2809883a 	mov	r4,r5
    75d0:	300b883a 	mov	r5,r6
    75d4:	dfc00215 	stw	ra,8(sp)
    75d8:	0009d3c0 	call	9d3c <fstat>
    75dc:	1007883a 	mov	r3,r2
    75e0:	00bfffc4 	movi	r2,-1
    75e4:	18800626 	beq	r3,r2,7600 <_fstat_r+0x50>
    75e8:	1805883a 	mov	r2,r3
    75ec:	dfc00217 	ldw	ra,8(sp)
    75f0:	dc400117 	ldw	r17,4(sp)
    75f4:	dc000017 	ldw	r16,0(sp)
    75f8:	dec00304 	addi	sp,sp,12
    75fc:	f800283a 	ret
    7600:	80800017 	ldw	r2,0(r16)
    7604:	103ff826 	beq	r2,zero,75e8 <_fstat_r+0x38>
    7608:	88800015 	stw	r2,0(r17)
    760c:	1805883a 	mov	r2,r3
    7610:	dfc00217 	ldw	ra,8(sp)
    7614:	dc400117 	ldw	r17,4(sp)
    7618:	dc000017 	ldw	r16,0(sp)
    761c:	dec00304 	addi	sp,sp,12
    7620:	f800283a 	ret

00007624 <_isatty_r>:
    7624:	defffd04 	addi	sp,sp,-12
    7628:	dc000015 	stw	r16,0(sp)
    762c:	04000074 	movhi	r16,1
    7630:	843fed04 	addi	r16,r16,-76
    7634:	dc400115 	stw	r17,4(sp)
    7638:	80000015 	stw	zero,0(r16)
    763c:	2023883a 	mov	r17,r4
    7640:	2809883a 	mov	r4,r5
    7644:	dfc00215 	stw	ra,8(sp)
    7648:	0009e700 	call	9e70 <isatty>
    764c:	1007883a 	mov	r3,r2
    7650:	00bfffc4 	movi	r2,-1
    7654:	18800626 	beq	r3,r2,7670 <_isatty_r+0x4c>
    7658:	1805883a 	mov	r2,r3
    765c:	dfc00217 	ldw	ra,8(sp)
    7660:	dc400117 	ldw	r17,4(sp)
    7664:	dc000017 	ldw	r16,0(sp)
    7668:	dec00304 	addi	sp,sp,12
    766c:	f800283a 	ret
    7670:	80800017 	ldw	r2,0(r16)
    7674:	103ff826 	beq	r2,zero,7658 <_isatty_r+0x34>
    7678:	88800015 	stw	r2,0(r17)
    767c:	1805883a 	mov	r2,r3
    7680:	dfc00217 	ldw	ra,8(sp)
    7684:	dc400117 	ldw	r17,4(sp)
    7688:	dc000017 	ldw	r16,0(sp)
    768c:	dec00304 	addi	sp,sp,12
    7690:	f800283a 	ret

00007694 <_lseek_r>:
    7694:	defffd04 	addi	sp,sp,-12
    7698:	dc000015 	stw	r16,0(sp)
    769c:	04000074 	movhi	r16,1
    76a0:	843fed04 	addi	r16,r16,-76
    76a4:	dc400115 	stw	r17,4(sp)
    76a8:	80000015 	stw	zero,0(r16)
    76ac:	2023883a 	mov	r17,r4
    76b0:	2809883a 	mov	r4,r5
    76b4:	300b883a 	mov	r5,r6
    76b8:	380d883a 	mov	r6,r7
    76bc:	dfc00215 	stw	ra,8(sp)
    76c0:	000a07c0 	call	a07c <lseek>
    76c4:	1007883a 	mov	r3,r2
    76c8:	00bfffc4 	movi	r2,-1
    76cc:	18800626 	beq	r3,r2,76e8 <_lseek_r+0x54>
    76d0:	1805883a 	mov	r2,r3
    76d4:	dfc00217 	ldw	ra,8(sp)
    76d8:	dc400117 	ldw	r17,4(sp)
    76dc:	dc000017 	ldw	r16,0(sp)
    76e0:	dec00304 	addi	sp,sp,12
    76e4:	f800283a 	ret
    76e8:	80800017 	ldw	r2,0(r16)
    76ec:	103ff826 	beq	r2,zero,76d0 <_lseek_r+0x3c>
    76f0:	88800015 	stw	r2,0(r17)
    76f4:	1805883a 	mov	r2,r3
    76f8:	dfc00217 	ldw	ra,8(sp)
    76fc:	dc400117 	ldw	r17,4(sp)
    7700:	dc000017 	ldw	r16,0(sp)
    7704:	dec00304 	addi	sp,sp,12
    7708:	f800283a 	ret

0000770c <_read_r>:
    770c:	defffd04 	addi	sp,sp,-12
    7710:	dc000015 	stw	r16,0(sp)
    7714:	04000074 	movhi	r16,1
    7718:	843fed04 	addi	r16,r16,-76
    771c:	dc400115 	stw	r17,4(sp)
    7720:	80000015 	stw	zero,0(r16)
    7724:	2023883a 	mov	r17,r4
    7728:	2809883a 	mov	r4,r5
    772c:	300b883a 	mov	r5,r6
    7730:	380d883a 	mov	r6,r7
    7734:	dfc00215 	stw	ra,8(sp)
    7738:	000a2780 	call	a278 <read>
    773c:	1007883a 	mov	r3,r2
    7740:	00bfffc4 	movi	r2,-1
    7744:	18800626 	beq	r3,r2,7760 <_read_r+0x54>
    7748:	1805883a 	mov	r2,r3
    774c:	dfc00217 	ldw	ra,8(sp)
    7750:	dc400117 	ldw	r17,4(sp)
    7754:	dc000017 	ldw	r16,0(sp)
    7758:	dec00304 	addi	sp,sp,12
    775c:	f800283a 	ret
    7760:	80800017 	ldw	r2,0(r16)
    7764:	103ff826 	beq	r2,zero,7748 <_read_r+0x3c>
    7768:	88800015 	stw	r2,0(r17)
    776c:	1805883a 	mov	r2,r3
    7770:	dfc00217 	ldw	ra,8(sp)
    7774:	dc400117 	ldw	r17,4(sp)
    7778:	dc000017 	ldw	r16,0(sp)
    777c:	dec00304 	addi	sp,sp,12
    7780:	f800283a 	ret

00007784 <__udivdi3>:
    7784:	defff004 	addi	sp,sp,-64
    7788:	2005883a 	mov	r2,r4
    778c:	3011883a 	mov	r8,r6
    7790:	df000e15 	stw	fp,56(sp)
    7794:	dd000a15 	stw	r20,40(sp)
    7798:	dc000615 	stw	r16,24(sp)
    779c:	dfc00f15 	stw	ra,60(sp)
    77a0:	ddc00d15 	stw	r23,52(sp)
    77a4:	dd800c15 	stw	r22,48(sp)
    77a8:	dd400b15 	stw	r21,44(sp)
    77ac:	dcc00915 	stw	r19,36(sp)
    77b0:	dc800815 	stw	r18,32(sp)
    77b4:	dc400715 	stw	r17,28(sp)
    77b8:	4021883a 	mov	r16,r8
    77bc:	1039883a 	mov	fp,r2
    77c0:	2829883a 	mov	r20,r5
    77c4:	38003b1e 	bne	r7,zero,78b4 <__udivdi3+0x130>
    77c8:	2a005c36 	bltu	r5,r8,793c <__udivdi3+0x1b8>
    77cc:	4000a626 	beq	r8,zero,7a68 <__udivdi3+0x2e4>
    77d0:	00bfffd4 	movui	r2,65535
    77d4:	14009e36 	bltu	r2,r16,7a50 <__udivdi3+0x2cc>
    77d8:	00803fc4 	movi	r2,255
    77dc:	14013d36 	bltu	r2,r16,7cd4 <__udivdi3+0x550>
    77e0:	000b883a 	mov	r5,zero
    77e4:	0005883a 	mov	r2,zero
    77e8:	8084d83a 	srl	r2,r16,r2
    77ec:	01000074 	movhi	r4,1
    77f0:	21321f04 	addi	r4,r4,-14212
    77f4:	01800804 	movi	r6,32
    77f8:	1105883a 	add	r2,r2,r4
    77fc:	10c00003 	ldbu	r3,0(r2)
    7800:	28c7883a 	add	r3,r5,r3
    7804:	30edc83a 	sub	r22,r6,r3
    7808:	b000ee1e 	bne	r22,zero,7bc4 <__udivdi3+0x440>
    780c:	802ad43a 	srli	r21,r16,16
    7810:	00800044 	movi	r2,1
    7814:	a423c83a 	sub	r17,r20,r16
    7818:	85ffffcc 	andi	r23,r16,65535
    781c:	d8800315 	stw	r2,12(sp)
    7820:	8809883a 	mov	r4,r17
    7824:	a80b883a 	mov	r5,r21
    7828:	00095780 	call	9578 <__udivsi3>
    782c:	8809883a 	mov	r4,r17
    7830:	a80b883a 	mov	r5,r21
    7834:	102d883a 	mov	r22,r2
    7838:	00095800 	call	9580 <__umodsi3>
    783c:	1004943a 	slli	r2,r2,16
    7840:	e006d43a 	srli	r3,fp,16
    7844:	bda3383a 	mul	r17,r23,r22
    7848:	10c4b03a 	or	r2,r2,r3
    784c:	1440042e 	bgeu	r2,r17,7860 <__udivdi3+0xdc>
    7850:	1405883a 	add	r2,r2,r16
    7854:	b5bfffc4 	addi	r22,r22,-1
    7858:	14000136 	bltu	r2,r16,7860 <__udivdi3+0xdc>
    785c:	14413d36 	bltu	r2,r17,7d54 <__udivdi3+0x5d0>
    7860:	1463c83a 	sub	r17,r2,r17
    7864:	8809883a 	mov	r4,r17
    7868:	a80b883a 	mov	r5,r21
    786c:	00095780 	call	9578 <__udivsi3>
    7870:	8809883a 	mov	r4,r17
    7874:	a80b883a 	mov	r5,r21
    7878:	1029883a 	mov	r20,r2
    787c:	00095800 	call	9580 <__umodsi3>
    7880:	1004943a 	slli	r2,r2,16
    7884:	bd09383a 	mul	r4,r23,r20
    7888:	e0ffffcc 	andi	r3,fp,65535
    788c:	10c4b03a 	or	r2,r2,r3
    7890:	1100042e 	bgeu	r2,r4,78a4 <__udivdi3+0x120>
    7894:	8085883a 	add	r2,r16,r2
    7898:	a53fffc4 	addi	r20,r20,-1
    789c:	14000136 	bltu	r2,r16,78a4 <__udivdi3+0x120>
    78a0:	11012036 	bltu	r2,r4,7d24 <__udivdi3+0x5a0>
    78a4:	b004943a 	slli	r2,r22,16
    78a8:	d9000317 	ldw	r4,12(sp)
    78ac:	a084b03a 	or	r2,r20,r2
    78b0:	00001506 	br	7908 <__udivdi3+0x184>
    78b4:	380d883a 	mov	r6,r7
    78b8:	29c06236 	bltu	r5,r7,7a44 <__udivdi3+0x2c0>
    78bc:	00bfffd4 	movui	r2,65535
    78c0:	11c05a36 	bltu	r2,r7,7a2c <__udivdi3+0x2a8>
    78c4:	00803fc4 	movi	r2,255
    78c8:	11c0fc36 	bltu	r2,r7,7cbc <__udivdi3+0x538>
    78cc:	000b883a 	mov	r5,zero
    78d0:	0005883a 	mov	r2,zero
    78d4:	3084d83a 	srl	r2,r6,r2
    78d8:	01000074 	movhi	r4,1
    78dc:	21321f04 	addi	r4,r4,-14212
    78e0:	01c00804 	movi	r7,32
    78e4:	1105883a 	add	r2,r2,r4
    78e8:	10c00003 	ldbu	r3,0(r2)
    78ec:	28c7883a 	add	r3,r5,r3
    78f0:	38efc83a 	sub	r23,r7,r3
    78f4:	b800691e 	bne	r23,zero,7a9c <__udivdi3+0x318>
    78f8:	35000136 	bltu	r6,r20,7900 <__udivdi3+0x17c>
    78fc:	e4005136 	bltu	fp,r16,7a44 <__udivdi3+0x2c0>
    7900:	00800044 	movi	r2,1
    7904:	0009883a 	mov	r4,zero
    7908:	2007883a 	mov	r3,r4
    790c:	dfc00f17 	ldw	ra,60(sp)
    7910:	df000e17 	ldw	fp,56(sp)
    7914:	ddc00d17 	ldw	r23,52(sp)
    7918:	dd800c17 	ldw	r22,48(sp)
    791c:	dd400b17 	ldw	r21,44(sp)
    7920:	dd000a17 	ldw	r20,40(sp)
    7924:	dcc00917 	ldw	r19,36(sp)
    7928:	dc800817 	ldw	r18,32(sp)
    792c:	dc400717 	ldw	r17,28(sp)
    7930:	dc000617 	ldw	r16,24(sp)
    7934:	dec01004 	addi	sp,sp,64
    7938:	f800283a 	ret
    793c:	00bfffd4 	movui	r2,65535
    7940:	12005036 	bltu	r2,r8,7a84 <__udivdi3+0x300>
    7944:	00803fc4 	movi	r2,255
    7948:	1200e836 	bltu	r2,r8,7cec <__udivdi3+0x568>
    794c:	000b883a 	mov	r5,zero
    7950:	0005883a 	mov	r2,zero
    7954:	8084d83a 	srl	r2,r16,r2
    7958:	01000074 	movhi	r4,1
    795c:	21321f04 	addi	r4,r4,-14212
    7960:	01800804 	movi	r6,32
    7964:	1105883a 	add	r2,r2,r4
    7968:	10c00003 	ldbu	r3,0(r2)
    796c:	28c7883a 	add	r3,r5,r3
    7970:	30cbc83a 	sub	r5,r6,r3
    7974:	28000626 	beq	r5,zero,7990 <__udivdi3+0x20c>
    7978:	3145c83a 	sub	r2,r6,r5
    797c:	e084d83a 	srl	r2,fp,r2
    7980:	a146983a 	sll	r3,r20,r5
    7984:	e178983a 	sll	fp,fp,r5
    7988:	8160983a 	sll	r16,r16,r5
    798c:	18a8b03a 	or	r20,r3,r2
    7990:	802ad43a 	srli	r21,r16,16
    7994:	a009883a 	mov	r4,r20
    7998:	85ffffcc 	andi	r23,r16,65535
    799c:	a80b883a 	mov	r5,r21
    79a0:	00095780 	call	9578 <__udivsi3>
    79a4:	a009883a 	mov	r4,r20
    79a8:	a80b883a 	mov	r5,r21
    79ac:	102d883a 	mov	r22,r2
    79b0:	00095800 	call	9580 <__umodsi3>
    79b4:	1004943a 	slli	r2,r2,16
    79b8:	e006d43a 	srli	r3,fp,16
    79bc:	bda3383a 	mul	r17,r23,r22
    79c0:	10c4b03a 	or	r2,r2,r3
    79c4:	1440042e 	bgeu	r2,r17,79d8 <__udivdi3+0x254>
    79c8:	1405883a 	add	r2,r2,r16
    79cc:	b5bfffc4 	addi	r22,r22,-1
    79d0:	14000136 	bltu	r2,r16,79d8 <__udivdi3+0x254>
    79d4:	1440d536 	bltu	r2,r17,7d2c <__udivdi3+0x5a8>
    79d8:	1463c83a 	sub	r17,r2,r17
    79dc:	8809883a 	mov	r4,r17
    79e0:	a80b883a 	mov	r5,r21
    79e4:	00095780 	call	9578 <__udivsi3>
    79e8:	8809883a 	mov	r4,r17
    79ec:	a80b883a 	mov	r5,r21
    79f0:	1029883a 	mov	r20,r2
    79f4:	00095800 	call	9580 <__umodsi3>
    79f8:	1004943a 	slli	r2,r2,16
    79fc:	bd09383a 	mul	r4,r23,r20
    7a00:	e0ffffcc 	andi	r3,fp,65535
    7a04:	10c4b03a 	or	r2,r2,r3
    7a08:	1100042e 	bgeu	r2,r4,7a1c <__udivdi3+0x298>
    7a0c:	8085883a 	add	r2,r16,r2
    7a10:	a53fffc4 	addi	r20,r20,-1
    7a14:	14000136 	bltu	r2,r16,7a1c <__udivdi3+0x298>
    7a18:	1100c736 	bltu	r2,r4,7d38 <__udivdi3+0x5b4>
    7a1c:	b004943a 	slli	r2,r22,16
    7a20:	0009883a 	mov	r4,zero
    7a24:	a084b03a 	or	r2,r20,r2
    7a28:	003fb706 	br	7908 <__udivdi3+0x184>
    7a2c:	00804034 	movhi	r2,256
    7a30:	10bfffc4 	addi	r2,r2,-1
    7a34:	11c0a436 	bltu	r2,r7,7cc8 <__udivdi3+0x544>
    7a38:	01400404 	movi	r5,16
    7a3c:	2805883a 	mov	r2,r5
    7a40:	003fa406 	br	78d4 <__udivdi3+0x150>
    7a44:	0005883a 	mov	r2,zero
    7a48:	0009883a 	mov	r4,zero
    7a4c:	003fae06 	br	7908 <__udivdi3+0x184>
    7a50:	00804034 	movhi	r2,256
    7a54:	10bfffc4 	addi	r2,r2,-1
    7a58:	1400a136 	bltu	r2,r16,7ce0 <__udivdi3+0x55c>
    7a5c:	01400404 	movi	r5,16
    7a60:	2805883a 	mov	r2,r5
    7a64:	003f6006 	br	77e8 <__udivdi3+0x64>
    7a68:	01000044 	movi	r4,1
    7a6c:	000b883a 	mov	r5,zero
    7a70:	00095780 	call	9578 <__udivsi3>
    7a74:	1021883a 	mov	r16,r2
    7a78:	00bfffd4 	movui	r2,65535
    7a7c:	143ff436 	bltu	r2,r16,7a50 <__udivdi3+0x2cc>
    7a80:	003f5506 	br	77d8 <__udivdi3+0x54>
    7a84:	00804034 	movhi	r2,256
    7a88:	10bfffc4 	addi	r2,r2,-1
    7a8c:	12009a36 	bltu	r2,r8,7cf8 <__udivdi3+0x574>
    7a90:	01400404 	movi	r5,16
    7a94:	2805883a 	mov	r2,r5
    7a98:	003fae06 	br	7954 <__udivdi3+0x1d0>
    7a9c:	3dc5c83a 	sub	r2,r7,r23
    7aa0:	35c8983a 	sll	r4,r6,r23
    7aa4:	8086d83a 	srl	r3,r16,r2
    7aa8:	a0a2d83a 	srl	r17,r20,r2
    7aac:	e084d83a 	srl	r2,fp,r2
    7ab0:	20eab03a 	or	r21,r4,r3
    7ab4:	a82cd43a 	srli	r22,r21,16
    7ab8:	a5c6983a 	sll	r3,r20,r23
    7abc:	8809883a 	mov	r4,r17
    7ac0:	b00b883a 	mov	r5,r22
    7ac4:	1886b03a 	or	r3,r3,r2
    7ac8:	d8c00215 	stw	r3,8(sp)
    7acc:	00095780 	call	9578 <__udivsi3>
    7ad0:	8809883a 	mov	r4,r17
    7ad4:	b00b883a 	mov	r5,r22
    7ad8:	1029883a 	mov	r20,r2
    7adc:	00095800 	call	9580 <__umodsi3>
    7ae0:	a8ffffcc 	andi	r3,r21,65535
    7ae4:	d8c00515 	stw	r3,20(sp)
    7ae8:	d9000217 	ldw	r4,8(sp)
    7aec:	d9400517 	ldw	r5,20(sp)
    7af0:	1004943a 	slli	r2,r2,16
    7af4:	2006d43a 	srli	r3,r4,16
    7af8:	85e0983a 	sll	r16,r16,r23
    7afc:	2d23383a 	mul	r17,r5,r20
    7b00:	10c4b03a 	or	r2,r2,r3
    7b04:	dc000015 	stw	r16,0(sp)
    7b08:	1440032e 	bgeu	r2,r17,7b18 <__udivdi3+0x394>
    7b0c:	1545883a 	add	r2,r2,r21
    7b10:	a53fffc4 	addi	r20,r20,-1
    7b14:	15407f2e 	bgeu	r2,r21,7d14 <__udivdi3+0x590>
    7b18:	1463c83a 	sub	r17,r2,r17
    7b1c:	8809883a 	mov	r4,r17
    7b20:	b00b883a 	mov	r5,r22
    7b24:	00095780 	call	9578 <__udivsi3>
    7b28:	8809883a 	mov	r4,r17
    7b2c:	b00b883a 	mov	r5,r22
    7b30:	1021883a 	mov	r16,r2
    7b34:	00095800 	call	9580 <__umodsi3>
    7b38:	d8c00517 	ldw	r3,20(sp)
    7b3c:	d9000217 	ldw	r4,8(sp)
    7b40:	1004943a 	slli	r2,r2,16
    7b44:	1c0f383a 	mul	r7,r3,r16
    7b48:	20ffffcc 	andi	r3,r4,65535
    7b4c:	10e2b03a 	or	r17,r2,r3
    7b50:	89c0032e 	bgeu	r17,r7,7b60 <__udivdi3+0x3dc>
    7b54:	8d63883a 	add	r17,r17,r21
    7b58:	843fffc4 	addi	r16,r16,-1
    7b5c:	8d40692e 	bgeu	r17,r21,7d04 <__udivdi3+0x580>
    7b60:	a008943a 	slli	r4,r20,16
    7b64:	d9400017 	ldw	r5,0(sp)
    7b68:	89e3c83a 	sub	r17,r17,r7
    7b6c:	8110b03a 	or	r8,r16,r4
    7b70:	280cd43a 	srli	r6,r5,16
    7b74:	28ffffcc 	andi	r3,r5,65535
    7b78:	40bfffcc 	andi	r2,r8,65535
    7b7c:	400ad43a 	srli	r5,r8,16
    7b80:	10d3383a 	mul	r9,r2,r3
    7b84:	1185383a 	mul	r2,r2,r6
    7b88:	28c7383a 	mul	r3,r5,r3
    7b8c:	4808d43a 	srli	r4,r9,16
    7b90:	298b383a 	mul	r5,r5,r6
    7b94:	10c5883a 	add	r2,r2,r3
    7b98:	2089883a 	add	r4,r4,r2
    7b9c:	20c0022e 	bgeu	r4,r3,7ba8 <__udivdi3+0x424>
    7ba0:	00800074 	movhi	r2,1
    7ba4:	288b883a 	add	r5,r5,r2
    7ba8:	2004d43a 	srli	r2,r4,16
    7bac:	288b883a 	add	r5,r5,r2
    7bb0:	89403f36 	bltu	r17,r5,7cb0 <__udivdi3+0x52c>
    7bb4:	89403926 	beq	r17,r5,7c9c <__udivdi3+0x518>
    7bb8:	4005883a 	mov	r2,r8
    7bbc:	0009883a 	mov	r4,zero
    7bc0:	003f5106 	br	7908 <__udivdi3+0x184>
    7bc4:	85a0983a 	sll	r16,r16,r22
    7bc8:	3585c83a 	sub	r2,r6,r22
    7bcc:	a0a2d83a 	srl	r17,r20,r2
    7bd0:	802ad43a 	srli	r21,r16,16
    7bd4:	e084d83a 	srl	r2,fp,r2
    7bd8:	a586983a 	sll	r3,r20,r22
    7bdc:	8809883a 	mov	r4,r17
    7be0:	a80b883a 	mov	r5,r21
    7be4:	1886b03a 	or	r3,r3,r2
    7be8:	d8c00115 	stw	r3,4(sp)
    7bec:	00095780 	call	9578 <__udivsi3>
    7bf0:	8809883a 	mov	r4,r17
    7bf4:	a80b883a 	mov	r5,r21
    7bf8:	d8800415 	stw	r2,16(sp)
    7bfc:	00095800 	call	9580 <__umodsi3>
    7c00:	d9000117 	ldw	r4,4(sp)
    7c04:	d9400417 	ldw	r5,16(sp)
    7c08:	1004943a 	slli	r2,r2,16
    7c0c:	85ffffcc 	andi	r23,r16,65535
    7c10:	2006d43a 	srli	r3,r4,16
    7c14:	b963383a 	mul	r17,r23,r5
    7c18:	10c4b03a 	or	r2,r2,r3
    7c1c:	1440042e 	bgeu	r2,r17,7c30 <__udivdi3+0x4ac>
    7c20:	297fffc4 	addi	r5,r5,-1
    7c24:	1405883a 	add	r2,r2,r16
    7c28:	d9400415 	stw	r5,16(sp)
    7c2c:	1400442e 	bgeu	r2,r16,7d40 <__udivdi3+0x5bc>
    7c30:	1463c83a 	sub	r17,r2,r17
    7c34:	8809883a 	mov	r4,r17
    7c38:	a80b883a 	mov	r5,r21
    7c3c:	00095780 	call	9578 <__udivsi3>
    7c40:	8809883a 	mov	r4,r17
    7c44:	a80b883a 	mov	r5,r21
    7c48:	1029883a 	mov	r20,r2
    7c4c:	00095800 	call	9580 <__umodsi3>
    7c50:	d9400117 	ldw	r5,4(sp)
    7c54:	1004943a 	slli	r2,r2,16
    7c58:	bd09383a 	mul	r4,r23,r20
    7c5c:	28ffffcc 	andi	r3,r5,65535
    7c60:	10c6b03a 	or	r3,r2,r3
    7c64:	1900062e 	bgeu	r3,r4,7c80 <__udivdi3+0x4fc>
    7c68:	1c07883a 	add	r3,r3,r16
    7c6c:	a53fffc4 	addi	r20,r20,-1
    7c70:	1c000336 	bltu	r3,r16,7c80 <__udivdi3+0x4fc>
    7c74:	1900022e 	bgeu	r3,r4,7c80 <__udivdi3+0x4fc>
    7c78:	a53fffc4 	addi	r20,r20,-1
    7c7c:	1c07883a 	add	r3,r3,r16
    7c80:	d9400417 	ldw	r5,16(sp)
    7c84:	e5b8983a 	sll	fp,fp,r22
    7c88:	1923c83a 	sub	r17,r3,r4
    7c8c:	2804943a 	slli	r2,r5,16
    7c90:	a0a8b03a 	or	r20,r20,r2
    7c94:	dd000315 	stw	r20,12(sp)
    7c98:	003ee106 	br	7820 <__udivdi3+0x9c>
    7c9c:	2004943a 	slli	r2,r4,16
    7ca0:	e5c8983a 	sll	r4,fp,r23
    7ca4:	48ffffcc 	andi	r3,r9,65535
    7ca8:	10c5883a 	add	r2,r2,r3
    7cac:	20bfc22e 	bgeu	r4,r2,7bb8 <__udivdi3+0x434>
    7cb0:	40bfffc4 	addi	r2,r8,-1
    7cb4:	0009883a 	mov	r4,zero
    7cb8:	003f1306 	br	7908 <__udivdi3+0x184>
    7cbc:	01400204 	movi	r5,8
    7cc0:	2805883a 	mov	r2,r5
    7cc4:	003f0306 	br	78d4 <__udivdi3+0x150>
    7cc8:	01400604 	movi	r5,24
    7ccc:	2805883a 	mov	r2,r5
    7cd0:	003f0006 	br	78d4 <__udivdi3+0x150>
    7cd4:	01400204 	movi	r5,8
    7cd8:	2805883a 	mov	r2,r5
    7cdc:	003ec206 	br	77e8 <__udivdi3+0x64>
    7ce0:	01400604 	movi	r5,24
    7ce4:	2805883a 	mov	r2,r5
    7ce8:	003ebf06 	br	77e8 <__udivdi3+0x64>
    7cec:	01400204 	movi	r5,8
    7cf0:	2805883a 	mov	r2,r5
    7cf4:	003f1706 	br	7954 <__udivdi3+0x1d0>
    7cf8:	01400604 	movi	r5,24
    7cfc:	2805883a 	mov	r2,r5
    7d00:	003f1406 	br	7954 <__udivdi3+0x1d0>
    7d04:	89ff962e 	bgeu	r17,r7,7b60 <__udivdi3+0x3dc>
    7d08:	8d63883a 	add	r17,r17,r21
    7d0c:	843fffc4 	addi	r16,r16,-1
    7d10:	003f9306 	br	7b60 <__udivdi3+0x3dc>
    7d14:	147f802e 	bgeu	r2,r17,7b18 <__udivdi3+0x394>
    7d18:	a53fffc4 	addi	r20,r20,-1
    7d1c:	1545883a 	add	r2,r2,r21
    7d20:	003f7d06 	br	7b18 <__udivdi3+0x394>
    7d24:	a53fffc4 	addi	r20,r20,-1
    7d28:	003ede06 	br	78a4 <__udivdi3+0x120>
    7d2c:	b5bfffc4 	addi	r22,r22,-1
    7d30:	1405883a 	add	r2,r2,r16
    7d34:	003f2806 	br	79d8 <__udivdi3+0x254>
    7d38:	a53fffc4 	addi	r20,r20,-1
    7d3c:	003f3706 	br	7a1c <__udivdi3+0x298>
    7d40:	147fbb2e 	bgeu	r2,r17,7c30 <__udivdi3+0x4ac>
    7d44:	297fffc4 	addi	r5,r5,-1
    7d48:	1405883a 	add	r2,r2,r16
    7d4c:	d9400415 	stw	r5,16(sp)
    7d50:	003fb706 	br	7c30 <__udivdi3+0x4ac>
    7d54:	b5bfffc4 	addi	r22,r22,-1
    7d58:	1405883a 	add	r2,r2,r16
    7d5c:	003ec006 	br	7860 <__udivdi3+0xdc>

00007d60 <__umoddi3>:
    7d60:	defff104 	addi	sp,sp,-60
    7d64:	dd800b15 	stw	r22,44(sp)
    7d68:	dd000915 	stw	r20,36(sp)
    7d6c:	dc000515 	stw	r16,20(sp)
    7d70:	dfc00e15 	stw	ra,56(sp)
    7d74:	df000d15 	stw	fp,52(sp)
    7d78:	ddc00c15 	stw	r23,48(sp)
    7d7c:	dd400a15 	stw	r21,40(sp)
    7d80:	dcc00815 	stw	r19,32(sp)
    7d84:	dc800715 	stw	r18,28(sp)
    7d88:	dc400615 	stw	r17,24(sp)
    7d8c:	3021883a 	mov	r16,r6
    7d90:	202d883a 	mov	r22,r4
    7d94:	2829883a 	mov	r20,r5
    7d98:	38002b1e 	bne	r7,zero,7e48 <__umoddi3+0xe8>
    7d9c:	29805036 	bltu	r5,r6,7ee0 <__umoddi3+0x180>
    7da0:	30008a26 	beq	r6,zero,7fcc <__umoddi3+0x26c>
    7da4:	00bfffd4 	movui	r2,65535
    7da8:	14008236 	bltu	r2,r16,7fb4 <__umoddi3+0x254>
    7dac:	00803fc4 	movi	r2,255
    7db0:	14013636 	bltu	r2,r16,828c <__umoddi3+0x52c>
    7db4:	000b883a 	mov	r5,zero
    7db8:	0005883a 	mov	r2,zero
    7dbc:	8084d83a 	srl	r2,r16,r2
    7dc0:	01000074 	movhi	r4,1
    7dc4:	21321f04 	addi	r4,r4,-14212
    7dc8:	01800804 	movi	r6,32
    7dcc:	1105883a 	add	r2,r2,r4
    7dd0:	10c00003 	ldbu	r3,0(r2)
    7dd4:	28c7883a 	add	r3,r5,r3
    7dd8:	30efc83a 	sub	r23,r6,r3
    7ddc:	b800941e 	bne	r23,zero,8030 <__umoddi3+0x2d0>
    7de0:	802ad43a 	srli	r21,r16,16
    7de4:	a423c83a 	sub	r17,r20,r16
    7de8:	0039883a 	mov	fp,zero
    7dec:	853fffcc 	andi	r20,r16,65535
    7df0:	8809883a 	mov	r4,r17
    7df4:	a80b883a 	mov	r5,r21
    7df8:	00095780 	call	9578 <__udivsi3>
    7dfc:	8809883a 	mov	r4,r17
    7e00:	a80b883a 	mov	r5,r21
    7e04:	a0a3383a 	mul	r17,r20,r2
    7e08:	00095800 	call	9580 <__umodsi3>
    7e0c:	1004943a 	slli	r2,r2,16
    7e10:	b006d43a 	srli	r3,r22,16
    7e14:	10c4b03a 	or	r2,r2,r3
    7e18:	1440032e 	bgeu	r2,r17,7e28 <__umoddi3+0xc8>
    7e1c:	1405883a 	add	r2,r2,r16
    7e20:	14000136 	bltu	r2,r16,7e28 <__umoddi3+0xc8>
    7e24:	14413536 	bltu	r2,r17,82fc <__umoddi3+0x59c>
    7e28:	1463c83a 	sub	r17,r2,r17
    7e2c:	8809883a 	mov	r4,r17
    7e30:	a80b883a 	mov	r5,r21
    7e34:	00095780 	call	9578 <__udivsi3>
    7e38:	8809883a 	mov	r4,r17
    7e3c:	a0a3383a 	mul	r17,r20,r2
    7e40:	a80b883a 	mov	r5,r21
    7e44:	00004d06 	br	7f7c <__umoddi3+0x21c>
    7e48:	380d883a 	mov	r6,r7
    7e4c:	29c0102e 	bgeu	r5,r7,7e90 <__umoddi3+0x130>
    7e50:	2011883a 	mov	r8,r4
    7e54:	2813883a 	mov	r9,r5
    7e58:	4005883a 	mov	r2,r8
    7e5c:	4807883a 	mov	r3,r9
    7e60:	dfc00e17 	ldw	ra,56(sp)
    7e64:	df000d17 	ldw	fp,52(sp)
    7e68:	ddc00c17 	ldw	r23,48(sp)
    7e6c:	dd800b17 	ldw	r22,44(sp)
    7e70:	dd400a17 	ldw	r21,40(sp)
    7e74:	dd000917 	ldw	r20,36(sp)
    7e78:	dcc00817 	ldw	r19,32(sp)
    7e7c:	dc800717 	ldw	r18,28(sp)
    7e80:	dc400617 	ldw	r17,24(sp)
    7e84:	dc000517 	ldw	r16,20(sp)
    7e88:	dec00f04 	addi	sp,sp,60
    7e8c:	f800283a 	ret
    7e90:	00bfffd4 	movui	r2,65535
    7e94:	11c05a36 	bltu	r2,r7,8000 <__umoddi3+0x2a0>
    7e98:	00803fc4 	movi	r2,255
    7e9c:	11c0fe36 	bltu	r2,r7,8298 <__umoddi3+0x538>
    7ea0:	000b883a 	mov	r5,zero
    7ea4:	0005883a 	mov	r2,zero
    7ea8:	3084d83a 	srl	r2,r6,r2
    7eac:	01000074 	movhi	r4,1
    7eb0:	21321f04 	addi	r4,r4,-14212
    7eb4:	01c00804 	movi	r7,32
    7eb8:	1105883a 	add	r2,r2,r4
    7ebc:	10c00003 	ldbu	r3,0(r2)
    7ec0:	28c7883a 	add	r3,r5,r3
    7ec4:	38ebc83a 	sub	r21,r7,r3
    7ec8:	a800851e 	bne	r21,zero,80e0 <__umoddi3+0x380>
    7ecc:	35005236 	bltu	r6,r20,8018 <__umoddi3+0x2b8>
    7ed0:	b400512e 	bgeu	r22,r16,8018 <__umoddi3+0x2b8>
    7ed4:	b011883a 	mov	r8,r22
    7ed8:	a013883a 	mov	r9,r20
    7edc:	003fde06 	br	7e58 <__umoddi3+0xf8>
    7ee0:	00bfffd4 	movui	r2,65535
    7ee4:	11804036 	bltu	r2,r6,7fe8 <__umoddi3+0x288>
    7ee8:	00803fc4 	movi	r2,255
    7eec:	1180ed36 	bltu	r2,r6,82a4 <__umoddi3+0x544>
    7ef0:	000b883a 	mov	r5,zero
    7ef4:	0005883a 	mov	r2,zero
    7ef8:	8084d83a 	srl	r2,r16,r2
    7efc:	01000074 	movhi	r4,1
    7f00:	21321f04 	addi	r4,r4,-14212
    7f04:	01800804 	movi	r6,32
    7f08:	1105883a 	add	r2,r2,r4
    7f0c:	10c00003 	ldbu	r3,0(r2)
    7f10:	28c7883a 	add	r3,r5,r3
    7f14:	30c7c83a 	sub	r3,r6,r3
    7f18:	1800bf1e 	bne	r3,zero,8218 <__umoddi3+0x4b8>
    7f1c:	0039883a 	mov	fp,zero
    7f20:	802ad43a 	srli	r21,r16,16
    7f24:	a009883a 	mov	r4,r20
    7f28:	85ffffcc 	andi	r23,r16,65535
    7f2c:	a80b883a 	mov	r5,r21
    7f30:	00095780 	call	9578 <__udivsi3>
    7f34:	a009883a 	mov	r4,r20
    7f38:	a80b883a 	mov	r5,r21
    7f3c:	b8a3383a 	mul	r17,r23,r2
    7f40:	00095800 	call	9580 <__umodsi3>
    7f44:	1004943a 	slli	r2,r2,16
    7f48:	b006d43a 	srli	r3,r22,16
    7f4c:	10c4b03a 	or	r2,r2,r3
    7f50:	1440032e 	bgeu	r2,r17,7f60 <__umoddi3+0x200>
    7f54:	1405883a 	add	r2,r2,r16
    7f58:	14000136 	bltu	r2,r16,7f60 <__umoddi3+0x200>
    7f5c:	1440e536 	bltu	r2,r17,82f4 <__umoddi3+0x594>
    7f60:	1463c83a 	sub	r17,r2,r17
    7f64:	8809883a 	mov	r4,r17
    7f68:	a80b883a 	mov	r5,r21
    7f6c:	00095780 	call	9578 <__udivsi3>
    7f70:	8809883a 	mov	r4,r17
    7f74:	b8a3383a 	mul	r17,r23,r2
    7f78:	a80b883a 	mov	r5,r21
    7f7c:	00095800 	call	9580 <__umodsi3>
    7f80:	1004943a 	slli	r2,r2,16
    7f84:	b0ffffcc 	andi	r3,r22,65535
    7f88:	10c4b03a 	or	r2,r2,r3
    7f8c:	1440042e 	bgeu	r2,r17,7fa0 <__umoddi3+0x240>
    7f90:	1405883a 	add	r2,r2,r16
    7f94:	14000236 	bltu	r2,r16,7fa0 <__umoddi3+0x240>
    7f98:	1440012e 	bgeu	r2,r17,7fa0 <__umoddi3+0x240>
    7f9c:	1405883a 	add	r2,r2,r16
    7fa0:	1445c83a 	sub	r2,r2,r17
    7fa4:	1724d83a 	srl	r18,r2,fp
    7fa8:	0013883a 	mov	r9,zero
    7fac:	9011883a 	mov	r8,r18
    7fb0:	003fa906 	br	7e58 <__umoddi3+0xf8>
    7fb4:	00804034 	movhi	r2,256
    7fb8:	10bfffc4 	addi	r2,r2,-1
    7fbc:	1400b036 	bltu	r2,r16,8280 <__umoddi3+0x520>
    7fc0:	01400404 	movi	r5,16
    7fc4:	2805883a 	mov	r2,r5
    7fc8:	003f7c06 	br	7dbc <__umoddi3+0x5c>
    7fcc:	01000044 	movi	r4,1
    7fd0:	000b883a 	mov	r5,zero
    7fd4:	00095780 	call	9578 <__udivsi3>
    7fd8:	1021883a 	mov	r16,r2
    7fdc:	00bfffd4 	movui	r2,65535
    7fe0:	143ff436 	bltu	r2,r16,7fb4 <__umoddi3+0x254>
    7fe4:	003f7106 	br	7dac <__umoddi3+0x4c>
    7fe8:	00804034 	movhi	r2,256
    7fec:	10bfffc4 	addi	r2,r2,-1
    7ff0:	1180af36 	bltu	r2,r6,82b0 <__umoddi3+0x550>
    7ff4:	01400404 	movi	r5,16
    7ff8:	2805883a 	mov	r2,r5
    7ffc:	003fbe06 	br	7ef8 <__umoddi3+0x198>
    8000:	00804034 	movhi	r2,256
    8004:	10bfffc4 	addi	r2,r2,-1
    8008:	11c0ac36 	bltu	r2,r7,82bc <__umoddi3+0x55c>
    800c:	01400404 	movi	r5,16
    8010:	2805883a 	mov	r2,r5
    8014:	003fa406 	br	7ea8 <__umoddi3+0x148>
    8018:	b409c83a 	sub	r4,r22,r16
    801c:	b105803a 	cmpltu	r2,r22,r4
    8020:	a187c83a 	sub	r3,r20,r6
    8024:	18a9c83a 	sub	r20,r3,r2
    8028:	202d883a 	mov	r22,r4
    802c:	003fa906 	br	7ed4 <__umoddi3+0x174>
    8030:	85e0983a 	sll	r16,r16,r23
    8034:	35c5c83a 	sub	r2,r6,r23
    8038:	a0a2d83a 	srl	r17,r20,r2
    803c:	802ad43a 	srli	r21,r16,16
    8040:	b084d83a 	srl	r2,r22,r2
    8044:	a5c6983a 	sll	r3,r20,r23
    8048:	8809883a 	mov	r4,r17
    804c:	a80b883a 	mov	r5,r21
    8050:	1886b03a 	or	r3,r3,r2
    8054:	d8c00115 	stw	r3,4(sp)
    8058:	853fffcc 	andi	r20,r16,65535
    805c:	00095780 	call	9578 <__udivsi3>
    8060:	8809883a 	mov	r4,r17
    8064:	a80b883a 	mov	r5,r21
    8068:	a0a3383a 	mul	r17,r20,r2
    806c:	00095800 	call	9580 <__umodsi3>
    8070:	d9000117 	ldw	r4,4(sp)
    8074:	1004943a 	slli	r2,r2,16
    8078:	b839883a 	mov	fp,r23
    807c:	2006d43a 	srli	r3,r4,16
    8080:	10c4b03a 	or	r2,r2,r3
    8084:	1440022e 	bgeu	r2,r17,8090 <__umoddi3+0x330>
    8088:	1405883a 	add	r2,r2,r16
    808c:	1400962e 	bgeu	r2,r16,82e8 <__umoddi3+0x588>
    8090:	1463c83a 	sub	r17,r2,r17
    8094:	8809883a 	mov	r4,r17
    8098:	a80b883a 	mov	r5,r21
    809c:	00095780 	call	9578 <__udivsi3>
    80a0:	8809883a 	mov	r4,r17
    80a4:	a80b883a 	mov	r5,r21
    80a8:	a0a3383a 	mul	r17,r20,r2
    80ac:	00095800 	call	9580 <__umodsi3>
    80b0:	d9400117 	ldw	r5,4(sp)
    80b4:	1004943a 	slli	r2,r2,16
    80b8:	28ffffcc 	andi	r3,r5,65535
    80bc:	10c4b03a 	or	r2,r2,r3
    80c0:	1440042e 	bgeu	r2,r17,80d4 <__umoddi3+0x374>
    80c4:	1405883a 	add	r2,r2,r16
    80c8:	14000236 	bltu	r2,r16,80d4 <__umoddi3+0x374>
    80cc:	1440012e 	bgeu	r2,r17,80d4 <__umoddi3+0x374>
    80d0:	1405883a 	add	r2,r2,r16
    80d4:	b5ec983a 	sll	r22,r22,r23
    80d8:	1463c83a 	sub	r17,r2,r17
    80dc:	003f4406 	br	7df0 <__umoddi3+0x90>
    80e0:	3d4fc83a 	sub	r7,r7,r21
    80e4:	3546983a 	sll	r3,r6,r21
    80e8:	81c4d83a 	srl	r2,r16,r7
    80ec:	a1e2d83a 	srl	r17,r20,r7
    80f0:	a54c983a 	sll	r6,r20,r21
    80f4:	18aeb03a 	or	r23,r3,r2
    80f8:	b828d43a 	srli	r20,r23,16
    80fc:	b1c4d83a 	srl	r2,r22,r7
    8100:	8809883a 	mov	r4,r17
    8104:	a00b883a 	mov	r5,r20
    8108:	308cb03a 	or	r6,r6,r2
    810c:	d9c00315 	stw	r7,12(sp)
    8110:	d9800215 	stw	r6,8(sp)
    8114:	00095780 	call	9578 <__udivsi3>
    8118:	8809883a 	mov	r4,r17
    811c:	a00b883a 	mov	r5,r20
    8120:	1039883a 	mov	fp,r2
    8124:	00095800 	call	9580 <__umodsi3>
    8128:	b8ffffcc 	andi	r3,r23,65535
    812c:	d8c00415 	stw	r3,16(sp)
    8130:	d9000217 	ldw	r4,8(sp)
    8134:	d9400417 	ldw	r5,16(sp)
    8138:	1004943a 	slli	r2,r2,16
    813c:	2006d43a 	srli	r3,r4,16
    8140:	8560983a 	sll	r16,r16,r21
    8144:	2f23383a 	mul	r17,r5,fp
    8148:	10c4b03a 	or	r2,r2,r3
    814c:	dc000015 	stw	r16,0(sp)
    8150:	b56c983a 	sll	r22,r22,r21
    8154:	1440032e 	bgeu	r2,r17,8164 <__umoddi3+0x404>
    8158:	15c5883a 	add	r2,r2,r23
    815c:	e73fffc4 	addi	fp,fp,-1
    8160:	15c05d2e 	bgeu	r2,r23,82d8 <__umoddi3+0x578>
    8164:	1463c83a 	sub	r17,r2,r17
    8168:	8809883a 	mov	r4,r17
    816c:	a00b883a 	mov	r5,r20
    8170:	00095780 	call	9578 <__udivsi3>
    8174:	8809883a 	mov	r4,r17
    8178:	a00b883a 	mov	r5,r20
    817c:	1021883a 	mov	r16,r2
    8180:	00095800 	call	9580 <__umodsi3>
    8184:	d8c00417 	ldw	r3,16(sp)
    8188:	d9000217 	ldw	r4,8(sp)
    818c:	1004943a 	slli	r2,r2,16
    8190:	1c23383a 	mul	r17,r3,r16
    8194:	20ffffcc 	andi	r3,r4,65535
    8198:	10ceb03a 	or	r7,r2,r3
    819c:	3c40032e 	bgeu	r7,r17,81ac <__umoddi3+0x44c>
    81a0:	3dcf883a 	add	r7,r7,r23
    81a4:	843fffc4 	addi	r16,r16,-1
    81a8:	3dc0472e 	bgeu	r7,r23,82c8 <__umoddi3+0x568>
    81ac:	e004943a 	slli	r2,fp,16
    81b0:	d9400017 	ldw	r5,0(sp)
    81b4:	3c4fc83a 	sub	r7,r7,r17
    81b8:	8084b03a 	or	r2,r16,r2
    81bc:	28ffffcc 	andi	r3,r5,65535
    81c0:	280cd43a 	srli	r6,r5,16
    81c4:	100ad43a 	srli	r5,r2,16
    81c8:	10bfffcc 	andi	r2,r2,65535
    81cc:	10d1383a 	mul	r8,r2,r3
    81d0:	28c7383a 	mul	r3,r5,r3
    81d4:	1185383a 	mul	r2,r2,r6
    81d8:	4008d43a 	srli	r4,r8,16
    81dc:	298b383a 	mul	r5,r5,r6
    81e0:	10c5883a 	add	r2,r2,r3
    81e4:	2089883a 	add	r4,r4,r2
    81e8:	20c0022e 	bgeu	r4,r3,81f4 <__umoddi3+0x494>
    81ec:	00800074 	movhi	r2,1
    81f0:	288b883a 	add	r5,r5,r2
    81f4:	2004d43a 	srli	r2,r4,16
    81f8:	2008943a 	slli	r4,r4,16
    81fc:	40ffffcc 	andi	r3,r8,65535
    8200:	288b883a 	add	r5,r5,r2
    8204:	20c9883a 	add	r4,r4,r3
    8208:	39400b36 	bltu	r7,r5,8238 <__umoddi3+0x4d8>
    820c:	39403d26 	beq	r7,r5,8304 <__umoddi3+0x5a4>
    8210:	394bc83a 	sub	r5,r7,r5
    8214:	00000f06 	br	8254 <__umoddi3+0x4f4>
    8218:	30c5c83a 	sub	r2,r6,r3
    821c:	1839883a 	mov	fp,r3
    8220:	b084d83a 	srl	r2,r22,r2
    8224:	a0c6983a 	sll	r3,r20,r3
    8228:	8720983a 	sll	r16,r16,fp
    822c:	b72c983a 	sll	r22,r22,fp
    8230:	18a8b03a 	or	r20,r3,r2
    8234:	003f3a06 	br	7f20 <__umoddi3+0x1c0>
    8238:	d8c00017 	ldw	r3,0(sp)
    823c:	20c5c83a 	sub	r2,r4,r3
    8240:	2089803a 	cmpltu	r4,r4,r2
    8244:	2dc7c83a 	sub	r3,r5,r23
    8248:	1907c83a 	sub	r3,r3,r4
    824c:	38cbc83a 	sub	r5,r7,r3
    8250:	1009883a 	mov	r4,r2
    8254:	b105c83a 	sub	r2,r22,r4
    8258:	b087803a 	cmpltu	r3,r22,r2
    825c:	28c7c83a 	sub	r3,r5,r3
    8260:	d9400317 	ldw	r5,12(sp)
    8264:	1544d83a 	srl	r2,r2,r21
    8268:	1948983a 	sll	r4,r3,r5
    826c:	1d46d83a 	srl	r3,r3,r21
    8270:	20a4b03a 	or	r18,r4,r2
    8274:	9011883a 	mov	r8,r18
    8278:	1813883a 	mov	r9,r3
    827c:	003ef606 	br	7e58 <__umoddi3+0xf8>
    8280:	01400604 	movi	r5,24
    8284:	2805883a 	mov	r2,r5
    8288:	003ecc06 	br	7dbc <__umoddi3+0x5c>
    828c:	01400204 	movi	r5,8
    8290:	2805883a 	mov	r2,r5
    8294:	003ec906 	br	7dbc <__umoddi3+0x5c>
    8298:	01400204 	movi	r5,8
    829c:	2805883a 	mov	r2,r5
    82a0:	003f0106 	br	7ea8 <__umoddi3+0x148>
    82a4:	01400204 	movi	r5,8
    82a8:	2805883a 	mov	r2,r5
    82ac:	003f1206 	br	7ef8 <__umoddi3+0x198>
    82b0:	01400604 	movi	r5,24
    82b4:	2805883a 	mov	r2,r5
    82b8:	003f0f06 	br	7ef8 <__umoddi3+0x198>
    82bc:	01400604 	movi	r5,24
    82c0:	2805883a 	mov	r2,r5
    82c4:	003ef806 	br	7ea8 <__umoddi3+0x148>
    82c8:	3c7fb82e 	bgeu	r7,r17,81ac <__umoddi3+0x44c>
    82cc:	843fffc4 	addi	r16,r16,-1
    82d0:	3dcf883a 	add	r7,r7,r23
    82d4:	003fb506 	br	81ac <__umoddi3+0x44c>
    82d8:	147fa22e 	bgeu	r2,r17,8164 <__umoddi3+0x404>
    82dc:	e73fffc4 	addi	fp,fp,-1
    82e0:	15c5883a 	add	r2,r2,r23
    82e4:	003f9f06 	br	8164 <__umoddi3+0x404>
    82e8:	147f692e 	bgeu	r2,r17,8090 <__umoddi3+0x330>
    82ec:	1405883a 	add	r2,r2,r16
    82f0:	003f6706 	br	8090 <__umoddi3+0x330>
    82f4:	1405883a 	add	r2,r2,r16
    82f8:	003f1906 	br	7f60 <__umoddi3+0x200>
    82fc:	1405883a 	add	r2,r2,r16
    8300:	003ec906 	br	7e28 <__umoddi3+0xc8>
    8304:	b13fcc36 	bltu	r22,r4,8238 <__umoddi3+0x4d8>
    8308:	000b883a 	mov	r5,zero
    830c:	003fd106 	br	8254 <__umoddi3+0x4f4>

00008310 <_fpadd_parts>:
    8310:	defff804 	addi	sp,sp,-32
    8314:	dcc00315 	stw	r19,12(sp)
    8318:	2027883a 	mov	r19,r4
    831c:	21000017 	ldw	r4,0(r4)
    8320:	00c00044 	movi	r3,1
    8324:	dd400515 	stw	r21,20(sp)
    8328:	dd000415 	stw	r20,16(sp)
    832c:	ddc00715 	stw	r23,28(sp)
    8330:	dd800615 	stw	r22,24(sp)
    8334:	dc800215 	stw	r18,8(sp)
    8338:	dc400115 	stw	r17,4(sp)
    833c:	dc000015 	stw	r16,0(sp)
    8340:	282b883a 	mov	r21,r5
    8344:	3029883a 	mov	r20,r6
    8348:	1900632e 	bgeu	r3,r4,84d8 <_fpadd_parts+0x1c8>
    834c:	28800017 	ldw	r2,0(r5)
    8350:	1880812e 	bgeu	r3,r2,8558 <_fpadd_parts+0x248>
    8354:	00c00104 	movi	r3,4
    8358:	20c0dc26 	beq	r4,r3,86cc <_fpadd_parts+0x3bc>
    835c:	10c07e26 	beq	r2,r3,8558 <_fpadd_parts+0x248>
    8360:	00c00084 	movi	r3,2
    8364:	10c06726 	beq	r2,r3,8504 <_fpadd_parts+0x1f4>
    8368:	20c07b26 	beq	r4,r3,8558 <_fpadd_parts+0x248>
    836c:	9dc00217 	ldw	r23,8(r19)
    8370:	28c00217 	ldw	r3,8(r5)
    8374:	9c400317 	ldw	r17,12(r19)
    8378:	2bc00317 	ldw	r15,12(r5)
    837c:	b8cdc83a 	sub	r6,r23,r3
    8380:	9c800417 	ldw	r18,16(r19)
    8384:	2c000417 	ldw	r16,16(r5)
    8388:	3009883a 	mov	r4,r6
    838c:	30009716 	blt	r6,zero,85ec <_fpadd_parts+0x2dc>
    8390:	00800fc4 	movi	r2,63
    8394:	11806b16 	blt	r2,r6,8544 <_fpadd_parts+0x234>
    8398:	0100a40e 	bge	zero,r4,862c <_fpadd_parts+0x31c>
    839c:	35bff804 	addi	r22,r6,-32
    83a0:	b000bc16 	blt	r22,zero,8694 <_fpadd_parts+0x384>
    83a4:	8596d83a 	srl	r11,r16,r22
    83a8:	0019883a 	mov	r12,zero
    83ac:	0013883a 	mov	r9,zero
    83b0:	01000044 	movi	r4,1
    83b4:	0015883a 	mov	r10,zero
    83b8:	b000be16 	blt	r22,zero,86b4 <_fpadd_parts+0x3a4>
    83bc:	2590983a 	sll	r8,r4,r22
    83c0:	000f883a 	mov	r7,zero
    83c4:	00bfffc4 	movi	r2,-1
    83c8:	3889883a 	add	r4,r7,r2
    83cc:	408b883a 	add	r5,r8,r2
    83d0:	21cd803a 	cmpltu	r6,r4,r7
    83d4:	314b883a 	add	r5,r6,r5
    83d8:	7904703a 	and	r2,r15,r4
    83dc:	8146703a 	and	r3,r16,r5
    83e0:	10c4b03a 	or	r2,r2,r3
    83e4:	10000226 	beq	r2,zero,83f0 <_fpadd_parts+0xe0>
    83e8:	02400044 	movi	r9,1
    83ec:	0015883a 	mov	r10,zero
    83f0:	5a5eb03a 	or	r15,r11,r9
    83f4:	62a0b03a 	or	r16,r12,r10
    83f8:	99400117 	ldw	r5,4(r19)
    83fc:	a8800117 	ldw	r2,4(r21)
    8400:	28806e26 	beq	r5,r2,85bc <_fpadd_parts+0x2ac>
    8404:	28006626 	beq	r5,zero,85a0 <_fpadd_parts+0x290>
    8408:	7c45c83a 	sub	r2,r15,r17
    840c:	7889803a 	cmpltu	r4,r15,r2
    8410:	8487c83a 	sub	r3,r16,r18
    8414:	1909c83a 	sub	r4,r3,r4
    8418:	100d883a 	mov	r6,r2
    841c:	200f883a 	mov	r7,r4
    8420:	38007716 	blt	r7,zero,8600 <_fpadd_parts+0x2f0>
    8424:	a5c00215 	stw	r23,8(r20)
    8428:	a1c00415 	stw	r7,16(r20)
    842c:	a0000115 	stw	zero,4(r20)
    8430:	a1800315 	stw	r6,12(r20)
    8434:	a2000317 	ldw	r8,12(r20)
    8438:	a2400417 	ldw	r9,16(r20)
    843c:	00bfffc4 	movi	r2,-1
    8440:	408b883a 	add	r5,r8,r2
    8444:	2a09803a 	cmpltu	r4,r5,r8
    8448:	488d883a 	add	r6,r9,r2
    844c:	01c40034 	movhi	r7,4096
    8450:	39ffffc4 	addi	r7,r7,-1
    8454:	218d883a 	add	r6,r4,r6
    8458:	39801736 	bltu	r7,r6,84b8 <_fpadd_parts+0x1a8>
    845c:	31c06526 	beq	r6,r7,85f4 <_fpadd_parts+0x2e4>
    8460:	a3000217 	ldw	r12,8(r20)
    8464:	4209883a 	add	r4,r8,r8
    8468:	00bfffc4 	movi	r2,-1
    846c:	220f803a 	cmpltu	r7,r4,r8
    8470:	4a4b883a 	add	r5,r9,r9
    8474:	394f883a 	add	r7,r7,r5
    8478:	2095883a 	add	r10,r4,r2
    847c:	3897883a 	add	r11,r7,r2
    8480:	510d803a 	cmpltu	r6,r10,r4
    8484:	6099883a 	add	r12,r12,r2
    8488:	32d7883a 	add	r11,r6,r11
    848c:	00840034 	movhi	r2,4096
    8490:	10bfffc4 	addi	r2,r2,-1
    8494:	2011883a 	mov	r8,r4
    8498:	3813883a 	mov	r9,r7
    849c:	a1000315 	stw	r4,12(r20)
    84a0:	a1c00415 	stw	r7,16(r20)
    84a4:	a3000215 	stw	r12,8(r20)
    84a8:	12c00336 	bltu	r2,r11,84b8 <_fpadd_parts+0x1a8>
    84ac:	58bfed1e 	bne	r11,r2,8464 <_fpadd_parts+0x154>
    84b0:	00bfff84 	movi	r2,-2
    84b4:	12bfeb2e 	bgeu	r2,r10,8464 <_fpadd_parts+0x154>
    84b8:	a2800417 	ldw	r10,16(r20)
    84bc:	008000c4 	movi	r2,3
    84c0:	00c80034 	movhi	r3,8192
    84c4:	18ffffc4 	addi	r3,r3,-1
    84c8:	a2400317 	ldw	r9,12(r20)
    84cc:	a0800015 	stw	r2,0(r20)
    84d0:	1a802336 	bltu	r3,r10,8560 <_fpadd_parts+0x250>
    84d4:	a027883a 	mov	r19,r20
    84d8:	9805883a 	mov	r2,r19
    84dc:	ddc00717 	ldw	r23,28(sp)
    84e0:	dd800617 	ldw	r22,24(sp)
    84e4:	dd400517 	ldw	r21,20(sp)
    84e8:	dd000417 	ldw	r20,16(sp)
    84ec:	dcc00317 	ldw	r19,12(sp)
    84f0:	dc800217 	ldw	r18,8(sp)
    84f4:	dc400117 	ldw	r17,4(sp)
    84f8:	dc000017 	ldw	r16,0(sp)
    84fc:	dec00804 	addi	sp,sp,32
    8500:	f800283a 	ret
    8504:	20fff41e 	bne	r4,r3,84d8 <_fpadd_parts+0x1c8>
    8508:	31000015 	stw	r4,0(r6)
    850c:	98800117 	ldw	r2,4(r19)
    8510:	30800115 	stw	r2,4(r6)
    8514:	98c00217 	ldw	r3,8(r19)
    8518:	30c00215 	stw	r3,8(r6)
    851c:	98800317 	ldw	r2,12(r19)
    8520:	30800315 	stw	r2,12(r6)
    8524:	98c00417 	ldw	r3,16(r19)
    8528:	30c00415 	stw	r3,16(r6)
    852c:	98800117 	ldw	r2,4(r19)
    8530:	28c00117 	ldw	r3,4(r5)
    8534:	3027883a 	mov	r19,r6
    8538:	10c4703a 	and	r2,r2,r3
    853c:	30800115 	stw	r2,4(r6)
    8540:	003fe506 	br	84d8 <_fpadd_parts+0x1c8>
    8544:	1dc02616 	blt	r3,r23,85e0 <_fpadd_parts+0x2d0>
    8548:	0023883a 	mov	r17,zero
    854c:	182f883a 	mov	r23,r3
    8550:	0025883a 	mov	r18,zero
    8554:	003fa806 	br	83f8 <_fpadd_parts+0xe8>
    8558:	a827883a 	mov	r19,r21
    855c:	003fde06 	br	84d8 <_fpadd_parts+0x1c8>
    8560:	01800044 	movi	r6,1
    8564:	500497fa 	slli	r2,r10,31
    8568:	4808d07a 	srli	r4,r9,1
    856c:	518ad83a 	srl	r5,r10,r6
    8570:	a2000217 	ldw	r8,8(r20)
    8574:	1108b03a 	or	r4,r2,r4
    8578:	0007883a 	mov	r3,zero
    857c:	4984703a 	and	r2,r9,r6
    8580:	208cb03a 	or	r6,r4,r2
    8584:	28ceb03a 	or	r7,r5,r3
    8588:	42000044 	addi	r8,r8,1
    858c:	a027883a 	mov	r19,r20
    8590:	a1c00415 	stw	r7,16(r20)
    8594:	a2000215 	stw	r8,8(r20)
    8598:	a1800315 	stw	r6,12(r20)
    859c:	003fce06 	br	84d8 <_fpadd_parts+0x1c8>
    85a0:	8bc5c83a 	sub	r2,r17,r15
    85a4:	8889803a 	cmpltu	r4,r17,r2
    85a8:	9407c83a 	sub	r3,r18,r16
    85ac:	1909c83a 	sub	r4,r3,r4
    85b0:	100d883a 	mov	r6,r2
    85b4:	200f883a 	mov	r7,r4
    85b8:	003f9906 	br	8420 <_fpadd_parts+0x110>
    85bc:	7c45883a 	add	r2,r15,r17
    85c0:	13c9803a 	cmpltu	r4,r2,r15
    85c4:	8487883a 	add	r3,r16,r18
    85c8:	20c9883a 	add	r4,r4,r3
    85cc:	a1400115 	stw	r5,4(r20)
    85d0:	a5c00215 	stw	r23,8(r20)
    85d4:	a0800315 	stw	r2,12(r20)
    85d8:	a1000415 	stw	r4,16(r20)
    85dc:	003fb606 	br	84b8 <_fpadd_parts+0x1a8>
    85e0:	001f883a 	mov	r15,zero
    85e4:	0021883a 	mov	r16,zero
    85e8:	003f8306 	br	83f8 <_fpadd_parts+0xe8>
    85ec:	018dc83a 	sub	r6,zero,r6
    85f0:	003f6706 	br	8390 <_fpadd_parts+0x80>
    85f4:	00bfff84 	movi	r2,-2
    85f8:	117faf36 	bltu	r2,r5,84b8 <_fpadd_parts+0x1a8>
    85fc:	003f9806 	br	8460 <_fpadd_parts+0x150>
    8600:	0005883a 	mov	r2,zero
    8604:	1189c83a 	sub	r4,r2,r6
    8608:	1105803a 	cmpltu	r2,r2,r4
    860c:	01cbc83a 	sub	r5,zero,r7
    8610:	2885c83a 	sub	r2,r5,r2
    8614:	01800044 	movi	r6,1
    8618:	a1800115 	stw	r6,4(r20)
    861c:	a5c00215 	stw	r23,8(r20)
    8620:	a1000315 	stw	r4,12(r20)
    8624:	a0800415 	stw	r2,16(r20)
    8628:	003f8206 	br	8434 <_fpadd_parts+0x124>
    862c:	203f7226 	beq	r4,zero,83f8 <_fpadd_parts+0xe8>
    8630:	35bff804 	addi	r22,r6,-32
    8634:	b9af883a 	add	r23,r23,r6
    8638:	b0003116 	blt	r22,zero,8700 <_fpadd_parts+0x3f0>
    863c:	959ad83a 	srl	r13,r18,r22
    8640:	001d883a 	mov	r14,zero
    8644:	000f883a 	mov	r7,zero
    8648:	01000044 	movi	r4,1
    864c:	0011883a 	mov	r8,zero
    8650:	b0002516 	blt	r22,zero,86e8 <_fpadd_parts+0x3d8>
    8654:	2594983a 	sll	r10,r4,r22
    8658:	0013883a 	mov	r9,zero
    865c:	00bfffc4 	movi	r2,-1
    8660:	4889883a 	add	r4,r9,r2
    8664:	508b883a 	add	r5,r10,r2
    8668:	224d803a 	cmpltu	r6,r4,r9
    866c:	314b883a 	add	r5,r6,r5
    8670:	8904703a 	and	r2,r17,r4
    8674:	9146703a 	and	r3,r18,r5
    8678:	10c4b03a 	or	r2,r2,r3
    867c:	10000226 	beq	r2,zero,8688 <_fpadd_parts+0x378>
    8680:	01c00044 	movi	r7,1
    8684:	0011883a 	mov	r8,zero
    8688:	69e2b03a 	or	r17,r13,r7
    868c:	7224b03a 	or	r18,r14,r8
    8690:	003f5906 	br	83f8 <_fpadd_parts+0xe8>
    8694:	8407883a 	add	r3,r16,r16
    8698:	008007c4 	movi	r2,31
    869c:	1185c83a 	sub	r2,r2,r6
    86a0:	1886983a 	sll	r3,r3,r2
    86a4:	7996d83a 	srl	r11,r15,r6
    86a8:	8198d83a 	srl	r12,r16,r6
    86ac:	1ad6b03a 	or	r11,r3,r11
    86b0:	003f3e06 	br	83ac <_fpadd_parts+0x9c>
    86b4:	2006d07a 	srli	r3,r4,1
    86b8:	008007c4 	movi	r2,31
    86bc:	1185c83a 	sub	r2,r2,r6
    86c0:	1890d83a 	srl	r8,r3,r2
    86c4:	218e983a 	sll	r7,r4,r6
    86c8:	003f3e06 	br	83c4 <_fpadd_parts+0xb4>
    86cc:	113f821e 	bne	r2,r4,84d8 <_fpadd_parts+0x1c8>
    86d0:	28c00117 	ldw	r3,4(r5)
    86d4:	98800117 	ldw	r2,4(r19)
    86d8:	10ff7f26 	beq	r2,r3,84d8 <_fpadd_parts+0x1c8>
    86dc:	04c00074 	movhi	r19,1
    86e0:	9cf21a04 	addi	r19,r19,-14232
    86e4:	003f7c06 	br	84d8 <_fpadd_parts+0x1c8>
    86e8:	2006d07a 	srli	r3,r4,1
    86ec:	008007c4 	movi	r2,31
    86f0:	1185c83a 	sub	r2,r2,r6
    86f4:	1894d83a 	srl	r10,r3,r2
    86f8:	2192983a 	sll	r9,r4,r6
    86fc:	003fd706 	br	865c <_fpadd_parts+0x34c>
    8700:	9487883a 	add	r3,r18,r18
    8704:	008007c4 	movi	r2,31
    8708:	1185c83a 	sub	r2,r2,r6
    870c:	1886983a 	sll	r3,r3,r2
    8710:	899ad83a 	srl	r13,r17,r6
    8714:	919cd83a 	srl	r14,r18,r6
    8718:	1b5ab03a 	or	r13,r3,r13
    871c:	003fc906 	br	8644 <_fpadd_parts+0x334>

00008720 <__subdf3>:
    8720:	deffea04 	addi	sp,sp,-88
    8724:	dcc01415 	stw	r19,80(sp)
    8728:	dcc00404 	addi	r19,sp,16
    872c:	2011883a 	mov	r8,r4
    8730:	2813883a 	mov	r9,r5
    8734:	dc401315 	stw	r17,76(sp)
    8738:	d809883a 	mov	r4,sp
    873c:	980b883a 	mov	r5,r19
    8740:	dc400904 	addi	r17,sp,36
    8744:	dfc01515 	stw	ra,84(sp)
    8748:	da400115 	stw	r9,4(sp)
    874c:	d9c00315 	stw	r7,12(sp)
    8750:	da000015 	stw	r8,0(sp)
    8754:	d9800215 	stw	r6,8(sp)
    8758:	00099b40 	call	99b4 <__unpack_d>
    875c:	d9000204 	addi	r4,sp,8
    8760:	880b883a 	mov	r5,r17
    8764:	00099b40 	call	99b4 <__unpack_d>
    8768:	d8800a17 	ldw	r2,40(sp)
    876c:	880b883a 	mov	r5,r17
    8770:	9809883a 	mov	r4,r19
    8774:	d9800e04 	addi	r6,sp,56
    8778:	1080005c 	xori	r2,r2,1
    877c:	d8800a15 	stw	r2,40(sp)
    8780:	00083100 	call	8310 <_fpadd_parts>
    8784:	1009883a 	mov	r4,r2
    8788:	00096a00 	call	96a0 <__pack_d>
    878c:	dfc01517 	ldw	ra,84(sp)
    8790:	dcc01417 	ldw	r19,80(sp)
    8794:	dc401317 	ldw	r17,76(sp)
    8798:	dec01604 	addi	sp,sp,88
    879c:	f800283a 	ret

000087a0 <__adddf3>:
    87a0:	deffea04 	addi	sp,sp,-88
    87a4:	dcc01415 	stw	r19,80(sp)
    87a8:	dcc00404 	addi	r19,sp,16
    87ac:	2011883a 	mov	r8,r4
    87b0:	2813883a 	mov	r9,r5
    87b4:	dc401315 	stw	r17,76(sp)
    87b8:	d809883a 	mov	r4,sp
    87bc:	980b883a 	mov	r5,r19
    87c0:	dc400904 	addi	r17,sp,36
    87c4:	dfc01515 	stw	ra,84(sp)
    87c8:	da400115 	stw	r9,4(sp)
    87cc:	d9c00315 	stw	r7,12(sp)
    87d0:	da000015 	stw	r8,0(sp)
    87d4:	d9800215 	stw	r6,8(sp)
    87d8:	00099b40 	call	99b4 <__unpack_d>
    87dc:	d9000204 	addi	r4,sp,8
    87e0:	880b883a 	mov	r5,r17
    87e4:	00099b40 	call	99b4 <__unpack_d>
    87e8:	d9800e04 	addi	r6,sp,56
    87ec:	9809883a 	mov	r4,r19
    87f0:	880b883a 	mov	r5,r17
    87f4:	00083100 	call	8310 <_fpadd_parts>
    87f8:	1009883a 	mov	r4,r2
    87fc:	00096a00 	call	96a0 <__pack_d>
    8800:	dfc01517 	ldw	ra,84(sp)
    8804:	dcc01417 	ldw	r19,80(sp)
    8808:	dc401317 	ldw	r17,76(sp)
    880c:	dec01604 	addi	sp,sp,88
    8810:	f800283a 	ret

00008814 <__muldf3>:
    8814:	deffe004 	addi	sp,sp,-128
    8818:	dc401815 	stw	r17,96(sp)
    881c:	dc400404 	addi	r17,sp,16
    8820:	2011883a 	mov	r8,r4
    8824:	2813883a 	mov	r9,r5
    8828:	dc001715 	stw	r16,92(sp)
    882c:	d809883a 	mov	r4,sp
    8830:	880b883a 	mov	r5,r17
    8834:	dc000904 	addi	r16,sp,36
    8838:	dfc01f15 	stw	ra,124(sp)
    883c:	da400115 	stw	r9,4(sp)
    8840:	d9c00315 	stw	r7,12(sp)
    8844:	da000015 	stw	r8,0(sp)
    8848:	d9800215 	stw	r6,8(sp)
    884c:	ddc01e15 	stw	r23,120(sp)
    8850:	dd801d15 	stw	r22,116(sp)
    8854:	dd401c15 	stw	r21,112(sp)
    8858:	dd001b15 	stw	r20,108(sp)
    885c:	dcc01a15 	stw	r19,104(sp)
    8860:	dc801915 	stw	r18,100(sp)
    8864:	00099b40 	call	99b4 <__unpack_d>
    8868:	d9000204 	addi	r4,sp,8
    886c:	800b883a 	mov	r5,r16
    8870:	00099b40 	call	99b4 <__unpack_d>
    8874:	d9000417 	ldw	r4,16(sp)
    8878:	00800044 	movi	r2,1
    887c:	1100102e 	bgeu	r2,r4,88c0 <__muldf3+0xac>
    8880:	d8c00917 	ldw	r3,36(sp)
    8884:	10c0062e 	bgeu	r2,r3,88a0 <__muldf3+0x8c>
    8888:	00800104 	movi	r2,4
    888c:	20800a26 	beq	r4,r2,88b8 <__muldf3+0xa4>
    8890:	1880cc26 	beq	r3,r2,8bc4 <__muldf3+0x3b0>
    8894:	00800084 	movi	r2,2
    8898:	20800926 	beq	r4,r2,88c0 <__muldf3+0xac>
    889c:	1880191e 	bne	r3,r2,8904 <__muldf3+0xf0>
    88a0:	d8c00a17 	ldw	r3,40(sp)
    88a4:	d8800517 	ldw	r2,20(sp)
    88a8:	8009883a 	mov	r4,r16
    88ac:	10c4c03a 	cmpne	r2,r2,r3
    88b0:	d8800a15 	stw	r2,40(sp)
    88b4:	00000706 	br	88d4 <__muldf3+0xc0>
    88b8:	00800084 	movi	r2,2
    88bc:	1880c326 	beq	r3,r2,8bcc <__muldf3+0x3b8>
    88c0:	d8800517 	ldw	r2,20(sp)
    88c4:	d8c00a17 	ldw	r3,40(sp)
    88c8:	8809883a 	mov	r4,r17
    88cc:	10c4c03a 	cmpne	r2,r2,r3
    88d0:	d8800515 	stw	r2,20(sp)
    88d4:	00096a00 	call	96a0 <__pack_d>
    88d8:	dfc01f17 	ldw	ra,124(sp)
    88dc:	ddc01e17 	ldw	r23,120(sp)
    88e0:	dd801d17 	ldw	r22,116(sp)
    88e4:	dd401c17 	ldw	r21,112(sp)
    88e8:	dd001b17 	ldw	r20,108(sp)
    88ec:	dcc01a17 	ldw	r19,104(sp)
    88f0:	dc801917 	ldw	r18,100(sp)
    88f4:	dc401817 	ldw	r17,96(sp)
    88f8:	dc001717 	ldw	r16,92(sp)
    88fc:	dec02004 	addi	sp,sp,128
    8900:	f800283a 	ret
    8904:	dd800717 	ldw	r22,28(sp)
    8908:	dc800c17 	ldw	r18,48(sp)
    890c:	002b883a 	mov	r21,zero
    8910:	0023883a 	mov	r17,zero
    8914:	a80b883a 	mov	r5,r21
    8918:	b00d883a 	mov	r6,r22
    891c:	880f883a 	mov	r7,r17
    8920:	ddc00817 	ldw	r23,32(sp)
    8924:	dcc00d17 	ldw	r19,52(sp)
    8928:	9009883a 	mov	r4,r18
    892c:	00095880 	call	9588 <__muldi3>
    8930:	001b883a 	mov	r13,zero
    8934:	680f883a 	mov	r7,r13
    8938:	b009883a 	mov	r4,r22
    893c:	000b883a 	mov	r5,zero
    8940:	980d883a 	mov	r6,r19
    8944:	b82d883a 	mov	r22,r23
    8948:	002f883a 	mov	r23,zero
    894c:	db401615 	stw	r13,88(sp)
    8950:	d8801315 	stw	r2,76(sp)
    8954:	d8c01415 	stw	r3,80(sp)
    8958:	dcc01515 	stw	r19,84(sp)
    895c:	00095880 	call	9588 <__muldi3>
    8960:	b00d883a 	mov	r6,r22
    8964:	000b883a 	mov	r5,zero
    8968:	9009883a 	mov	r4,r18
    896c:	b80f883a 	mov	r7,r23
    8970:	1021883a 	mov	r16,r2
    8974:	1823883a 	mov	r17,r3
    8978:	00095880 	call	9588 <__muldi3>
    897c:	8085883a 	add	r2,r16,r2
    8980:	140d803a 	cmpltu	r6,r2,r16
    8984:	88c7883a 	add	r3,r17,r3
    8988:	30cd883a 	add	r6,r6,r3
    898c:	1029883a 	mov	r20,r2
    8990:	302b883a 	mov	r21,r6
    8994:	da801317 	ldw	r10,76(sp)
    8998:	dac01417 	ldw	r11,80(sp)
    899c:	db001517 	ldw	r12,84(sp)
    89a0:	db401617 	ldw	r13,88(sp)
    89a4:	3440612e 	bgeu	r6,r17,8b2c <__muldf3+0x318>
    89a8:	0009883a 	mov	r4,zero
    89ac:	5105883a 	add	r2,r10,r4
    89b0:	128d803a 	cmpltu	r6,r2,r10
    89b4:	5d07883a 	add	r3,r11,r20
    89b8:	30cd883a 	add	r6,r6,r3
    89bc:	0021883a 	mov	r16,zero
    89c0:	04400044 	movi	r17,1
    89c4:	1025883a 	mov	r18,r2
    89c8:	3027883a 	mov	r19,r6
    89cc:	32c06236 	bltu	r6,r11,8b58 <__muldf3+0x344>
    89d0:	59807a26 	beq	r11,r6,8bbc <__muldf3+0x3a8>
    89d4:	680b883a 	mov	r5,r13
    89d8:	b80f883a 	mov	r7,r23
    89dc:	6009883a 	mov	r4,r12
    89e0:	b00d883a 	mov	r6,r22
    89e4:	00095880 	call	9588 <__muldi3>
    89e8:	1009883a 	mov	r4,r2
    89ec:	000f883a 	mov	r7,zero
    89f0:	1545883a 	add	r2,r2,r21
    89f4:	1111803a 	cmpltu	r8,r2,r4
    89f8:	19c7883a 	add	r3,r3,r7
    89fc:	40c7883a 	add	r3,r8,r3
    8a00:	88cb883a 	add	r5,r17,r3
    8a04:	d8c00617 	ldw	r3,24(sp)
    8a08:	8089883a 	add	r4,r16,r2
    8a0c:	d8800b17 	ldw	r2,44(sp)
    8a10:	18c00104 	addi	r3,r3,4
    8a14:	240d803a 	cmpltu	r6,r4,r16
    8a18:	10c7883a 	add	r3,r2,r3
    8a1c:	2013883a 	mov	r9,r4
    8a20:	d8800a17 	ldw	r2,40(sp)
    8a24:	d9000517 	ldw	r4,20(sp)
    8a28:	314d883a 	add	r6,r6,r5
    8a2c:	3015883a 	mov	r10,r6
    8a30:	2088c03a 	cmpne	r4,r4,r2
    8a34:	00880034 	movhi	r2,8192
    8a38:	10bfffc4 	addi	r2,r2,-1
    8a3c:	d9000f15 	stw	r4,60(sp)
    8a40:	d8c01015 	stw	r3,64(sp)
    8a44:	1180162e 	bgeu	r2,r6,8aa0 <__muldf3+0x28c>
    8a48:	1811883a 	mov	r8,r3
    8a4c:	101f883a 	mov	r15,r2
    8a50:	980497fa 	slli	r2,r19,31
    8a54:	9016d07a 	srli	r11,r18,1
    8a58:	500697fa 	slli	r3,r10,31
    8a5c:	480cd07a 	srli	r6,r9,1
    8a60:	500ed07a 	srli	r7,r10,1
    8a64:	12d6b03a 	or	r11,r2,r11
    8a68:	00800044 	movi	r2,1
    8a6c:	198cb03a 	or	r6,r3,r6
    8a70:	4888703a 	and	r4,r9,r2
    8a74:	9818d07a 	srli	r12,r19,1
    8a78:	001b883a 	mov	r13,zero
    8a7c:	03a00034 	movhi	r14,32768
    8a80:	3013883a 	mov	r9,r6
    8a84:	3815883a 	mov	r10,r7
    8a88:	4091883a 	add	r8,r8,r2
    8a8c:	20000226 	beq	r4,zero,8a98 <__muldf3+0x284>
    8a90:	5b64b03a 	or	r18,r11,r13
    8a94:	63a6b03a 	or	r19,r12,r14
    8a98:	7abfed36 	bltu	r15,r10,8a50 <__muldf3+0x23c>
    8a9c:	da001015 	stw	r8,64(sp)
    8aa0:	00840034 	movhi	r2,4096
    8aa4:	10bfffc4 	addi	r2,r2,-1
    8aa8:	12801436 	bltu	r2,r10,8afc <__muldf3+0x2e8>
    8aac:	da001017 	ldw	r8,64(sp)
    8ab0:	101f883a 	mov	r15,r2
    8ab4:	4a45883a 	add	r2,r9,r9
    8ab8:	124d803a 	cmpltu	r6,r2,r9
    8abc:	5287883a 	add	r3,r10,r10
    8ac0:	9497883a 	add	r11,r18,r18
    8ac4:	5c8f803a 	cmpltu	r7,r11,r18
    8ac8:	9cd9883a 	add	r12,r19,r19
    8acc:	01000044 	movi	r4,1
    8ad0:	30cd883a 	add	r6,r6,r3
    8ad4:	3b0f883a 	add	r7,r7,r12
    8ad8:	423fffc4 	addi	r8,r8,-1
    8adc:	1013883a 	mov	r9,r2
    8ae0:	3015883a 	mov	r10,r6
    8ae4:	111ab03a 	or	r13,r2,r4
    8ae8:	98003016 	blt	r19,zero,8bac <__muldf3+0x398>
    8aec:	5825883a 	mov	r18,r11
    8af0:	3827883a 	mov	r19,r7
    8af4:	7abfef2e 	bgeu	r15,r10,8ab4 <__muldf3+0x2a0>
    8af8:	da001015 	stw	r8,64(sp)
    8afc:	00803fc4 	movi	r2,255
    8b00:	488e703a 	and	r7,r9,r2
    8b04:	00802004 	movi	r2,128
    8b08:	0007883a 	mov	r3,zero
    8b0c:	0011883a 	mov	r8,zero
    8b10:	38801826 	beq	r7,r2,8b74 <__muldf3+0x360>
    8b14:	008000c4 	movi	r2,3
    8b18:	d9000e04 	addi	r4,sp,56
    8b1c:	da801215 	stw	r10,72(sp)
    8b20:	d8800e15 	stw	r2,56(sp)
    8b24:	da401115 	stw	r9,68(sp)
    8b28:	003f6a06 	br	88d4 <__muldf3+0xc0>
    8b2c:	89802126 	beq	r17,r6,8bb4 <__muldf3+0x3a0>
    8b30:	0009883a 	mov	r4,zero
    8b34:	5105883a 	add	r2,r10,r4
    8b38:	128d803a 	cmpltu	r6,r2,r10
    8b3c:	5d07883a 	add	r3,r11,r20
    8b40:	30cd883a 	add	r6,r6,r3
    8b44:	0021883a 	mov	r16,zero
    8b48:	0023883a 	mov	r17,zero
    8b4c:	1025883a 	mov	r18,r2
    8b50:	3027883a 	mov	r19,r6
    8b54:	32ff9e2e 	bgeu	r6,r11,89d0 <__muldf3+0x1bc>
    8b58:	00800044 	movi	r2,1
    8b5c:	8089883a 	add	r4,r16,r2
    8b60:	240d803a 	cmpltu	r6,r4,r16
    8b64:	344d883a 	add	r6,r6,r17
    8b68:	2021883a 	mov	r16,r4
    8b6c:	3023883a 	mov	r17,r6
    8b70:	003f9806 	br	89d4 <__muldf3+0x1c0>
    8b74:	403fe71e 	bne	r8,zero,8b14 <__muldf3+0x300>
    8b78:	01004004 	movi	r4,256
    8b7c:	4904703a 	and	r2,r9,r4
    8b80:	10c4b03a 	or	r2,r2,r3
    8b84:	103fe31e 	bne	r2,zero,8b14 <__muldf3+0x300>
    8b88:	94c4b03a 	or	r2,r18,r19
    8b8c:	103fe126 	beq	r2,zero,8b14 <__muldf3+0x300>
    8b90:	49c5883a 	add	r2,r9,r7
    8b94:	1251803a 	cmpltu	r8,r2,r9
    8b98:	4291883a 	add	r8,r8,r10
    8b9c:	013fc004 	movi	r4,-256
    8ba0:	1112703a 	and	r9,r2,r4
    8ba4:	4015883a 	mov	r10,r8
    8ba8:	003fda06 	br	8b14 <__muldf3+0x300>
    8bac:	6813883a 	mov	r9,r13
    8bb0:	003fce06 	br	8aec <__muldf3+0x2d8>
    8bb4:	143f7c36 	bltu	r2,r16,89a8 <__muldf3+0x194>
    8bb8:	003fdd06 	br	8b30 <__muldf3+0x31c>
    8bbc:	12bf852e 	bgeu	r2,r10,89d4 <__muldf3+0x1c0>
    8bc0:	003fe506 	br	8b58 <__muldf3+0x344>
    8bc4:	00800084 	movi	r2,2
    8bc8:	20bf351e 	bne	r4,r2,88a0 <__muldf3+0x8c>
    8bcc:	01000074 	movhi	r4,1
    8bd0:	21321a04 	addi	r4,r4,-14232
    8bd4:	003f3f06 	br	88d4 <__muldf3+0xc0>

00008bd8 <__divdf3>:
    8bd8:	deffed04 	addi	sp,sp,-76
    8bdc:	dcc01115 	stw	r19,68(sp)
    8be0:	dcc00404 	addi	r19,sp,16
    8be4:	2011883a 	mov	r8,r4
    8be8:	2813883a 	mov	r9,r5
    8bec:	dc000e15 	stw	r16,56(sp)
    8bf0:	d809883a 	mov	r4,sp
    8bf4:	980b883a 	mov	r5,r19
    8bf8:	dc000904 	addi	r16,sp,36
    8bfc:	dfc01215 	stw	ra,72(sp)
    8c00:	da400115 	stw	r9,4(sp)
    8c04:	d9c00315 	stw	r7,12(sp)
    8c08:	da000015 	stw	r8,0(sp)
    8c0c:	d9800215 	stw	r6,8(sp)
    8c10:	dc801015 	stw	r18,64(sp)
    8c14:	dc400f15 	stw	r17,60(sp)
    8c18:	00099b40 	call	99b4 <__unpack_d>
    8c1c:	d9000204 	addi	r4,sp,8
    8c20:	800b883a 	mov	r5,r16
    8c24:	00099b40 	call	99b4 <__unpack_d>
    8c28:	d9000417 	ldw	r4,16(sp)
    8c2c:	00800044 	movi	r2,1
    8c30:	11000b2e 	bgeu	r2,r4,8c60 <__divdf3+0x88>
    8c34:	d9400917 	ldw	r5,36(sp)
    8c38:	1140762e 	bgeu	r2,r5,8e14 <__divdf3+0x23c>
    8c3c:	d8800517 	ldw	r2,20(sp)
    8c40:	d8c00a17 	ldw	r3,40(sp)
    8c44:	01800104 	movi	r6,4
    8c48:	10c4f03a 	xor	r2,r2,r3
    8c4c:	d8800515 	stw	r2,20(sp)
    8c50:	21800226 	beq	r4,r6,8c5c <__divdf3+0x84>
    8c54:	00800084 	movi	r2,2
    8c58:	2080141e 	bne	r4,r2,8cac <__divdf3+0xd4>
    8c5c:	29000926 	beq	r5,r4,8c84 <__divdf3+0xac>
    8c60:	9809883a 	mov	r4,r19
    8c64:	00096a00 	call	96a0 <__pack_d>
    8c68:	dfc01217 	ldw	ra,72(sp)
    8c6c:	dcc01117 	ldw	r19,68(sp)
    8c70:	dc801017 	ldw	r18,64(sp)
    8c74:	dc400f17 	ldw	r17,60(sp)
    8c78:	dc000e17 	ldw	r16,56(sp)
    8c7c:	dec01304 	addi	sp,sp,76
    8c80:	f800283a 	ret
    8c84:	01000074 	movhi	r4,1
    8c88:	21321a04 	addi	r4,r4,-14232
    8c8c:	00096a00 	call	96a0 <__pack_d>
    8c90:	dfc01217 	ldw	ra,72(sp)
    8c94:	dcc01117 	ldw	r19,68(sp)
    8c98:	dc801017 	ldw	r18,64(sp)
    8c9c:	dc400f17 	ldw	r17,60(sp)
    8ca0:	dc000e17 	ldw	r16,56(sp)
    8ca4:	dec01304 	addi	sp,sp,76
    8ca8:	f800283a 	ret
    8cac:	29805b26 	beq	r5,r6,8e1c <__divdf3+0x244>
    8cb0:	28802d26 	beq	r5,r2,8d68 <__divdf3+0x190>
    8cb4:	d8c00617 	ldw	r3,24(sp)
    8cb8:	d8800b17 	ldw	r2,44(sp)
    8cbc:	d9c00817 	ldw	r7,32(sp)
    8cc0:	dc400d17 	ldw	r17,52(sp)
    8cc4:	188bc83a 	sub	r5,r3,r2
    8cc8:	d9800717 	ldw	r6,28(sp)
    8ccc:	dc000c17 	ldw	r16,48(sp)
    8cd0:	d9400615 	stw	r5,24(sp)
    8cd4:	3c403836 	bltu	r7,r17,8db8 <__divdf3+0x1e0>
    8cd8:	89c03626 	beq	r17,r7,8db4 <__divdf3+0x1dc>
    8cdc:	0015883a 	mov	r10,zero
    8ce0:	001d883a 	mov	r14,zero
    8ce4:	02c40034 	movhi	r11,4096
    8ce8:	001f883a 	mov	r15,zero
    8cec:	003f883a 	mov	ra,zero
    8cf0:	04800f44 	movi	r18,61
    8cf4:	00000f06 	br	8d34 <__divdf3+0x15c>
    8cf8:	601d883a 	mov	r14,r12
    8cfc:	681f883a 	mov	r15,r13
    8d00:	400d883a 	mov	r6,r8
    8d04:	100f883a 	mov	r7,r2
    8d08:	3191883a 	add	r8,r6,r6
    8d0c:	5808d07a 	srli	r4,r11,1
    8d10:	4185803a 	cmpltu	r2,r8,r6
    8d14:	39d3883a 	add	r9,r7,r7
    8d18:	28c6b03a 	or	r3,r5,r3
    8d1c:	1245883a 	add	r2,r2,r9
    8d20:	1815883a 	mov	r10,r3
    8d24:	2017883a 	mov	r11,r4
    8d28:	400d883a 	mov	r6,r8
    8d2c:	100f883a 	mov	r7,r2
    8d30:	fc801726 	beq	ra,r18,8d90 <__divdf3+0x1b8>
    8d34:	580a97fa 	slli	r5,r11,31
    8d38:	5006d07a 	srli	r3,r10,1
    8d3c:	ffc00044 	addi	ra,ra,1
    8d40:	3c7ff136 	bltu	r7,r17,8d08 <__divdf3+0x130>
    8d44:	3411c83a 	sub	r8,r6,r16
    8d48:	3205803a 	cmpltu	r2,r6,r8
    8d4c:	3c53c83a 	sub	r9,r7,r17
    8d50:	7298b03a 	or	r12,r14,r10
    8d54:	7adab03a 	or	r13,r15,r11
    8d58:	4885c83a 	sub	r2,r9,r2
    8d5c:	89ffe61e 	bne	r17,r7,8cf8 <__divdf3+0x120>
    8d60:	343fe936 	bltu	r6,r16,8d08 <__divdf3+0x130>
    8d64:	003fe406 	br	8cf8 <__divdf3+0x120>
    8d68:	9809883a 	mov	r4,r19
    8d6c:	d9800415 	stw	r6,16(sp)
    8d70:	00096a00 	call	96a0 <__pack_d>
    8d74:	dfc01217 	ldw	ra,72(sp)
    8d78:	dcc01117 	ldw	r19,68(sp)
    8d7c:	dc801017 	ldw	r18,64(sp)
    8d80:	dc400f17 	ldw	r17,60(sp)
    8d84:	dc000e17 	ldw	r16,56(sp)
    8d88:	dec01304 	addi	sp,sp,76
    8d8c:	f800283a 	ret
    8d90:	00803fc4 	movi	r2,255
    8d94:	7090703a 	and	r8,r14,r2
    8d98:	00802004 	movi	r2,128
    8d9c:	0007883a 	mov	r3,zero
    8da0:	0013883a 	mov	r9,zero
    8da4:	40800d26 	beq	r8,r2,8ddc <__divdf3+0x204>
    8da8:	dbc00815 	stw	r15,32(sp)
    8dac:	db800715 	stw	r14,28(sp)
    8db0:	003fab06 	br	8c60 <__divdf3+0x88>
    8db4:	343fc92e 	bgeu	r6,r16,8cdc <__divdf3+0x104>
    8db8:	3185883a 	add	r2,r6,r6
    8dbc:	1189803a 	cmpltu	r4,r2,r6
    8dc0:	39c7883a 	add	r3,r7,r7
    8dc4:	20c9883a 	add	r4,r4,r3
    8dc8:	297fffc4 	addi	r5,r5,-1
    8dcc:	100d883a 	mov	r6,r2
    8dd0:	200f883a 	mov	r7,r4
    8dd4:	d9400615 	stw	r5,24(sp)
    8dd8:	003fc006 	br	8cdc <__divdf3+0x104>
    8ddc:	483ff21e 	bne	r9,zero,8da8 <__divdf3+0x1d0>
    8de0:	01004004 	movi	r4,256
    8de4:	7104703a 	and	r2,r14,r4
    8de8:	10c4b03a 	or	r2,r2,r3
    8dec:	103fee1e 	bne	r2,zero,8da8 <__divdf3+0x1d0>
    8df0:	31c4b03a 	or	r2,r6,r7
    8df4:	103fec26 	beq	r2,zero,8da8 <__divdf3+0x1d0>
    8df8:	7205883a 	add	r2,r14,r8
    8dfc:	1391803a 	cmpltu	r8,r2,r14
    8e00:	43d1883a 	add	r8,r8,r15
    8e04:	013fc004 	movi	r4,-256
    8e08:	111c703a 	and	r14,r2,r4
    8e0c:	401f883a 	mov	r15,r8
    8e10:	003fe506 	br	8da8 <__divdf3+0x1d0>
    8e14:	8009883a 	mov	r4,r16
    8e18:	003f9206 	br	8c64 <__divdf3+0x8c>
    8e1c:	9809883a 	mov	r4,r19
    8e20:	d8000715 	stw	zero,28(sp)
    8e24:	d8000815 	stw	zero,32(sp)
    8e28:	d8000615 	stw	zero,24(sp)
    8e2c:	003f8d06 	br	8c64 <__divdf3+0x8c>

00008e30 <__eqdf2>:
    8e30:	deffef04 	addi	sp,sp,-68
    8e34:	dc400f15 	stw	r17,60(sp)
    8e38:	dc400404 	addi	r17,sp,16
    8e3c:	2005883a 	mov	r2,r4
    8e40:	2807883a 	mov	r3,r5
    8e44:	dc000e15 	stw	r16,56(sp)
    8e48:	d809883a 	mov	r4,sp
    8e4c:	880b883a 	mov	r5,r17
    8e50:	dc000904 	addi	r16,sp,36
    8e54:	d8c00115 	stw	r3,4(sp)
    8e58:	d8800015 	stw	r2,0(sp)
    8e5c:	d9800215 	stw	r6,8(sp)
    8e60:	dfc01015 	stw	ra,64(sp)
    8e64:	d9c00315 	stw	r7,12(sp)
    8e68:	00099b40 	call	99b4 <__unpack_d>
    8e6c:	d9000204 	addi	r4,sp,8
    8e70:	800b883a 	mov	r5,r16
    8e74:	00099b40 	call	99b4 <__unpack_d>
    8e78:	d8800417 	ldw	r2,16(sp)
    8e7c:	00c00044 	movi	r3,1
    8e80:	180d883a 	mov	r6,r3
    8e84:	1880062e 	bgeu	r3,r2,8ea0 <__eqdf2+0x70>
    8e88:	d8800917 	ldw	r2,36(sp)
    8e8c:	8809883a 	mov	r4,r17
    8e90:	800b883a 	mov	r5,r16
    8e94:	1880022e 	bgeu	r3,r2,8ea0 <__eqdf2+0x70>
    8e98:	0009aec0 	call	9aec <__fpcmp_parts_d>
    8e9c:	100d883a 	mov	r6,r2
    8ea0:	3005883a 	mov	r2,r6
    8ea4:	dfc01017 	ldw	ra,64(sp)
    8ea8:	dc400f17 	ldw	r17,60(sp)
    8eac:	dc000e17 	ldw	r16,56(sp)
    8eb0:	dec01104 	addi	sp,sp,68
    8eb4:	f800283a 	ret

00008eb8 <__nedf2>:
    8eb8:	deffef04 	addi	sp,sp,-68
    8ebc:	dc400f15 	stw	r17,60(sp)
    8ec0:	dc400404 	addi	r17,sp,16
    8ec4:	2005883a 	mov	r2,r4
    8ec8:	2807883a 	mov	r3,r5
    8ecc:	dc000e15 	stw	r16,56(sp)
    8ed0:	d809883a 	mov	r4,sp
    8ed4:	880b883a 	mov	r5,r17
    8ed8:	dc000904 	addi	r16,sp,36
    8edc:	d8c00115 	stw	r3,4(sp)
    8ee0:	d8800015 	stw	r2,0(sp)
    8ee4:	d9800215 	stw	r6,8(sp)
    8ee8:	dfc01015 	stw	ra,64(sp)
    8eec:	d9c00315 	stw	r7,12(sp)
    8ef0:	00099b40 	call	99b4 <__unpack_d>
    8ef4:	d9000204 	addi	r4,sp,8
    8ef8:	800b883a 	mov	r5,r16
    8efc:	00099b40 	call	99b4 <__unpack_d>
    8f00:	d8800417 	ldw	r2,16(sp)
    8f04:	00c00044 	movi	r3,1
    8f08:	180d883a 	mov	r6,r3
    8f0c:	1880062e 	bgeu	r3,r2,8f28 <__nedf2+0x70>
    8f10:	d8800917 	ldw	r2,36(sp)
    8f14:	8809883a 	mov	r4,r17
    8f18:	800b883a 	mov	r5,r16
    8f1c:	1880022e 	bgeu	r3,r2,8f28 <__nedf2+0x70>
    8f20:	0009aec0 	call	9aec <__fpcmp_parts_d>
    8f24:	100d883a 	mov	r6,r2
    8f28:	3005883a 	mov	r2,r6
    8f2c:	dfc01017 	ldw	ra,64(sp)
    8f30:	dc400f17 	ldw	r17,60(sp)
    8f34:	dc000e17 	ldw	r16,56(sp)
    8f38:	dec01104 	addi	sp,sp,68
    8f3c:	f800283a 	ret

00008f40 <__gtdf2>:
    8f40:	deffef04 	addi	sp,sp,-68
    8f44:	dc400f15 	stw	r17,60(sp)
    8f48:	dc400404 	addi	r17,sp,16
    8f4c:	2005883a 	mov	r2,r4
    8f50:	2807883a 	mov	r3,r5
    8f54:	dc000e15 	stw	r16,56(sp)
    8f58:	d809883a 	mov	r4,sp
    8f5c:	880b883a 	mov	r5,r17
    8f60:	dc000904 	addi	r16,sp,36
    8f64:	d8c00115 	stw	r3,4(sp)
    8f68:	d8800015 	stw	r2,0(sp)
    8f6c:	d9800215 	stw	r6,8(sp)
    8f70:	dfc01015 	stw	ra,64(sp)
    8f74:	d9c00315 	stw	r7,12(sp)
    8f78:	00099b40 	call	99b4 <__unpack_d>
    8f7c:	d9000204 	addi	r4,sp,8
    8f80:	800b883a 	mov	r5,r16
    8f84:	00099b40 	call	99b4 <__unpack_d>
    8f88:	d8800417 	ldw	r2,16(sp)
    8f8c:	00c00044 	movi	r3,1
    8f90:	01bfffc4 	movi	r6,-1
    8f94:	1880062e 	bgeu	r3,r2,8fb0 <__gtdf2+0x70>
    8f98:	d8800917 	ldw	r2,36(sp)
    8f9c:	8809883a 	mov	r4,r17
    8fa0:	800b883a 	mov	r5,r16
    8fa4:	1880022e 	bgeu	r3,r2,8fb0 <__gtdf2+0x70>
    8fa8:	0009aec0 	call	9aec <__fpcmp_parts_d>
    8fac:	100d883a 	mov	r6,r2
    8fb0:	3005883a 	mov	r2,r6
    8fb4:	dfc01017 	ldw	ra,64(sp)
    8fb8:	dc400f17 	ldw	r17,60(sp)
    8fbc:	dc000e17 	ldw	r16,56(sp)
    8fc0:	dec01104 	addi	sp,sp,68
    8fc4:	f800283a 	ret

00008fc8 <__gedf2>:
    8fc8:	deffef04 	addi	sp,sp,-68
    8fcc:	dc400f15 	stw	r17,60(sp)
    8fd0:	dc400404 	addi	r17,sp,16
    8fd4:	2005883a 	mov	r2,r4
    8fd8:	2807883a 	mov	r3,r5
    8fdc:	dc000e15 	stw	r16,56(sp)
    8fe0:	d809883a 	mov	r4,sp
    8fe4:	880b883a 	mov	r5,r17
    8fe8:	dc000904 	addi	r16,sp,36
    8fec:	d8c00115 	stw	r3,4(sp)
    8ff0:	d8800015 	stw	r2,0(sp)
    8ff4:	d9800215 	stw	r6,8(sp)
    8ff8:	dfc01015 	stw	ra,64(sp)
    8ffc:	d9c00315 	stw	r7,12(sp)
    9000:	00099b40 	call	99b4 <__unpack_d>
    9004:	d9000204 	addi	r4,sp,8
    9008:	800b883a 	mov	r5,r16
    900c:	00099b40 	call	99b4 <__unpack_d>
    9010:	d8800417 	ldw	r2,16(sp)
    9014:	00c00044 	movi	r3,1
    9018:	01bfffc4 	movi	r6,-1
    901c:	1880062e 	bgeu	r3,r2,9038 <__gedf2+0x70>
    9020:	d8800917 	ldw	r2,36(sp)
    9024:	8809883a 	mov	r4,r17
    9028:	800b883a 	mov	r5,r16
    902c:	1880022e 	bgeu	r3,r2,9038 <__gedf2+0x70>
    9030:	0009aec0 	call	9aec <__fpcmp_parts_d>
    9034:	100d883a 	mov	r6,r2
    9038:	3005883a 	mov	r2,r6
    903c:	dfc01017 	ldw	ra,64(sp)
    9040:	dc400f17 	ldw	r17,60(sp)
    9044:	dc000e17 	ldw	r16,56(sp)
    9048:	dec01104 	addi	sp,sp,68
    904c:	f800283a 	ret

00009050 <__ltdf2>:
    9050:	deffef04 	addi	sp,sp,-68
    9054:	dc400f15 	stw	r17,60(sp)
    9058:	dc400404 	addi	r17,sp,16
    905c:	2005883a 	mov	r2,r4
    9060:	2807883a 	mov	r3,r5
    9064:	dc000e15 	stw	r16,56(sp)
    9068:	d809883a 	mov	r4,sp
    906c:	880b883a 	mov	r5,r17
    9070:	dc000904 	addi	r16,sp,36
    9074:	d8c00115 	stw	r3,4(sp)
    9078:	d8800015 	stw	r2,0(sp)
    907c:	d9800215 	stw	r6,8(sp)
    9080:	dfc01015 	stw	ra,64(sp)
    9084:	d9c00315 	stw	r7,12(sp)
    9088:	00099b40 	call	99b4 <__unpack_d>
    908c:	d9000204 	addi	r4,sp,8
    9090:	800b883a 	mov	r5,r16
    9094:	00099b40 	call	99b4 <__unpack_d>
    9098:	d8800417 	ldw	r2,16(sp)
    909c:	00c00044 	movi	r3,1
    90a0:	180d883a 	mov	r6,r3
    90a4:	1880062e 	bgeu	r3,r2,90c0 <__ltdf2+0x70>
    90a8:	d8800917 	ldw	r2,36(sp)
    90ac:	8809883a 	mov	r4,r17
    90b0:	800b883a 	mov	r5,r16
    90b4:	1880022e 	bgeu	r3,r2,90c0 <__ltdf2+0x70>
    90b8:	0009aec0 	call	9aec <__fpcmp_parts_d>
    90bc:	100d883a 	mov	r6,r2
    90c0:	3005883a 	mov	r2,r6
    90c4:	dfc01017 	ldw	ra,64(sp)
    90c8:	dc400f17 	ldw	r17,60(sp)
    90cc:	dc000e17 	ldw	r16,56(sp)
    90d0:	dec01104 	addi	sp,sp,68
    90d4:	f800283a 	ret

000090d8 <__floatsidf>:
    90d8:	2006d7fa 	srli	r3,r4,31
    90dc:	defff604 	addi	sp,sp,-40
    90e0:	008000c4 	movi	r2,3
    90e4:	dfc00915 	stw	ra,36(sp)
    90e8:	dcc00815 	stw	r19,32(sp)
    90ec:	dc800715 	stw	r18,28(sp)
    90f0:	dc400615 	stw	r17,24(sp)
    90f4:	dc000515 	stw	r16,20(sp)
    90f8:	d8800015 	stw	r2,0(sp)
    90fc:	d8c00115 	stw	r3,4(sp)
    9100:	20000f1e 	bne	r4,zero,9140 <__floatsidf+0x68>
    9104:	00800084 	movi	r2,2
    9108:	d8800015 	stw	r2,0(sp)
    910c:	d809883a 	mov	r4,sp
    9110:	00096a00 	call	96a0 <__pack_d>
    9114:	1009883a 	mov	r4,r2
    9118:	180b883a 	mov	r5,r3
    911c:	2005883a 	mov	r2,r4
    9120:	2807883a 	mov	r3,r5
    9124:	dfc00917 	ldw	ra,36(sp)
    9128:	dcc00817 	ldw	r19,32(sp)
    912c:	dc800717 	ldw	r18,28(sp)
    9130:	dc400617 	ldw	r17,24(sp)
    9134:	dc000517 	ldw	r16,20(sp)
    9138:	dec00a04 	addi	sp,sp,40
    913c:	f800283a 	ret
    9140:	00800f04 	movi	r2,60
    9144:	1807003a 	cmpeq	r3,r3,zero
    9148:	d8800215 	stw	r2,8(sp)
    914c:	18001126 	beq	r3,zero,9194 <__floatsidf+0xbc>
    9150:	0027883a 	mov	r19,zero
    9154:	2025883a 	mov	r18,r4
    9158:	d9000315 	stw	r4,12(sp)
    915c:	dcc00415 	stw	r19,16(sp)
    9160:	00096200 	call	9620 <__clzsi2>
    9164:	11000744 	addi	r4,r2,29
    9168:	013fe80e 	bge	zero,r4,910c <__floatsidf+0x34>
    916c:	10bfff44 	addi	r2,r2,-3
    9170:	10000c16 	blt	r2,zero,91a4 <__floatsidf+0xcc>
    9174:	90a2983a 	sll	r17,r18,r2
    9178:	0021883a 	mov	r16,zero
    917c:	d8800217 	ldw	r2,8(sp)
    9180:	dc400415 	stw	r17,16(sp)
    9184:	dc000315 	stw	r16,12(sp)
    9188:	1105c83a 	sub	r2,r2,r4
    918c:	d8800215 	stw	r2,8(sp)
    9190:	003fde06 	br	910c <__floatsidf+0x34>
    9194:	00a00034 	movhi	r2,32768
    9198:	20800a26 	beq	r4,r2,91c4 <__floatsidf+0xec>
    919c:	0109c83a 	sub	r4,zero,r4
    91a0:	003feb06 	br	9150 <__floatsidf+0x78>
    91a4:	9006d07a 	srli	r3,r18,1
    91a8:	008007c4 	movi	r2,31
    91ac:	1105c83a 	sub	r2,r2,r4
    91b0:	1886d83a 	srl	r3,r3,r2
    91b4:	9922983a 	sll	r17,r19,r4
    91b8:	9120983a 	sll	r16,r18,r4
    91bc:	1c62b03a 	or	r17,r3,r17
    91c0:	003fee06 	br	917c <__floatsidf+0xa4>
    91c4:	0009883a 	mov	r4,zero
    91c8:	01707834 	movhi	r5,49632
    91cc:	003fd306 	br	911c <__floatsidf+0x44>

000091d0 <__fixdfsi>:
    91d0:	defff804 	addi	sp,sp,-32
    91d4:	2005883a 	mov	r2,r4
    91d8:	2807883a 	mov	r3,r5
    91dc:	d809883a 	mov	r4,sp
    91e0:	d9400204 	addi	r5,sp,8
    91e4:	d8c00115 	stw	r3,4(sp)
    91e8:	d8800015 	stw	r2,0(sp)
    91ec:	dfc00715 	stw	ra,28(sp)
    91f0:	00099b40 	call	99b4 <__unpack_d>
    91f4:	d8c00217 	ldw	r3,8(sp)
    91f8:	00800084 	movi	r2,2
    91fc:	1880051e 	bne	r3,r2,9214 <__fixdfsi+0x44>
    9200:	0007883a 	mov	r3,zero
    9204:	1805883a 	mov	r2,r3
    9208:	dfc00717 	ldw	ra,28(sp)
    920c:	dec00804 	addi	sp,sp,32
    9210:	f800283a 	ret
    9214:	00800044 	movi	r2,1
    9218:	10fff92e 	bgeu	r2,r3,9200 <__fixdfsi+0x30>
    921c:	00800104 	movi	r2,4
    9220:	18800426 	beq	r3,r2,9234 <__fixdfsi+0x64>
    9224:	d8c00417 	ldw	r3,16(sp)
    9228:	183ff516 	blt	r3,zero,9200 <__fixdfsi+0x30>
    922c:	00800784 	movi	r2,30
    9230:	10c0080e 	bge	r2,r3,9254 <__fixdfsi+0x84>
    9234:	d8800317 	ldw	r2,12(sp)
    9238:	1000121e 	bne	r2,zero,9284 <__fixdfsi+0xb4>
    923c:	00e00034 	movhi	r3,32768
    9240:	18ffffc4 	addi	r3,r3,-1
    9244:	1805883a 	mov	r2,r3
    9248:	dfc00717 	ldw	ra,28(sp)
    924c:	dec00804 	addi	sp,sp,32
    9250:	f800283a 	ret
    9254:	00800f04 	movi	r2,60
    9258:	10d1c83a 	sub	r8,r2,r3
    925c:	40bff804 	addi	r2,r8,-32
    9260:	d9800517 	ldw	r6,20(sp)
    9264:	d9c00617 	ldw	r7,24(sp)
    9268:	10000816 	blt	r2,zero,928c <__fixdfsi+0xbc>
    926c:	3888d83a 	srl	r4,r7,r2
    9270:	d8800317 	ldw	r2,12(sp)
    9274:	2007883a 	mov	r3,r4
    9278:	103fe226 	beq	r2,zero,9204 <__fixdfsi+0x34>
    927c:	0107c83a 	sub	r3,zero,r4
    9280:	003fe006 	br	9204 <__fixdfsi+0x34>
    9284:	00e00034 	movhi	r3,32768
    9288:	003fde06 	br	9204 <__fixdfsi+0x34>
    928c:	39c7883a 	add	r3,r7,r7
    9290:	008007c4 	movi	r2,31
    9294:	1205c83a 	sub	r2,r2,r8
    9298:	1886983a 	sll	r3,r3,r2
    929c:	3208d83a 	srl	r4,r6,r8
    92a0:	1908b03a 	or	r4,r3,r4
    92a4:	003ff206 	br	9270 <__fixdfsi+0xa0>

000092a8 <__floatunsidf>:
    92a8:	defff204 	addi	sp,sp,-56
    92ac:	dfc00d15 	stw	ra,52(sp)
    92b0:	ddc00c15 	stw	r23,48(sp)
    92b4:	dd800b15 	stw	r22,44(sp)
    92b8:	dd400a15 	stw	r21,40(sp)
    92bc:	dd000915 	stw	r20,36(sp)
    92c0:	dcc00815 	stw	r19,32(sp)
    92c4:	dc800715 	stw	r18,28(sp)
    92c8:	dc400615 	stw	r17,24(sp)
    92cc:	dc000515 	stw	r16,20(sp)
    92d0:	d8000115 	stw	zero,4(sp)
    92d4:	20000f1e 	bne	r4,zero,9314 <__floatunsidf+0x6c>
    92d8:	00800084 	movi	r2,2
    92dc:	d8800015 	stw	r2,0(sp)
    92e0:	d809883a 	mov	r4,sp
    92e4:	00096a00 	call	96a0 <__pack_d>
    92e8:	dfc00d17 	ldw	ra,52(sp)
    92ec:	ddc00c17 	ldw	r23,48(sp)
    92f0:	dd800b17 	ldw	r22,44(sp)
    92f4:	dd400a17 	ldw	r21,40(sp)
    92f8:	dd000917 	ldw	r20,36(sp)
    92fc:	dcc00817 	ldw	r19,32(sp)
    9300:	dc800717 	ldw	r18,28(sp)
    9304:	dc400617 	ldw	r17,24(sp)
    9308:	dc000517 	ldw	r16,20(sp)
    930c:	dec00e04 	addi	sp,sp,56
    9310:	f800283a 	ret
    9314:	008000c4 	movi	r2,3
    9318:	00c00f04 	movi	r3,60
    931c:	002f883a 	mov	r23,zero
    9320:	202d883a 	mov	r22,r4
    9324:	d8800015 	stw	r2,0(sp)
    9328:	d8c00215 	stw	r3,8(sp)
    932c:	d9000315 	stw	r4,12(sp)
    9330:	ddc00415 	stw	r23,16(sp)
    9334:	00096200 	call	9620 <__clzsi2>
    9338:	12400744 	addi	r9,r2,29
    933c:	48000b16 	blt	r9,zero,936c <__floatunsidf+0xc4>
    9340:	483fe726 	beq	r9,zero,92e0 <__floatunsidf+0x38>
    9344:	10bfff44 	addi	r2,r2,-3
    9348:	10002e16 	blt	r2,zero,9404 <__floatunsidf+0x15c>
    934c:	b0a2983a 	sll	r17,r22,r2
    9350:	0021883a 	mov	r16,zero
    9354:	d8800217 	ldw	r2,8(sp)
    9358:	dc400415 	stw	r17,16(sp)
    935c:	dc000315 	stw	r16,12(sp)
    9360:	1245c83a 	sub	r2,r2,r9
    9364:	d8800215 	stw	r2,8(sp)
    9368:	003fdd06 	br	92e0 <__floatunsidf+0x38>
    936c:	0255c83a 	sub	r10,zero,r9
    9370:	51bff804 	addi	r6,r10,-32
    9374:	30001b16 	blt	r6,zero,93e4 <__floatunsidf+0x13c>
    9378:	b9a8d83a 	srl	r20,r23,r6
    937c:	002b883a 	mov	r21,zero
    9380:	000f883a 	mov	r7,zero
    9384:	01000044 	movi	r4,1
    9388:	0011883a 	mov	r8,zero
    938c:	30002516 	blt	r6,zero,9424 <__floatunsidf+0x17c>
    9390:	21a6983a 	sll	r19,r4,r6
    9394:	0025883a 	mov	r18,zero
    9398:	00bfffc4 	movi	r2,-1
    939c:	9089883a 	add	r4,r18,r2
    93a0:	988b883a 	add	r5,r19,r2
    93a4:	248d803a 	cmpltu	r6,r4,r18
    93a8:	314b883a 	add	r5,r6,r5
    93ac:	b104703a 	and	r2,r22,r4
    93b0:	b946703a 	and	r3,r23,r5
    93b4:	10c4b03a 	or	r2,r2,r3
    93b8:	10000226 	beq	r2,zero,93c4 <__floatunsidf+0x11c>
    93bc:	01c00044 	movi	r7,1
    93c0:	0011883a 	mov	r8,zero
    93c4:	d9000217 	ldw	r4,8(sp)
    93c8:	a1c4b03a 	or	r2,r20,r7
    93cc:	aa06b03a 	or	r3,r21,r8
    93d0:	2249c83a 	sub	r4,r4,r9
    93d4:	d8c00415 	stw	r3,16(sp)
    93d8:	d9000215 	stw	r4,8(sp)
    93dc:	d8800315 	stw	r2,12(sp)
    93e0:	003fbf06 	br	92e0 <__floatunsidf+0x38>
    93e4:	bdc7883a 	add	r3,r23,r23
    93e8:	008007c4 	movi	r2,31
    93ec:	1285c83a 	sub	r2,r2,r10
    93f0:	1886983a 	sll	r3,r3,r2
    93f4:	b2a8d83a 	srl	r20,r22,r10
    93f8:	baaad83a 	srl	r21,r23,r10
    93fc:	1d28b03a 	or	r20,r3,r20
    9400:	003fdf06 	br	9380 <__floatunsidf+0xd8>
    9404:	b006d07a 	srli	r3,r22,1
    9408:	008007c4 	movi	r2,31
    940c:	1245c83a 	sub	r2,r2,r9
    9410:	1886d83a 	srl	r3,r3,r2
    9414:	ba62983a 	sll	r17,r23,r9
    9418:	b260983a 	sll	r16,r22,r9
    941c:	1c62b03a 	or	r17,r3,r17
    9420:	003fcc06 	br	9354 <__floatunsidf+0xac>
    9424:	2006d07a 	srli	r3,r4,1
    9428:	008007c4 	movi	r2,31
    942c:	1285c83a 	sub	r2,r2,r10
    9430:	18a6d83a 	srl	r19,r3,r2
    9434:	22a4983a 	sll	r18,r4,r10
    9438:	003fd706 	br	9398 <__floatunsidf+0xf0>

0000943c <udivmodsi4>:
    943c:	29001b2e 	bgeu	r5,r4,94ac <udivmodsi4+0x70>
    9440:	28001a16 	blt	r5,zero,94ac <udivmodsi4+0x70>
    9444:	00800044 	movi	r2,1
    9448:	0007883a 	mov	r3,zero
    944c:	01c007c4 	movi	r7,31
    9450:	00000306 	br	9460 <udivmodsi4+0x24>
    9454:	19c01326 	beq	r3,r7,94a4 <udivmodsi4+0x68>
    9458:	18c00044 	addi	r3,r3,1
    945c:	28000416 	blt	r5,zero,9470 <udivmodsi4+0x34>
    9460:	294b883a 	add	r5,r5,r5
    9464:	1085883a 	add	r2,r2,r2
    9468:	293ffa36 	bltu	r5,r4,9454 <udivmodsi4+0x18>
    946c:	10000d26 	beq	r2,zero,94a4 <udivmodsi4+0x68>
    9470:	0007883a 	mov	r3,zero
    9474:	21400236 	bltu	r4,r5,9480 <udivmodsi4+0x44>
    9478:	2149c83a 	sub	r4,r4,r5
    947c:	1886b03a 	or	r3,r3,r2
    9480:	1004d07a 	srli	r2,r2,1
    9484:	280ad07a 	srli	r5,r5,1
    9488:	103ffa1e 	bne	r2,zero,9474 <udivmodsi4+0x38>
    948c:	30000226 	beq	r6,zero,9498 <udivmodsi4+0x5c>
    9490:	2005883a 	mov	r2,r4
    9494:	f800283a 	ret
    9498:	1809883a 	mov	r4,r3
    949c:	2005883a 	mov	r2,r4
    94a0:	f800283a 	ret
    94a4:	0007883a 	mov	r3,zero
    94a8:	003ff806 	br	948c <udivmodsi4+0x50>
    94ac:	00800044 	movi	r2,1
    94b0:	0007883a 	mov	r3,zero
    94b4:	003fef06 	br	9474 <udivmodsi4+0x38>

000094b8 <__divsi3>:
    94b8:	defffe04 	addi	sp,sp,-8
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	dfc00115 	stw	ra,4(sp)
    94c4:	0021883a 	mov	r16,zero
    94c8:	20000c16 	blt	r4,zero,94fc <__divsi3+0x44>
    94cc:	000d883a 	mov	r6,zero
    94d0:	28000e16 	blt	r5,zero,950c <__divsi3+0x54>
    94d4:	000943c0 	call	943c <udivmodsi4>
    94d8:	1007883a 	mov	r3,r2
    94dc:	8005003a 	cmpeq	r2,r16,zero
    94e0:	1000011e 	bne	r2,zero,94e8 <__divsi3+0x30>
    94e4:	00c7c83a 	sub	r3,zero,r3
    94e8:	1805883a 	mov	r2,r3
    94ec:	dfc00117 	ldw	ra,4(sp)
    94f0:	dc000017 	ldw	r16,0(sp)
    94f4:	dec00204 	addi	sp,sp,8
    94f8:	f800283a 	ret
    94fc:	0109c83a 	sub	r4,zero,r4
    9500:	04000044 	movi	r16,1
    9504:	000d883a 	mov	r6,zero
    9508:	283ff20e 	bge	r5,zero,94d4 <__divsi3+0x1c>
    950c:	014bc83a 	sub	r5,zero,r5
    9510:	8021003a 	cmpeq	r16,r16,zero
    9514:	003fef06 	br	94d4 <__divsi3+0x1c>

00009518 <__modsi3>:
    9518:	deffff04 	addi	sp,sp,-4
    951c:	dfc00015 	stw	ra,0(sp)
    9520:	01800044 	movi	r6,1
    9524:	2807883a 	mov	r3,r5
    9528:	20000416 	blt	r4,zero,953c <__modsi3+0x24>
    952c:	28000c16 	blt	r5,zero,9560 <__modsi3+0x48>
    9530:	dfc00017 	ldw	ra,0(sp)
    9534:	dec00104 	addi	sp,sp,4
    9538:	000943c1 	jmpi	943c <udivmodsi4>
    953c:	0109c83a 	sub	r4,zero,r4
    9540:	28000b16 	blt	r5,zero,9570 <__modsi3+0x58>
    9544:	180b883a 	mov	r5,r3
    9548:	01800044 	movi	r6,1
    954c:	000943c0 	call	943c <udivmodsi4>
    9550:	0085c83a 	sub	r2,zero,r2
    9554:	dfc00017 	ldw	ra,0(sp)
    9558:	dec00104 	addi	sp,sp,4
    955c:	f800283a 	ret
    9560:	014bc83a 	sub	r5,zero,r5
    9564:	dfc00017 	ldw	ra,0(sp)
    9568:	dec00104 	addi	sp,sp,4
    956c:	000943c1 	jmpi	943c <udivmodsi4>
    9570:	0147c83a 	sub	r3,zero,r5
    9574:	003ff306 	br	9544 <__modsi3+0x2c>

00009578 <__udivsi3>:
    9578:	000d883a 	mov	r6,zero
    957c:	000943c1 	jmpi	943c <udivmodsi4>

00009580 <__umodsi3>:
    9580:	01800044 	movi	r6,1
    9584:	000943c1 	jmpi	943c <udivmodsi4>

00009588 <__muldi3>:
    9588:	2011883a 	mov	r8,r4
    958c:	427fffcc 	andi	r9,r8,65535
    9590:	4018d43a 	srli	r12,r8,16
    9594:	32bfffcc 	andi	r10,r6,65535
    9598:	3016d43a 	srli	r11,r6,16
    959c:	4a85383a 	mul	r2,r9,r10
    95a0:	6295383a 	mul	r10,r12,r10
    95a4:	4ad3383a 	mul	r9,r9,r11
    95a8:	113fffcc 	andi	r4,r2,65535
    95ac:	1004d43a 	srli	r2,r2,16
    95b0:	4a93883a 	add	r9,r9,r10
    95b4:	3807883a 	mov	r3,r7
    95b8:	1245883a 	add	r2,r2,r9
    95bc:	280f883a 	mov	r7,r5
    95c0:	180b883a 	mov	r5,r3
    95c4:	1006943a 	slli	r3,r2,16
    95c8:	defffd04 	addi	sp,sp,-12
    95cc:	dc800215 	stw	r18,8(sp)
    95d0:	1907883a 	add	r3,r3,r4
    95d4:	dc400115 	stw	r17,4(sp)
    95d8:	dc000015 	stw	r16,0(sp)
    95dc:	4165383a 	mul	r18,r8,r5
    95e0:	31e3383a 	mul	r17,r6,r7
    95e4:	1012d43a 	srli	r9,r2,16
    95e8:	62d9383a 	mul	r12,r12,r11
    95ec:	181f883a 	mov	r15,r3
    95f0:	1280022e 	bgeu	r2,r10,95fc <__muldi3+0x74>
    95f4:	00800074 	movhi	r2,1
    95f8:	6099883a 	add	r12,r12,r2
    95fc:	624d883a 	add	r6,r12,r9
    9600:	9187883a 	add	r3,r18,r6
    9604:	88c7883a 	add	r3,r17,r3
    9608:	7805883a 	mov	r2,r15
    960c:	dc800217 	ldw	r18,8(sp)
    9610:	dc400117 	ldw	r17,4(sp)
    9614:	dc000017 	ldw	r16,0(sp)
    9618:	dec00304 	addi	sp,sp,12
    961c:	f800283a 	ret

00009620 <__clzsi2>:
    9620:	00bfffd4 	movui	r2,65535
    9624:	11000e36 	bltu	r2,r4,9660 <__clzsi2+0x40>
    9628:	00803fc4 	movi	r2,255
    962c:	01400204 	movi	r5,8
    9630:	0007883a 	mov	r3,zero
    9634:	11001036 	bltu	r2,r4,9678 <__clzsi2+0x58>
    9638:	000b883a 	mov	r5,zero
    963c:	20c6d83a 	srl	r3,r4,r3
    9640:	00800074 	movhi	r2,1
    9644:	10b21f04 	addi	r2,r2,-14212
    9648:	1887883a 	add	r3,r3,r2
    964c:	18800003 	ldbu	r2,0(r3)
    9650:	00c00804 	movi	r3,32
    9654:	2885883a 	add	r2,r5,r2
    9658:	1885c83a 	sub	r2,r3,r2
    965c:	f800283a 	ret
    9660:	01400404 	movi	r5,16
    9664:	00804034 	movhi	r2,256
    9668:	10bfffc4 	addi	r2,r2,-1
    966c:	2807883a 	mov	r3,r5
    9670:	113ff22e 	bgeu	r2,r4,963c <__clzsi2+0x1c>
    9674:	01400604 	movi	r5,24
    9678:	2807883a 	mov	r3,r5
    967c:	20c6d83a 	srl	r3,r4,r3
    9680:	00800074 	movhi	r2,1
    9684:	10b21f04 	addi	r2,r2,-14212
    9688:	1887883a 	add	r3,r3,r2
    968c:	18800003 	ldbu	r2,0(r3)
    9690:	00c00804 	movi	r3,32
    9694:	2885883a 	add	r2,r5,r2
    9698:	1885c83a 	sub	r2,r3,r2
    969c:	f800283a 	ret

000096a0 <__pack_d>:
    96a0:	20c00017 	ldw	r3,0(r4)
    96a4:	defffd04 	addi	sp,sp,-12
    96a8:	dc000015 	stw	r16,0(sp)
    96ac:	dc800215 	stw	r18,8(sp)
    96b0:	dc400115 	stw	r17,4(sp)
    96b4:	00800044 	movi	r2,1
    96b8:	22000317 	ldw	r8,12(r4)
    96bc:	001f883a 	mov	r15,zero
    96c0:	22400417 	ldw	r9,16(r4)
    96c4:	24000117 	ldw	r16,4(r4)
    96c8:	10c0552e 	bgeu	r2,r3,9820 <__pack_d+0x180>
    96cc:	00800104 	movi	r2,4
    96d0:	18804f26 	beq	r3,r2,9810 <__pack_d+0x170>
    96d4:	00800084 	movi	r2,2
    96d8:	18800226 	beq	r3,r2,96e4 <__pack_d+0x44>
    96dc:	4244b03a 	or	r2,r8,r9
    96e0:	10001a1e 	bne	r2,zero,974c <__pack_d+0xac>
    96e4:	000d883a 	mov	r6,zero
    96e8:	000f883a 	mov	r7,zero
    96ec:	0011883a 	mov	r8,zero
    96f0:	00800434 	movhi	r2,16
    96f4:	10bfffc4 	addi	r2,r2,-1
    96f8:	301d883a 	mov	r14,r6
    96fc:	3884703a 	and	r2,r7,r2
    9700:	400a953a 	slli	r5,r8,20
    9704:	79bffc2c 	andhi	r6,r15,65520
    9708:	308cb03a 	or	r6,r6,r2
    970c:	00e00434 	movhi	r3,32784
    9710:	18ffffc4 	addi	r3,r3,-1
    9714:	800497fa 	slli	r2,r16,31
    9718:	30c6703a 	and	r3,r6,r3
    971c:	1946b03a 	or	r3,r3,r5
    9720:	01600034 	movhi	r5,32768
    9724:	297fffc4 	addi	r5,r5,-1
    9728:	194a703a 	and	r5,r3,r5
    972c:	288ab03a 	or	r5,r5,r2
    9730:	2807883a 	mov	r3,r5
    9734:	7005883a 	mov	r2,r14
    9738:	dc800217 	ldw	r18,8(sp)
    973c:	dc400117 	ldw	r17,4(sp)
    9740:	dc000017 	ldw	r16,0(sp)
    9744:	dec00304 	addi	sp,sp,12
    9748:	f800283a 	ret
    974c:	21000217 	ldw	r4,8(r4)
    9750:	00bf0084 	movi	r2,-1022
    9754:	20803f16 	blt	r4,r2,9854 <__pack_d+0x1b4>
    9758:	0080ffc4 	movi	r2,1023
    975c:	11002c16 	blt	r2,r4,9810 <__pack_d+0x170>
    9760:	00803fc4 	movi	r2,255
    9764:	408c703a 	and	r6,r8,r2
    9768:	00802004 	movi	r2,128
    976c:	0007883a 	mov	r3,zero
    9770:	000f883a 	mov	r7,zero
    9774:	2280ffc4 	addi	r10,r4,1023
    9778:	30801e26 	beq	r6,r2,97f4 <__pack_d+0x154>
    977c:	00801fc4 	movi	r2,127
    9780:	4089883a 	add	r4,r8,r2
    9784:	220d803a 	cmpltu	r6,r4,r8
    9788:	324d883a 	add	r6,r6,r9
    978c:	2011883a 	mov	r8,r4
    9790:	3013883a 	mov	r9,r6
    9794:	00880034 	movhi	r2,8192
    9798:	10bfffc4 	addi	r2,r2,-1
    979c:	12400d36 	bltu	r2,r9,97d4 <__pack_d+0x134>
    97a0:	4804963a 	slli	r2,r9,24
    97a4:	400cd23a 	srli	r6,r8,8
    97a8:	480ed23a 	srli	r7,r9,8
    97ac:	013fffc4 	movi	r4,-1
    97b0:	118cb03a 	or	r6,r2,r6
    97b4:	01400434 	movhi	r5,16
    97b8:	297fffc4 	addi	r5,r5,-1
    97bc:	3104703a 	and	r2,r6,r4
    97c0:	3946703a 	and	r3,r7,r5
    97c4:	5201ffcc 	andi	r8,r10,2047
    97c8:	100d883a 	mov	r6,r2
    97cc:	180f883a 	mov	r7,r3
    97d0:	003fc706 	br	96f0 <__pack_d+0x50>
    97d4:	480897fa 	slli	r4,r9,31
    97d8:	4004d07a 	srli	r2,r8,1
    97dc:	4806d07a 	srli	r3,r9,1
    97e0:	52800044 	addi	r10,r10,1
    97e4:	2084b03a 	or	r2,r4,r2
    97e8:	1011883a 	mov	r8,r2
    97ec:	1813883a 	mov	r9,r3
    97f0:	003feb06 	br	97a0 <__pack_d+0x100>
    97f4:	383fe11e 	bne	r7,zero,977c <__pack_d+0xdc>
    97f8:	01004004 	movi	r4,256
    97fc:	4104703a 	and	r2,r8,r4
    9800:	10c4b03a 	or	r2,r2,r3
    9804:	103fe326 	beq	r2,zero,9794 <__pack_d+0xf4>
    9808:	3005883a 	mov	r2,r6
    980c:	003fdc06 	br	9780 <__pack_d+0xe0>
    9810:	000d883a 	mov	r6,zero
    9814:	000f883a 	mov	r7,zero
    9818:	0201ffc4 	movi	r8,2047
    981c:	003fb406 	br	96f0 <__pack_d+0x50>
    9820:	0005883a 	mov	r2,zero
    9824:	00c00234 	movhi	r3,8
    9828:	408cb03a 	or	r6,r8,r2
    982c:	48ceb03a 	or	r7,r9,r3
    9830:	013fffc4 	movi	r4,-1
    9834:	01400434 	movhi	r5,16
    9838:	297fffc4 	addi	r5,r5,-1
    983c:	3104703a 	and	r2,r6,r4
    9840:	3946703a 	and	r3,r7,r5
    9844:	100d883a 	mov	r6,r2
    9848:	180f883a 	mov	r7,r3
    984c:	0201ffc4 	movi	r8,2047
    9850:	003fa706 	br	96f0 <__pack_d+0x50>
    9854:	1109c83a 	sub	r4,r2,r4
    9858:	00800e04 	movi	r2,56
    985c:	11004316 	blt	r2,r4,996c <__pack_d+0x2cc>
    9860:	21fff804 	addi	r7,r4,-32
    9864:	38004516 	blt	r7,zero,997c <__pack_d+0x2dc>
    9868:	49d8d83a 	srl	r12,r9,r7
    986c:	001b883a 	mov	r13,zero
    9870:	0023883a 	mov	r17,zero
    9874:	01400044 	movi	r5,1
    9878:	0025883a 	mov	r18,zero
    987c:	38004716 	blt	r7,zero,999c <__pack_d+0x2fc>
    9880:	29d6983a 	sll	r11,r5,r7
    9884:	0015883a 	mov	r10,zero
    9888:	00bfffc4 	movi	r2,-1
    988c:	5089883a 	add	r4,r10,r2
    9890:	588b883a 	add	r5,r11,r2
    9894:	228d803a 	cmpltu	r6,r4,r10
    9898:	314b883a 	add	r5,r6,r5
    989c:	4104703a 	and	r2,r8,r4
    98a0:	4946703a 	and	r3,r9,r5
    98a4:	10c4b03a 	or	r2,r2,r3
    98a8:	10000226 	beq	r2,zero,98b4 <__pack_d+0x214>
    98ac:	04400044 	movi	r17,1
    98b0:	0025883a 	mov	r18,zero
    98b4:	00803fc4 	movi	r2,255
    98b8:	644eb03a 	or	r7,r12,r17
    98bc:	3892703a 	and	r9,r7,r2
    98c0:	00802004 	movi	r2,128
    98c4:	6c90b03a 	or	r8,r13,r18
    98c8:	0015883a 	mov	r10,zero
    98cc:	48801626 	beq	r9,r2,9928 <__pack_d+0x288>
    98d0:	01001fc4 	movi	r4,127
    98d4:	3905883a 	add	r2,r7,r4
    98d8:	11cd803a 	cmpltu	r6,r2,r7
    98dc:	320d883a 	add	r6,r6,r8
    98e0:	100f883a 	mov	r7,r2
    98e4:	00840034 	movhi	r2,4096
    98e8:	10bfffc4 	addi	r2,r2,-1
    98ec:	3011883a 	mov	r8,r6
    98f0:	0007883a 	mov	r3,zero
    98f4:	11801b36 	bltu	r2,r6,9964 <__pack_d+0x2c4>
    98f8:	4004963a 	slli	r2,r8,24
    98fc:	3808d23a 	srli	r4,r7,8
    9900:	400ad23a 	srli	r5,r8,8
    9904:	1813883a 	mov	r9,r3
    9908:	1108b03a 	or	r4,r2,r4
    990c:	00bfffc4 	movi	r2,-1
    9910:	00c00434 	movhi	r3,16
    9914:	18ffffc4 	addi	r3,r3,-1
    9918:	208c703a 	and	r6,r4,r2
    991c:	28ce703a 	and	r7,r5,r3
    9920:	4a01ffcc 	andi	r8,r9,2047
    9924:	003f7206 	br	96f0 <__pack_d+0x50>
    9928:	503fe91e 	bne	r10,zero,98d0 <__pack_d+0x230>
    992c:	01004004 	movi	r4,256
    9930:	3904703a 	and	r2,r7,r4
    9934:	0007883a 	mov	r3,zero
    9938:	10c4b03a 	or	r2,r2,r3
    993c:	10000626 	beq	r2,zero,9958 <__pack_d+0x2b8>
    9940:	3a45883a 	add	r2,r7,r9
    9944:	11cd803a 	cmpltu	r6,r2,r7
    9948:	320d883a 	add	r6,r6,r8
    994c:	100f883a 	mov	r7,r2
    9950:	3011883a 	mov	r8,r6
    9954:	0007883a 	mov	r3,zero
    9958:	00840034 	movhi	r2,4096
    995c:	10bfffc4 	addi	r2,r2,-1
    9960:	123fe52e 	bgeu	r2,r8,98f8 <__pack_d+0x258>
    9964:	00c00044 	movi	r3,1
    9968:	003fe306 	br	98f8 <__pack_d+0x258>
    996c:	0009883a 	mov	r4,zero
    9970:	0013883a 	mov	r9,zero
    9974:	000b883a 	mov	r5,zero
    9978:	003fe406 	br	990c <__pack_d+0x26c>
    997c:	4a47883a 	add	r3,r9,r9
    9980:	008007c4 	movi	r2,31
    9984:	1105c83a 	sub	r2,r2,r4
    9988:	1886983a 	sll	r3,r3,r2
    998c:	4118d83a 	srl	r12,r8,r4
    9990:	491ad83a 	srl	r13,r9,r4
    9994:	1b18b03a 	or	r12,r3,r12
    9998:	003fb506 	br	9870 <__pack_d+0x1d0>
    999c:	2806d07a 	srli	r3,r5,1
    99a0:	008007c4 	movi	r2,31
    99a4:	1105c83a 	sub	r2,r2,r4
    99a8:	1896d83a 	srl	r11,r3,r2
    99ac:	2914983a 	sll	r10,r5,r4
    99b0:	003fb506 	br	9888 <__pack_d+0x1e8>

000099b4 <__unpack_d>:
    99b4:	20c00117 	ldw	r3,4(r4)
    99b8:	22400017 	ldw	r9,0(r4)
    99bc:	00800434 	movhi	r2,16
    99c0:	10bfffc4 	addi	r2,r2,-1
    99c4:	1808d53a 	srli	r4,r3,20
    99c8:	180cd7fa 	srli	r6,r3,31
    99cc:	1894703a 	and	r10,r3,r2
    99d0:	2201ffcc 	andi	r8,r4,2047
    99d4:	281b883a 	mov	r13,r5
    99d8:	4817883a 	mov	r11,r9
    99dc:	29800115 	stw	r6,4(r5)
    99e0:	5019883a 	mov	r12,r10
    99e4:	40001e1e 	bne	r8,zero,9a60 <__unpack_d+0xac>
    99e8:	4a84b03a 	or	r2,r9,r10
    99ec:	10001926 	beq	r2,zero,9a54 <__unpack_d+0xa0>
    99f0:	4804d63a 	srli	r2,r9,24
    99f4:	500c923a 	slli	r6,r10,8
    99f8:	013f0084 	movi	r4,-1022
    99fc:	00c40034 	movhi	r3,4096
    9a00:	18ffffc4 	addi	r3,r3,-1
    9a04:	118cb03a 	or	r6,r2,r6
    9a08:	008000c4 	movi	r2,3
    9a0c:	480a923a 	slli	r5,r9,8
    9a10:	68800015 	stw	r2,0(r13)
    9a14:	69000215 	stw	r4,8(r13)
    9a18:	19800b36 	bltu	r3,r6,9a48 <__unpack_d+0x94>
    9a1c:	200f883a 	mov	r7,r4
    9a20:	1811883a 	mov	r8,r3
    9a24:	2945883a 	add	r2,r5,r5
    9a28:	1149803a 	cmpltu	r4,r2,r5
    9a2c:	3187883a 	add	r3,r6,r6
    9a30:	20c9883a 	add	r4,r4,r3
    9a34:	100b883a 	mov	r5,r2
    9a38:	200d883a 	mov	r6,r4
    9a3c:	39ffffc4 	addi	r7,r7,-1
    9a40:	413ff82e 	bgeu	r8,r4,9a24 <__unpack_d+0x70>
    9a44:	69c00215 	stw	r7,8(r13)
    9a48:	69800415 	stw	r6,16(r13)
    9a4c:	69400315 	stw	r5,12(r13)
    9a50:	f800283a 	ret
    9a54:	00800084 	movi	r2,2
    9a58:	28800015 	stw	r2,0(r5)
    9a5c:	f800283a 	ret
    9a60:	0081ffc4 	movi	r2,2047
    9a64:	40800f26 	beq	r8,r2,9aa4 <__unpack_d+0xf0>
    9a68:	480cd63a 	srli	r6,r9,24
    9a6c:	5006923a 	slli	r3,r10,8
    9a70:	4804923a 	slli	r2,r9,8
    9a74:	0009883a 	mov	r4,zero
    9a78:	30c6b03a 	or	r3,r6,r3
    9a7c:	01440034 	movhi	r5,4096
    9a80:	110cb03a 	or	r6,r2,r4
    9a84:	423f0044 	addi	r8,r8,-1023
    9a88:	194eb03a 	or	r7,r3,r5
    9a8c:	008000c4 	movi	r2,3
    9a90:	69c00415 	stw	r7,16(r13)
    9a94:	6a000215 	stw	r8,8(r13)
    9a98:	68800015 	stw	r2,0(r13)
    9a9c:	69800315 	stw	r6,12(r13)
    9aa0:	f800283a 	ret
    9aa4:	4a84b03a 	or	r2,r9,r10
    9aa8:	1000031e 	bne	r2,zero,9ab8 <__unpack_d+0x104>
    9aac:	00800104 	movi	r2,4
    9ab0:	28800015 	stw	r2,0(r5)
    9ab4:	f800283a 	ret
    9ab8:	0009883a 	mov	r4,zero
    9abc:	01400234 	movhi	r5,8
    9ac0:	4904703a 	and	r2,r9,r4
    9ac4:	5146703a 	and	r3,r10,r5
    9ac8:	10c4b03a 	or	r2,r2,r3
    9acc:	10000526 	beq	r2,zero,9ae4 <__unpack_d+0x130>
    9ad0:	00800044 	movi	r2,1
    9ad4:	68800015 	stw	r2,0(r13)
    9ad8:	6b000415 	stw	r12,16(r13)
    9adc:	6ac00315 	stw	r11,12(r13)
    9ae0:	f800283a 	ret
    9ae4:	68000015 	stw	zero,0(r13)
    9ae8:	003ffb06 	br	9ad8 <__unpack_d+0x124>

00009aec <__fpcmp_parts_d>:
    9aec:	21800017 	ldw	r6,0(r4)
    9af0:	00c00044 	movi	r3,1
    9af4:	19800a2e 	bgeu	r3,r6,9b20 <__fpcmp_parts_d+0x34>
    9af8:	28800017 	ldw	r2,0(r5)
    9afc:	1880082e 	bgeu	r3,r2,9b20 <__fpcmp_parts_d+0x34>
    9b00:	00c00104 	movi	r3,4
    9b04:	30c02626 	beq	r6,r3,9ba0 <__fpcmp_parts_d+0xb4>
    9b08:	10c02226 	beq	r2,r3,9b94 <__fpcmp_parts_d+0xa8>
    9b0c:	00c00084 	movi	r3,2
    9b10:	30c00526 	beq	r6,r3,9b28 <__fpcmp_parts_d+0x3c>
    9b14:	10c0071e 	bne	r2,r3,9b34 <__fpcmp_parts_d+0x48>
    9b18:	20800117 	ldw	r2,4(r4)
    9b1c:	1000091e 	bne	r2,zero,9b44 <__fpcmp_parts_d+0x58>
    9b20:	00800044 	movi	r2,1
    9b24:	f800283a 	ret
    9b28:	10c01a1e 	bne	r2,r3,9b94 <__fpcmp_parts_d+0xa8>
    9b2c:	0005883a 	mov	r2,zero
    9b30:	f800283a 	ret
    9b34:	22000117 	ldw	r8,4(r4)
    9b38:	28800117 	ldw	r2,4(r5)
    9b3c:	40800326 	beq	r8,r2,9b4c <__fpcmp_parts_d+0x60>
    9b40:	403ff726 	beq	r8,zero,9b20 <__fpcmp_parts_d+0x34>
    9b44:	00bfffc4 	movi	r2,-1
    9b48:	f800283a 	ret
    9b4c:	20c00217 	ldw	r3,8(r4)
    9b50:	28800217 	ldw	r2,8(r5)
    9b54:	10fffa16 	blt	r2,r3,9b40 <__fpcmp_parts_d+0x54>
    9b58:	18800916 	blt	r3,r2,9b80 <__fpcmp_parts_d+0x94>
    9b5c:	21c00417 	ldw	r7,16(r4)
    9b60:	28c00417 	ldw	r3,16(r5)
    9b64:	21800317 	ldw	r6,12(r4)
    9b68:	28800317 	ldw	r2,12(r5)
    9b6c:	19fff436 	bltu	r3,r7,9b40 <__fpcmp_parts_d+0x54>
    9b70:	38c00526 	beq	r7,r3,9b88 <__fpcmp_parts_d+0x9c>
    9b74:	38c00236 	bltu	r7,r3,9b80 <__fpcmp_parts_d+0x94>
    9b78:	19ffec1e 	bne	r3,r7,9b2c <__fpcmp_parts_d+0x40>
    9b7c:	30bfeb2e 	bgeu	r6,r2,9b2c <__fpcmp_parts_d+0x40>
    9b80:	403fe71e 	bne	r8,zero,9b20 <__fpcmp_parts_d+0x34>
    9b84:	003fef06 	br	9b44 <__fpcmp_parts_d+0x58>
    9b88:	11bffa2e 	bgeu	r2,r6,9b74 <__fpcmp_parts_d+0x88>
    9b8c:	403fe426 	beq	r8,zero,9b20 <__fpcmp_parts_d+0x34>
    9b90:	003fec06 	br	9b44 <__fpcmp_parts_d+0x58>
    9b94:	28800117 	ldw	r2,4(r5)
    9b98:	103fe11e 	bne	r2,zero,9b20 <__fpcmp_parts_d+0x34>
    9b9c:	003fe906 	br	9b44 <__fpcmp_parts_d+0x58>
    9ba0:	11bfdd1e 	bne	r2,r6,9b18 <__fpcmp_parts_d+0x2c>
    9ba4:	28c00117 	ldw	r3,4(r5)
    9ba8:	20800117 	ldw	r2,4(r4)
    9bac:	1885c83a 	sub	r2,r3,r2
    9bb0:	f800283a 	ret

00009bb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9bb4:	defff804 	addi	sp,sp,-32
    9bb8:	dfc00715 	stw	ra,28(sp)
    9bbc:	df000615 	stw	fp,24(sp)
    9bc0:	df000604 	addi	fp,sp,24
    9bc4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9bc8:	e0bffc17 	ldw	r2,-16(fp)
    9bcc:	1004803a 	cmplt	r2,r2,zero
    9bd0:	1000081e 	bne	r2,zero,9bf4 <close+0x40>
    9bd4:	e0bffc17 	ldw	r2,-16(fp)
    9bd8:	10800324 	muli	r2,r2,12
    9bdc:	1007883a 	mov	r3,r2
    9be0:	00800074 	movhi	r2,1
    9be4:	10b48504 	addi	r2,r2,-11756
    9be8:	1887883a 	add	r3,r3,r2
    9bec:	e0ffff15 	stw	r3,-4(fp)
    9bf0:	00000106 	br	9bf8 <close+0x44>
    9bf4:	e03fff15 	stw	zero,-4(fp)
    9bf8:	e0bfff17 	ldw	r2,-4(fp)
    9bfc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9c00:	e0bffb17 	ldw	r2,-20(fp)
    9c04:	1005003a 	cmpeq	r2,r2,zero
    9c08:	10001d1e 	bne	r2,zero,9c80 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9c0c:	e0bffb17 	ldw	r2,-20(fp)
    9c10:	10800017 	ldw	r2,0(r2)
    9c14:	10800417 	ldw	r2,16(r2)
    9c18:	1005003a 	cmpeq	r2,r2,zero
    9c1c:	1000071e 	bne	r2,zero,9c3c <close+0x88>
    9c20:	e0bffb17 	ldw	r2,-20(fp)
    9c24:	10800017 	ldw	r2,0(r2)
    9c28:	10800417 	ldw	r2,16(r2)
    9c2c:	e13ffb17 	ldw	r4,-20(fp)
    9c30:	103ee83a 	callr	r2
    9c34:	e0bffe15 	stw	r2,-8(fp)
    9c38:	00000106 	br	9c40 <close+0x8c>
    9c3c:	e03ffe15 	stw	zero,-8(fp)
    9c40:	e0bffe17 	ldw	r2,-8(fp)
    9c44:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9c48:	e13ffc17 	ldw	r4,-16(fp)
    9c4c:	000a3f80 	call	a3f8 <alt_release_fd>
    if (rval < 0)
    9c50:	e0bffa17 	ldw	r2,-24(fp)
    9c54:	1004403a 	cmpge	r2,r2,zero
    9c58:	1000071e 	bne	r2,zero,9c78 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9c5c:	0009cb00 	call	9cb0 <alt_get_errno>
    9c60:	e0fffa17 	ldw	r3,-24(fp)
    9c64:	00c7c83a 	sub	r3,zero,r3
    9c68:	10c00015 	stw	r3,0(r2)
      return -1;
    9c6c:	00bfffc4 	movi	r2,-1
    9c70:	e0bffd15 	stw	r2,-12(fp)
    9c74:	00000806 	br	9c98 <close+0xe4>
    }
    return 0;
    9c78:	e03ffd15 	stw	zero,-12(fp)
    9c7c:	00000606 	br	9c98 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9c80:	0009cb00 	call	9cb0 <alt_get_errno>
    9c84:	1007883a 	mov	r3,r2
    9c88:	00801444 	movi	r2,81
    9c8c:	18800015 	stw	r2,0(r3)
    return -1;
    9c90:	00bfffc4 	movi	r2,-1
    9c94:	e0bffd15 	stw	r2,-12(fp)
    9c98:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9c9c:	e037883a 	mov	sp,fp
    9ca0:	dfc00117 	ldw	ra,4(sp)
    9ca4:	df000017 	ldw	fp,0(sp)
    9ca8:	dec00204 	addi	sp,sp,8
    9cac:	f800283a 	ret

00009cb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cb0:	defffd04 	addi	sp,sp,-12
    9cb4:	dfc00215 	stw	ra,8(sp)
    9cb8:	df000115 	stw	fp,4(sp)
    9cbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9cc0:	00800074 	movhi	r2,1
    9cc4:	10b92904 	addi	r2,r2,-7004
    9cc8:	10800017 	ldw	r2,0(r2)
    9ccc:	1005003a 	cmpeq	r2,r2,zero
    9cd0:	1000061e 	bne	r2,zero,9cec <alt_get_errno+0x3c>
    9cd4:	00800074 	movhi	r2,1
    9cd8:	10b92904 	addi	r2,r2,-7004
    9cdc:	10800017 	ldw	r2,0(r2)
    9ce0:	103ee83a 	callr	r2
    9ce4:	e0bfff15 	stw	r2,-4(fp)
    9ce8:	00000306 	br	9cf8 <alt_get_errno+0x48>
    9cec:	00800074 	movhi	r2,1
    9cf0:	10bfed04 	addi	r2,r2,-76
    9cf4:	e0bfff15 	stw	r2,-4(fp)
    9cf8:	e0bfff17 	ldw	r2,-4(fp)
}
    9cfc:	e037883a 	mov	sp,fp
    9d00:	dfc00117 	ldw	ra,4(sp)
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00204 	addi	sp,sp,8
    9d0c:	f800283a 	ret

00009d10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9d10:	defffc04 	addi	sp,sp,-16
    9d14:	df000315 	stw	fp,12(sp)
    9d18:	df000304 	addi	fp,sp,12
    9d1c:	e13ffd15 	stw	r4,-12(fp)
    9d20:	e17ffe15 	stw	r5,-8(fp)
    9d24:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9d28:	e0bfff17 	ldw	r2,-4(fp)
}
    9d2c:	e037883a 	mov	sp,fp
    9d30:	df000017 	ldw	fp,0(sp)
    9d34:	dec00104 	addi	sp,sp,4
    9d38:	f800283a 	ret

00009d3c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9d3c:	defff904 	addi	sp,sp,-28
    9d40:	dfc00615 	stw	ra,24(sp)
    9d44:	df000515 	stw	fp,20(sp)
    9d48:	df000504 	addi	fp,sp,20
    9d4c:	e13ffc15 	stw	r4,-16(fp)
    9d50:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9d54:	e0bffc17 	ldw	r2,-16(fp)
    9d58:	1004803a 	cmplt	r2,r2,zero
    9d5c:	1000081e 	bne	r2,zero,9d80 <fstat+0x44>
    9d60:	e0bffc17 	ldw	r2,-16(fp)
    9d64:	10800324 	muli	r2,r2,12
    9d68:	1007883a 	mov	r3,r2
    9d6c:	00800074 	movhi	r2,1
    9d70:	10b48504 	addi	r2,r2,-11756
    9d74:	1887883a 	add	r3,r3,r2
    9d78:	e0ffff15 	stw	r3,-4(fp)
    9d7c:	00000106 	br	9d84 <fstat+0x48>
    9d80:	e03fff15 	stw	zero,-4(fp)
    9d84:	e0bfff17 	ldw	r2,-4(fp)
    9d88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9d8c:	e0bffb17 	ldw	r2,-20(fp)
    9d90:	1005003a 	cmpeq	r2,r2,zero
    9d94:	1000121e 	bne	r2,zero,9de0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9d98:	e0bffb17 	ldw	r2,-20(fp)
    9d9c:	10800017 	ldw	r2,0(r2)
    9da0:	10800817 	ldw	r2,32(r2)
    9da4:	1005003a 	cmpeq	r2,r2,zero
    9da8:	1000081e 	bne	r2,zero,9dcc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9dac:	e0bffb17 	ldw	r2,-20(fp)
    9db0:	10800017 	ldw	r2,0(r2)
    9db4:	10800817 	ldw	r2,32(r2)
    9db8:	e13ffb17 	ldw	r4,-20(fp)
    9dbc:	e17ffd17 	ldw	r5,-12(fp)
    9dc0:	103ee83a 	callr	r2
    9dc4:	e0bffe15 	stw	r2,-8(fp)
    9dc8:	00000b06 	br	9df8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9dcc:	e0fffd17 	ldw	r3,-12(fp)
    9dd0:	00880004 	movi	r2,8192
    9dd4:	18800115 	stw	r2,4(r3)
      return 0;
    9dd8:	e03ffe15 	stw	zero,-8(fp)
    9ddc:	00000606 	br	9df8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9de0:	0009e100 	call	9e10 <alt_get_errno>
    9de4:	1007883a 	mov	r3,r2
    9de8:	00801444 	movi	r2,81
    9dec:	18800015 	stw	r2,0(r3)
    return -1;
    9df0:	00bfffc4 	movi	r2,-1
    9df4:	e0bffe15 	stw	r2,-8(fp)
    9df8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9dfc:	e037883a 	mov	sp,fp
    9e00:	dfc00117 	ldw	ra,4(sp)
    9e04:	df000017 	ldw	fp,0(sp)
    9e08:	dec00204 	addi	sp,sp,8
    9e0c:	f800283a 	ret

00009e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e10:	defffd04 	addi	sp,sp,-12
    9e14:	dfc00215 	stw	ra,8(sp)
    9e18:	df000115 	stw	fp,4(sp)
    9e1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e20:	00800074 	movhi	r2,1
    9e24:	10b92904 	addi	r2,r2,-7004
    9e28:	10800017 	ldw	r2,0(r2)
    9e2c:	1005003a 	cmpeq	r2,r2,zero
    9e30:	1000061e 	bne	r2,zero,9e4c <alt_get_errno+0x3c>
    9e34:	00800074 	movhi	r2,1
    9e38:	10b92904 	addi	r2,r2,-7004
    9e3c:	10800017 	ldw	r2,0(r2)
    9e40:	103ee83a 	callr	r2
    9e44:	e0bfff15 	stw	r2,-4(fp)
    9e48:	00000306 	br	9e58 <alt_get_errno+0x48>
    9e4c:	00800074 	movhi	r2,1
    9e50:	10bfed04 	addi	r2,r2,-76
    9e54:	e0bfff15 	stw	r2,-4(fp)
    9e58:	e0bfff17 	ldw	r2,-4(fp)
}
    9e5c:	e037883a 	mov	sp,fp
    9e60:	dfc00117 	ldw	ra,4(sp)
    9e64:	df000017 	ldw	fp,0(sp)
    9e68:	dec00204 	addi	sp,sp,8
    9e6c:	f800283a 	ret

00009e70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9e70:	deffeb04 	addi	sp,sp,-84
    9e74:	dfc01415 	stw	ra,80(sp)
    9e78:	df001315 	stw	fp,76(sp)
    9e7c:	df001304 	addi	fp,sp,76
    9e80:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9e84:	e0bffd17 	ldw	r2,-12(fp)
    9e88:	1004803a 	cmplt	r2,r2,zero
    9e8c:	1000081e 	bne	r2,zero,9eb0 <isatty+0x40>
    9e90:	e0bffd17 	ldw	r2,-12(fp)
    9e94:	10800324 	muli	r2,r2,12
    9e98:	1007883a 	mov	r3,r2
    9e9c:	00800074 	movhi	r2,1
    9ea0:	10b48504 	addi	r2,r2,-11756
    9ea4:	1887883a 	add	r3,r3,r2
    9ea8:	e0ffff15 	stw	r3,-4(fp)
    9eac:	00000106 	br	9eb4 <isatty+0x44>
    9eb0:	e03fff15 	stw	zero,-4(fp)
    9eb4:	e0bfff17 	ldw	r2,-4(fp)
    9eb8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    9ebc:	e0bfed17 	ldw	r2,-76(fp)
    9ec0:	1005003a 	cmpeq	r2,r2,zero
    9ec4:	10000f1e 	bne	r2,zero,9f04 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9ec8:	e0bfed17 	ldw	r2,-76(fp)
    9ecc:	10800017 	ldw	r2,0(r2)
    9ed0:	10800817 	ldw	r2,32(r2)
    9ed4:	1004c03a 	cmpne	r2,r2,zero
    9ed8:	1000031e 	bne	r2,zero,9ee8 <isatty+0x78>
    {
      return 1;
    9edc:	00800044 	movi	r2,1
    9ee0:	e0bffe15 	stw	r2,-8(fp)
    9ee4:	00000c06 	br	9f18 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9ee8:	e17fee04 	addi	r5,fp,-72
    9eec:	e13ffd17 	ldw	r4,-12(fp)
    9ef0:	0009d3c0 	call	9d3c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9ef4:	e0bfef17 	ldw	r2,-68(fp)
    9ef8:	10880020 	cmpeqi	r2,r2,8192
    9efc:	e0bffe15 	stw	r2,-8(fp)
    9f00:	00000506 	br	9f18 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9f04:	0009f300 	call	9f30 <alt_get_errno>
    9f08:	1007883a 	mov	r3,r2
    9f0c:	00801444 	movi	r2,81
    9f10:	18800015 	stw	r2,0(r3)
    return 0;
    9f14:	e03ffe15 	stw	zero,-8(fp)
    9f18:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9f1c:	e037883a 	mov	sp,fp
    9f20:	dfc00117 	ldw	ra,4(sp)
    9f24:	df000017 	ldw	fp,0(sp)
    9f28:	dec00204 	addi	sp,sp,8
    9f2c:	f800283a 	ret

00009f30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f30:	defffd04 	addi	sp,sp,-12
    9f34:	dfc00215 	stw	ra,8(sp)
    9f38:	df000115 	stw	fp,4(sp)
    9f3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f40:	00800074 	movhi	r2,1
    9f44:	10b92904 	addi	r2,r2,-7004
    9f48:	10800017 	ldw	r2,0(r2)
    9f4c:	1005003a 	cmpeq	r2,r2,zero
    9f50:	1000061e 	bne	r2,zero,9f6c <alt_get_errno+0x3c>
    9f54:	00800074 	movhi	r2,1
    9f58:	10b92904 	addi	r2,r2,-7004
    9f5c:	10800017 	ldw	r2,0(r2)
    9f60:	103ee83a 	callr	r2
    9f64:	e0bfff15 	stw	r2,-4(fp)
    9f68:	00000306 	br	9f78 <alt_get_errno+0x48>
    9f6c:	00800074 	movhi	r2,1
    9f70:	10bfed04 	addi	r2,r2,-76
    9f74:	e0bfff15 	stw	r2,-4(fp)
    9f78:	e0bfff17 	ldw	r2,-4(fp)
}
    9f7c:	e037883a 	mov	sp,fp
    9f80:	dfc00117 	ldw	ra,4(sp)
    9f84:	df000017 	ldw	fp,0(sp)
    9f88:	dec00204 	addi	sp,sp,8
    9f8c:	f800283a 	ret

00009f90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9f90:	defffe04 	addi	sp,sp,-8
    9f94:	dfc00115 	stw	ra,4(sp)
    9f98:	df000015 	stw	fp,0(sp)
    9f9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9fa0:	01000074 	movhi	r4,1
    9fa4:	21392e04 	addi	r4,r4,-6984
    9fa8:	01400074 	movhi	r5,1
    9fac:	29727604 	addi	r5,r5,-13864
    9fb0:	01800074 	movhi	r6,1
    9fb4:	31b92e04 	addi	r6,r6,-6984
    9fb8:	000a0100 	call	a010 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9fbc:	01000034 	movhi	r4,0
    9fc0:	21000804 	addi	r4,r4,32
    9fc4:	01400034 	movhi	r5,0
    9fc8:	29400804 	addi	r5,r5,32
    9fcc:	01800034 	movhi	r6,0
    9fd0:	31806d04 	addi	r6,r6,436
    9fd4:	000a0100 	call	a010 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9fd8:	01000074 	movhi	r4,1
    9fdc:	21319004 	addi	r4,r4,-14784
    9fe0:	01400074 	movhi	r5,1
    9fe4:	29719004 	addi	r5,r5,-14784
    9fe8:	01800074 	movhi	r6,1
    9fec:	31b27604 	addi	r6,r6,-13864
    9ff0:	000a0100 	call	a010 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9ff4:	000b4800 	call	b480 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9ff8:	000b6780 	call	b678 <alt_icache_flush_all>
}
    9ffc:	e037883a 	mov	sp,fp
    a000:	dfc00117 	ldw	ra,4(sp)
    a004:	df000017 	ldw	fp,0(sp)
    a008:	dec00204 	addi	sp,sp,8
    a00c:	f800283a 	ret

0000a010 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a010:	defffc04 	addi	sp,sp,-16
    a014:	df000315 	stw	fp,12(sp)
    a018:	df000304 	addi	fp,sp,12
    a01c:	e13ffd15 	stw	r4,-12(fp)
    a020:	e17ffe15 	stw	r5,-8(fp)
    a024:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a028:	e0fffe17 	ldw	r3,-8(fp)
    a02c:	e0bffd17 	ldw	r2,-12(fp)
    a030:	18800e26 	beq	r3,r2,a06c <alt_load_section+0x5c>
  {
    while( to != end )
    a034:	00000a06 	br	a060 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a038:	e0bffd17 	ldw	r2,-12(fp)
    a03c:	10c00017 	ldw	r3,0(r2)
    a040:	e0bffe17 	ldw	r2,-8(fp)
    a044:	10c00015 	stw	r3,0(r2)
    a048:	e0bffe17 	ldw	r2,-8(fp)
    a04c:	10800104 	addi	r2,r2,4
    a050:	e0bffe15 	stw	r2,-8(fp)
    a054:	e0bffd17 	ldw	r2,-12(fp)
    a058:	10800104 	addi	r2,r2,4
    a05c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a060:	e0fffe17 	ldw	r3,-8(fp)
    a064:	e0bfff17 	ldw	r2,-4(fp)
    a068:	18bff31e 	bne	r3,r2,a038 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a06c:	e037883a 	mov	sp,fp
    a070:	df000017 	ldw	fp,0(sp)
    a074:	dec00104 	addi	sp,sp,4
    a078:	f800283a 	ret

0000a07c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a07c:	defff804 	addi	sp,sp,-32
    a080:	dfc00715 	stw	ra,28(sp)
    a084:	df000615 	stw	fp,24(sp)
    a088:	df000604 	addi	fp,sp,24
    a08c:	e13ffc15 	stw	r4,-16(fp)
    a090:	e17ffd15 	stw	r5,-12(fp)
    a094:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a098:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a09c:	e0bffc17 	ldw	r2,-16(fp)
    a0a0:	1004803a 	cmplt	r2,r2,zero
    a0a4:	1000081e 	bne	r2,zero,a0c8 <lseek+0x4c>
    a0a8:	e0bffc17 	ldw	r2,-16(fp)
    a0ac:	10800324 	muli	r2,r2,12
    a0b0:	1007883a 	mov	r3,r2
    a0b4:	00800074 	movhi	r2,1
    a0b8:	10b48504 	addi	r2,r2,-11756
    a0bc:	1887883a 	add	r3,r3,r2
    a0c0:	e0ffff15 	stw	r3,-4(fp)
    a0c4:	00000106 	br	a0cc <lseek+0x50>
    a0c8:	e03fff15 	stw	zero,-4(fp)
    a0cc:	e0bfff17 	ldw	r2,-4(fp)
    a0d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a0d4:	e0bffb17 	ldw	r2,-20(fp)
    a0d8:	1005003a 	cmpeq	r2,r2,zero
    a0dc:	1000111e 	bne	r2,zero,a124 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a0e0:	e0bffb17 	ldw	r2,-20(fp)
    a0e4:	10800017 	ldw	r2,0(r2)
    a0e8:	10800717 	ldw	r2,28(r2)
    a0ec:	1005003a 	cmpeq	r2,r2,zero
    a0f0:	1000091e 	bne	r2,zero,a118 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a0f4:	e0bffb17 	ldw	r2,-20(fp)
    a0f8:	10800017 	ldw	r2,0(r2)
    a0fc:	10800717 	ldw	r2,28(r2)
    a100:	e13ffb17 	ldw	r4,-20(fp)
    a104:	e17ffd17 	ldw	r5,-12(fp)
    a108:	e1bffe17 	ldw	r6,-8(fp)
    a10c:	103ee83a 	callr	r2
    a110:	e0bffa15 	stw	r2,-24(fp)
    a114:	00000506 	br	a12c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a118:	00bfde84 	movi	r2,-134
    a11c:	e0bffa15 	stw	r2,-24(fp)
    a120:	00000206 	br	a12c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a124:	00bfebc4 	movi	r2,-81
    a128:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a12c:	e0bffa17 	ldw	r2,-24(fp)
    a130:	1004403a 	cmpge	r2,r2,zero
    a134:	1000071e 	bne	r2,zero,a154 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a138:	000a16c0 	call	a16c <alt_get_errno>
    a13c:	1007883a 	mov	r3,r2
    a140:	e0bffa17 	ldw	r2,-24(fp)
    a144:	0085c83a 	sub	r2,zero,r2
    a148:	18800015 	stw	r2,0(r3)
    rc = -1;
    a14c:	00bfffc4 	movi	r2,-1
    a150:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a154:	e0bffa17 	ldw	r2,-24(fp)
}
    a158:	e037883a 	mov	sp,fp
    a15c:	dfc00117 	ldw	ra,4(sp)
    a160:	df000017 	ldw	fp,0(sp)
    a164:	dec00204 	addi	sp,sp,8
    a168:	f800283a 	ret

0000a16c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a16c:	defffd04 	addi	sp,sp,-12
    a170:	dfc00215 	stw	ra,8(sp)
    a174:	df000115 	stw	fp,4(sp)
    a178:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a17c:	00800074 	movhi	r2,1
    a180:	10b92904 	addi	r2,r2,-7004
    a184:	10800017 	ldw	r2,0(r2)
    a188:	1005003a 	cmpeq	r2,r2,zero
    a18c:	1000061e 	bne	r2,zero,a1a8 <alt_get_errno+0x3c>
    a190:	00800074 	movhi	r2,1
    a194:	10b92904 	addi	r2,r2,-7004
    a198:	10800017 	ldw	r2,0(r2)
    a19c:	103ee83a 	callr	r2
    a1a0:	e0bfff15 	stw	r2,-4(fp)
    a1a4:	00000306 	br	a1b4 <alt_get_errno+0x48>
    a1a8:	00800074 	movhi	r2,1
    a1ac:	10bfed04 	addi	r2,r2,-76
    a1b0:	e0bfff15 	stw	r2,-4(fp)
    a1b4:	e0bfff17 	ldw	r2,-4(fp)
}
    a1b8:	e037883a 	mov	sp,fp
    a1bc:	dfc00117 	ldw	ra,4(sp)
    a1c0:	df000017 	ldw	fp,0(sp)
    a1c4:	dec00204 	addi	sp,sp,8
    a1c8:	f800283a 	ret

0000a1cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a1cc:	defffd04 	addi	sp,sp,-12
    a1d0:	dfc00215 	stw	ra,8(sp)
    a1d4:	df000115 	stw	fp,4(sp)
    a1d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a1dc:	0009883a 	mov	r4,zero
    a1e0:	000a6940 	call	a694 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a1e4:	000a6c80 	call	a6c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a1e8:	01000074 	movhi	r4,1
    a1ec:	21326204 	addi	r4,r4,-13944
    a1f0:	01400074 	movhi	r5,1
    a1f4:	29726204 	addi	r5,r5,-13944
    a1f8:	01800074 	movhi	r6,1
    a1fc:	31b26204 	addi	r6,r6,-13944
    a200:	000ba380 	call	ba38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a204:	000b5b00 	call	b5b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a208:	01000074 	movhi	r4,1
    a20c:	212d8504 	addi	r4,r4,-18924
    a210:	000c2340 	call	c234 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a214:	d126d017 	ldw	r4,-25792(gp)
    a218:	d166d117 	ldw	r5,-25788(gp)
    a21c:	d1a6d217 	ldw	r6,-25784(gp)
    a220:	00001f00 	call	1f0 <main>
    a224:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a228:	01000044 	movi	r4,1
    a22c:	0009bb40 	call	9bb4 <close>
  exit (result);
    a230:	e13fff17 	ldw	r4,-4(fp)
    a234:	000c2480 	call	c248 <exit>

0000a238 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a238:	defffe04 	addi	sp,sp,-8
    a23c:	df000115 	stw	fp,4(sp)
    a240:	df000104 	addi	fp,sp,4
    a244:	e13fff15 	stw	r4,-4(fp)
}
    a248:	e037883a 	mov	sp,fp
    a24c:	df000017 	ldw	fp,0(sp)
    a250:	dec00104 	addi	sp,sp,4
    a254:	f800283a 	ret

0000a258 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a258:	defffe04 	addi	sp,sp,-8
    a25c:	df000115 	stw	fp,4(sp)
    a260:	df000104 	addi	fp,sp,4
    a264:	e13fff15 	stw	r4,-4(fp)
}
    a268:	e037883a 	mov	sp,fp
    a26c:	df000017 	ldw	fp,0(sp)
    a270:	dec00104 	addi	sp,sp,4
    a274:	f800283a 	ret

0000a278 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a278:	defff704 	addi	sp,sp,-36
    a27c:	dfc00815 	stw	ra,32(sp)
    a280:	df000715 	stw	fp,28(sp)
    a284:	df000704 	addi	fp,sp,28
    a288:	e13ffb15 	stw	r4,-20(fp)
    a28c:	e17ffc15 	stw	r5,-16(fp)
    a290:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a294:	e0bffb17 	ldw	r2,-20(fp)
    a298:	1004803a 	cmplt	r2,r2,zero
    a29c:	1000081e 	bne	r2,zero,a2c0 <read+0x48>
    a2a0:	e0bffb17 	ldw	r2,-20(fp)
    a2a4:	10800324 	muli	r2,r2,12
    a2a8:	1007883a 	mov	r3,r2
    a2ac:	00800074 	movhi	r2,1
    a2b0:	10b48504 	addi	r2,r2,-11756
    a2b4:	1887883a 	add	r3,r3,r2
    a2b8:	e0ffff15 	stw	r3,-4(fp)
    a2bc:	00000106 	br	a2c4 <read+0x4c>
    a2c0:	e03fff15 	stw	zero,-4(fp)
    a2c4:	e0bfff17 	ldw	r2,-4(fp)
    a2c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a2cc:	e0bffa17 	ldw	r2,-24(fp)
    a2d0:	1005003a 	cmpeq	r2,r2,zero
    a2d4:	1000241e 	bne	r2,zero,a368 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a2d8:	e0bffa17 	ldw	r2,-24(fp)
    a2dc:	10800217 	ldw	r2,8(r2)
    a2e0:	108000cc 	andi	r2,r2,3
    a2e4:	10800060 	cmpeqi	r2,r2,1
    a2e8:	10001a1e 	bne	r2,zero,a354 <read+0xdc>
    a2ec:	e0bffa17 	ldw	r2,-24(fp)
    a2f0:	10800017 	ldw	r2,0(r2)
    a2f4:	10800517 	ldw	r2,20(r2)
    a2f8:	1005003a 	cmpeq	r2,r2,zero
    a2fc:	1000151e 	bne	r2,zero,a354 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a300:	e0bffa17 	ldw	r2,-24(fp)
    a304:	10800017 	ldw	r2,0(r2)
    a308:	10800517 	ldw	r2,20(r2)
    a30c:	e17ffc17 	ldw	r5,-16(fp)
    a310:	e1bffd17 	ldw	r6,-12(fp)
    a314:	e13ffa17 	ldw	r4,-24(fp)
    a318:	103ee83a 	callr	r2
    a31c:	e0bff915 	stw	r2,-28(fp)
    a320:	e0bff917 	ldw	r2,-28(fp)
    a324:	1004403a 	cmpge	r2,r2,zero
    a328:	1000071e 	bne	r2,zero,a348 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a32c:	000a3980 	call	a398 <alt_get_errno>
    a330:	e0fff917 	ldw	r3,-28(fp)
    a334:	00c7c83a 	sub	r3,zero,r3
    a338:	10c00015 	stw	r3,0(r2)
          return -1;
    a33c:	00bfffc4 	movi	r2,-1
    a340:	e0bffe15 	stw	r2,-8(fp)
    a344:	00000e06 	br	a380 <read+0x108>
        }
        return rval;
    a348:	e0bff917 	ldw	r2,-28(fp)
    a34c:	e0bffe15 	stw	r2,-8(fp)
    a350:	00000b06 	br	a380 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a354:	000a3980 	call	a398 <alt_get_errno>
    a358:	1007883a 	mov	r3,r2
    a35c:	00800344 	movi	r2,13
    a360:	18800015 	stw	r2,0(r3)
    a364:	00000406 	br	a378 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a368:	000a3980 	call	a398 <alt_get_errno>
    a36c:	1007883a 	mov	r3,r2
    a370:	00801444 	movi	r2,81
    a374:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a378:	00bfffc4 	movi	r2,-1
    a37c:	e0bffe15 	stw	r2,-8(fp)
    a380:	e0bffe17 	ldw	r2,-8(fp)
}
    a384:	e037883a 	mov	sp,fp
    a388:	dfc00117 	ldw	ra,4(sp)
    a38c:	df000017 	ldw	fp,0(sp)
    a390:	dec00204 	addi	sp,sp,8
    a394:	f800283a 	ret

0000a398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a398:	defffd04 	addi	sp,sp,-12
    a39c:	dfc00215 	stw	ra,8(sp)
    a3a0:	df000115 	stw	fp,4(sp)
    a3a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a3a8:	00800074 	movhi	r2,1
    a3ac:	10b92904 	addi	r2,r2,-7004
    a3b0:	10800017 	ldw	r2,0(r2)
    a3b4:	1005003a 	cmpeq	r2,r2,zero
    a3b8:	1000061e 	bne	r2,zero,a3d4 <alt_get_errno+0x3c>
    a3bc:	00800074 	movhi	r2,1
    a3c0:	10b92904 	addi	r2,r2,-7004
    a3c4:	10800017 	ldw	r2,0(r2)
    a3c8:	103ee83a 	callr	r2
    a3cc:	e0bfff15 	stw	r2,-4(fp)
    a3d0:	00000306 	br	a3e0 <alt_get_errno+0x48>
    a3d4:	00800074 	movhi	r2,1
    a3d8:	10bfed04 	addi	r2,r2,-76
    a3dc:	e0bfff15 	stw	r2,-4(fp)
    a3e0:	e0bfff17 	ldw	r2,-4(fp)
}
    a3e4:	e037883a 	mov	sp,fp
    a3e8:	dfc00117 	ldw	ra,4(sp)
    a3ec:	df000017 	ldw	fp,0(sp)
    a3f0:	dec00204 	addi	sp,sp,8
    a3f4:	f800283a 	ret

0000a3f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a3f8:	defffe04 	addi	sp,sp,-8
    a3fc:	df000115 	stw	fp,4(sp)
    a400:	df000104 	addi	fp,sp,4
    a404:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a408:	e0bfff17 	ldw	r2,-4(fp)
    a40c:	108000d0 	cmplti	r2,r2,3
    a410:	10000d1e 	bne	r2,zero,a448 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a414:	e0bfff17 	ldw	r2,-4(fp)
    a418:	00c00074 	movhi	r3,1
    a41c:	18f48504 	addi	r3,r3,-11756
    a420:	10800324 	muli	r2,r2,12
    a424:	10c5883a 	add	r2,r2,r3
    a428:	10800204 	addi	r2,r2,8
    a42c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a430:	e0bfff17 	ldw	r2,-4(fp)
    a434:	00c00074 	movhi	r3,1
    a438:	18f48504 	addi	r3,r3,-11756
    a43c:	10800324 	muli	r2,r2,12
    a440:	10c5883a 	add	r2,r2,r3
    a444:	10000015 	stw	zero,0(r2)
  }
}
    a448:	e037883a 	mov	sp,fp
    a44c:	df000017 	ldw	fp,0(sp)
    a450:	dec00104 	addi	sp,sp,4
    a454:	f800283a 	ret

0000a458 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a458:	defff804 	addi	sp,sp,-32
    a45c:	df000715 	stw	fp,28(sp)
    a460:	df000704 	addi	fp,sp,28
    a464:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a468:	0005303a 	rdctl	r2,status
    a46c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a470:	e0fffb17 	ldw	r3,-20(fp)
    a474:	00bfff84 	movi	r2,-2
    a478:	1884703a 	and	r2,r3,r2
    a47c:	1001703a 	wrctl	status,r2
  
  return context;
    a480:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a484:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a488:	d0a00c17 	ldw	r2,-32720(gp)
    a48c:	10c000c4 	addi	r3,r2,3
    a490:	00bfff04 	movi	r2,-4
    a494:	1884703a 	and	r2,r3,r2
    a498:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a49c:	d0e00c17 	ldw	r3,-32720(gp)
    a4a0:	e0bffe17 	ldw	r2,-8(fp)
    a4a4:	1887883a 	add	r3,r3,r2
    a4a8:	00808034 	movhi	r2,512
    a4ac:	10800004 	addi	r2,r2,0
    a4b0:	10c0072e 	bgeu	r2,r3,a4d0 <sbrk+0x78>
    a4b4:	e0bffd17 	ldw	r2,-12(fp)
    a4b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4bc:	e0bffa17 	ldw	r2,-24(fp)
    a4c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a4c4:	00bfffc4 	movi	r2,-1
    a4c8:	e0bfff15 	stw	r2,-4(fp)
    a4cc:	00000c06 	br	a500 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a4d0:	d0a00c17 	ldw	r2,-32720(gp)
    a4d4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a4d8:	d0e00c17 	ldw	r3,-32720(gp)
    a4dc:	e0bffe17 	ldw	r2,-8(fp)
    a4e0:	1885883a 	add	r2,r3,r2
    a4e4:	d0a00c15 	stw	r2,-32720(gp)
    a4e8:	e0bffd17 	ldw	r2,-12(fp)
    a4ec:	e0bff915 	stw	r2,-28(fp)
    a4f0:	e0bff917 	ldw	r2,-28(fp)
    a4f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a4f8:	e0bffc17 	ldw	r2,-16(fp)
    a4fc:	e0bfff15 	stw	r2,-4(fp)
    a500:	e0bfff17 	ldw	r2,-4(fp)
} 
    a504:	e037883a 	mov	sp,fp
    a508:	df000017 	ldw	fp,0(sp)
    a50c:	dec00104 	addi	sp,sp,4
    a510:	f800283a 	ret

0000a514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a514:	defff704 	addi	sp,sp,-36
    a518:	dfc00815 	stw	ra,32(sp)
    a51c:	df000715 	stw	fp,28(sp)
    a520:	df000704 	addi	fp,sp,28
    a524:	e13ffb15 	stw	r4,-20(fp)
    a528:	e17ffc15 	stw	r5,-16(fp)
    a52c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a530:	e0bffb17 	ldw	r2,-20(fp)
    a534:	1004803a 	cmplt	r2,r2,zero
    a538:	1000081e 	bne	r2,zero,a55c <write+0x48>
    a53c:	e0bffb17 	ldw	r2,-20(fp)
    a540:	10800324 	muli	r2,r2,12
    a544:	1007883a 	mov	r3,r2
    a548:	00800074 	movhi	r2,1
    a54c:	10b48504 	addi	r2,r2,-11756
    a550:	1887883a 	add	r3,r3,r2
    a554:	e0ffff15 	stw	r3,-4(fp)
    a558:	00000106 	br	a560 <write+0x4c>
    a55c:	e03fff15 	stw	zero,-4(fp)
    a560:	e0bfff17 	ldw	r2,-4(fp)
    a564:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a568:	e0bffa17 	ldw	r2,-24(fp)
    a56c:	1005003a 	cmpeq	r2,r2,zero
    a570:	1000241e 	bne	r2,zero,a604 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a574:	e0bffa17 	ldw	r2,-24(fp)
    a578:	10800217 	ldw	r2,8(r2)
    a57c:	108000cc 	andi	r2,r2,3
    a580:	1005003a 	cmpeq	r2,r2,zero
    a584:	10001a1e 	bne	r2,zero,a5f0 <write+0xdc>
    a588:	e0bffa17 	ldw	r2,-24(fp)
    a58c:	10800017 	ldw	r2,0(r2)
    a590:	10800617 	ldw	r2,24(r2)
    a594:	1005003a 	cmpeq	r2,r2,zero
    a598:	1000151e 	bne	r2,zero,a5f0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a59c:	e0bffa17 	ldw	r2,-24(fp)
    a5a0:	10800017 	ldw	r2,0(r2)
    a5a4:	10800617 	ldw	r2,24(r2)
    a5a8:	e17ffc17 	ldw	r5,-16(fp)
    a5ac:	e1bffd17 	ldw	r6,-12(fp)
    a5b0:	e13ffa17 	ldw	r4,-24(fp)
    a5b4:	103ee83a 	callr	r2
    a5b8:	e0bff915 	stw	r2,-28(fp)
    a5bc:	e0bff917 	ldw	r2,-28(fp)
    a5c0:	1004403a 	cmpge	r2,r2,zero
    a5c4:	1000071e 	bne	r2,zero,a5e4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a5c8:	000a6340 	call	a634 <alt_get_errno>
    a5cc:	e0fff917 	ldw	r3,-28(fp)
    a5d0:	00c7c83a 	sub	r3,zero,r3
    a5d4:	10c00015 	stw	r3,0(r2)
        return -1;
    a5d8:	00bfffc4 	movi	r2,-1
    a5dc:	e0bffe15 	stw	r2,-8(fp)
    a5e0:	00000e06 	br	a61c <write+0x108>
      }
      return rval;
    a5e4:	e0bff917 	ldw	r2,-28(fp)
    a5e8:	e0bffe15 	stw	r2,-8(fp)
    a5ec:	00000b06 	br	a61c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a5f0:	000a6340 	call	a634 <alt_get_errno>
    a5f4:	1007883a 	mov	r3,r2
    a5f8:	00800344 	movi	r2,13
    a5fc:	18800015 	stw	r2,0(r3)
    a600:	00000406 	br	a614 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a604:	000a6340 	call	a634 <alt_get_errno>
    a608:	1007883a 	mov	r3,r2
    a60c:	00801444 	movi	r2,81
    a610:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a614:	00bfffc4 	movi	r2,-1
    a618:	e0bffe15 	stw	r2,-8(fp)
    a61c:	e0bffe17 	ldw	r2,-8(fp)
}
    a620:	e037883a 	mov	sp,fp
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	df000017 	ldw	fp,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a634:	defffd04 	addi	sp,sp,-12
    a638:	dfc00215 	stw	ra,8(sp)
    a63c:	df000115 	stw	fp,4(sp)
    a640:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a644:	00800074 	movhi	r2,1
    a648:	10b92904 	addi	r2,r2,-7004
    a64c:	10800017 	ldw	r2,0(r2)
    a650:	1005003a 	cmpeq	r2,r2,zero
    a654:	1000061e 	bne	r2,zero,a670 <alt_get_errno+0x3c>
    a658:	00800074 	movhi	r2,1
    a65c:	10b92904 	addi	r2,r2,-7004
    a660:	10800017 	ldw	r2,0(r2)
    a664:	103ee83a 	callr	r2
    a668:	e0bfff15 	stw	r2,-4(fp)
    a66c:	00000306 	br	a67c <alt_get_errno+0x48>
    a670:	00800074 	movhi	r2,1
    a674:	10bfed04 	addi	r2,r2,-76
    a678:	e0bfff15 	stw	r2,-4(fp)
    a67c:	e0bfff17 	ldw	r2,-4(fp)
}
    a680:	e037883a 	mov	sp,fp
    a684:	dfc00117 	ldw	ra,4(sp)
    a688:	df000017 	ldw	fp,0(sp)
    a68c:	dec00204 	addi	sp,sp,8
    a690:	f800283a 	ret

0000a694 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a694:	defffd04 	addi	sp,sp,-12
    a698:	dfc00215 	stw	ra,8(sp)
    a69c:	df000115 	stw	fp,4(sp)
    a6a0:	df000104 	addi	fp,sp,4
    a6a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    a6a8:	000bf180 	call	bf18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a6ac:	00800044 	movi	r2,1
    a6b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a6b4:	e037883a 	mov	sp,fp
    a6b8:	dfc00117 	ldw	ra,4(sp)
    a6bc:	df000017 	ldw	fp,0(sp)
    a6c0:	dec00204 	addi	sp,sp,8
    a6c4:	f800283a 	ret

0000a6c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a6c8:	defffe04 	addi	sp,sp,-8
    a6cc:	dfc00115 	stw	ra,4(sp)
    a6d0:	df000015 	stw	fp,0(sp)
    a6d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    a6d8:	01040034 	movhi	r4,4096
    a6dc:	21080004 	addi	r4,r4,8192
    a6e0:	000b883a 	mov	r5,zero
    a6e4:	000d883a 	mov	r6,zero
    a6e8:	01c00044 	movi	r7,1
    a6ec:	000b29c0 	call	b29c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    a6f0:	01000074 	movhi	r4,1
    a6f4:	2134ef04 	addi	r4,r4,-11332
    a6f8:	000b883a 	mov	r5,zero
    a6fc:	01800204 	movi	r6,8
    a700:	000a8c80 	call	a8c8 <altera_avalon_jtag_uart_init>
    a704:	01000074 	movhi	r4,1
    a708:	2134e504 	addi	r4,r4,-11372
    a70c:	000a7480 	call	a748 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( CAPT3_0, capt3_0);
    a710:	01000074 	movhi	r4,1
    a714:	2138fd04 	addi	r4,r4,-7180
    a718:	000a7480 	call	a748 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( CAPT6_4, capt6_4);
    a71c:	01000074 	movhi	r4,1
    a720:	21390804 	addi	r4,r4,-7136
    a724:	000a7480 	call	a748 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( CTR_MOTEUR, CTR_MOTEUR);
    a728:	01000074 	movhi	r4,1
    a72c:	21391304 	addi	r4,r4,-7092
    a730:	000a7480 	call	a748 <alt_dev_reg>
}
    a734:	e037883a 	mov	sp,fp
    a738:	dfc00117 	ldw	ra,4(sp)
    a73c:	df000017 	ldw	fp,0(sp)
    a740:	dec00204 	addi	sp,sp,8
    a744:	f800283a 	ret

0000a748 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a748:	defffd04 	addi	sp,sp,-12
    a74c:	dfc00215 	stw	ra,8(sp)
    a750:	df000115 	stw	fp,4(sp)
    a754:	df000104 	addi	fp,sp,4
    a758:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a75c:	e13fff17 	ldw	r4,-4(fp)
    a760:	01400074 	movhi	r5,1
    a764:	29792604 	addi	r5,r5,-7016
    a768:	000b49c0 	call	b49c <alt_dev_llist_insert>
}
    a76c:	e037883a 	mov	sp,fp
    a770:	dfc00117 	ldw	ra,4(sp)
    a774:	df000017 	ldw	fp,0(sp)
    a778:	dec00204 	addi	sp,sp,8
    a77c:	f800283a 	ret

0000a780 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a780:	defffa04 	addi	sp,sp,-24
    a784:	dfc00515 	stw	ra,20(sp)
    a788:	df000415 	stw	fp,16(sp)
    a78c:	df000404 	addi	fp,sp,16
    a790:	e13ffd15 	stw	r4,-12(fp)
    a794:	e17ffe15 	stw	r5,-8(fp)
    a798:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a79c:	e0bffd17 	ldw	r2,-12(fp)
    a7a0:	10800017 	ldw	r2,0(r2)
    a7a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a7a8:	e0bffc17 	ldw	r2,-16(fp)
    a7ac:	11000a04 	addi	r4,r2,40
    a7b0:	e0bffd17 	ldw	r2,-12(fp)
    a7b4:	11c00217 	ldw	r7,8(r2)
    a7b8:	e17ffe17 	ldw	r5,-8(fp)
    a7bc:	e1bfff17 	ldw	r6,-4(fp)
    a7c0:	000adc80 	call	adc8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a7c4:	e037883a 	mov	sp,fp
    a7c8:	dfc00117 	ldw	ra,4(sp)
    a7cc:	df000017 	ldw	fp,0(sp)
    a7d0:	dec00204 	addi	sp,sp,8
    a7d4:	f800283a 	ret

0000a7d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a7d8:	defffa04 	addi	sp,sp,-24
    a7dc:	dfc00515 	stw	ra,20(sp)
    a7e0:	df000415 	stw	fp,16(sp)
    a7e4:	df000404 	addi	fp,sp,16
    a7e8:	e13ffd15 	stw	r4,-12(fp)
    a7ec:	e17ffe15 	stw	r5,-8(fp)
    a7f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a7f4:	e0bffd17 	ldw	r2,-12(fp)
    a7f8:	10800017 	ldw	r2,0(r2)
    a7fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a800:	e0bffc17 	ldw	r2,-16(fp)
    a804:	11000a04 	addi	r4,r2,40
    a808:	e0bffd17 	ldw	r2,-12(fp)
    a80c:	11c00217 	ldw	r7,8(r2)
    a810:	e17ffe17 	ldw	r5,-8(fp)
    a814:	e1bfff17 	ldw	r6,-4(fp)
    a818:	000afec0 	call	afec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a81c:	e037883a 	mov	sp,fp
    a820:	dfc00117 	ldw	ra,4(sp)
    a824:	df000017 	ldw	fp,0(sp)
    a828:	dec00204 	addi	sp,sp,8
    a82c:	f800283a 	ret

0000a830 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a830:	defffc04 	addi	sp,sp,-16
    a834:	dfc00315 	stw	ra,12(sp)
    a838:	df000215 	stw	fp,8(sp)
    a83c:	df000204 	addi	fp,sp,8
    a840:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a844:	e0bfff17 	ldw	r2,-4(fp)
    a848:	10800017 	ldw	r2,0(r2)
    a84c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a850:	e0bffe17 	ldw	r2,-8(fp)
    a854:	11000a04 	addi	r4,r2,40
    a858:	e0bfff17 	ldw	r2,-4(fp)
    a85c:	11400217 	ldw	r5,8(r2)
    a860:	000ac600 	call	ac60 <altera_avalon_jtag_uart_close>
}
    a864:	e037883a 	mov	sp,fp
    a868:	dfc00117 	ldw	ra,4(sp)
    a86c:	df000017 	ldw	fp,0(sp)
    a870:	dec00204 	addi	sp,sp,8
    a874:	f800283a 	ret

0000a878 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a878:	defffa04 	addi	sp,sp,-24
    a87c:	dfc00515 	stw	ra,20(sp)
    a880:	df000415 	stw	fp,16(sp)
    a884:	df000404 	addi	fp,sp,16
    a888:	e13ffd15 	stw	r4,-12(fp)
    a88c:	e17ffe15 	stw	r5,-8(fp)
    a890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a894:	e0bffd17 	ldw	r2,-12(fp)
    a898:	10800017 	ldw	r2,0(r2)
    a89c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a8a0:	e0bffc17 	ldw	r2,-16(fp)
    a8a4:	11000a04 	addi	r4,r2,40
    a8a8:	e17ffe17 	ldw	r5,-8(fp)
    a8ac:	e1bfff17 	ldw	r6,-4(fp)
    a8b0:	000acd40 	call	acd4 <altera_avalon_jtag_uart_ioctl>
}
    a8b4:	e037883a 	mov	sp,fp
    a8b8:	dfc00117 	ldw	ra,4(sp)
    a8bc:	df000017 	ldw	fp,0(sp)
    a8c0:	dec00204 	addi	sp,sp,8
    a8c4:	f800283a 	ret

0000a8c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a8c8:	defffa04 	addi	sp,sp,-24
    a8cc:	dfc00515 	stw	ra,20(sp)
    a8d0:	df000415 	stw	fp,16(sp)
    a8d4:	df000404 	addi	fp,sp,16
    a8d8:	e13ffd15 	stw	r4,-12(fp)
    a8dc:	e17ffe15 	stw	r5,-8(fp)
    a8e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a8e4:	e0fffd17 	ldw	r3,-12(fp)
    a8e8:	00800044 	movi	r2,1
    a8ec:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a8f0:	e0bffd17 	ldw	r2,-12(fp)
    a8f4:	10800017 	ldw	r2,0(r2)
    a8f8:	11000104 	addi	r4,r2,4
    a8fc:	e0bffd17 	ldw	r2,-12(fp)
    a900:	10800817 	ldw	r2,32(r2)
    a904:	1007883a 	mov	r3,r2
    a908:	2005883a 	mov	r2,r4
    a90c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a910:	e13ffe17 	ldw	r4,-8(fp)
    a914:	e17fff17 	ldw	r5,-4(fp)
    a918:	d8000015 	stw	zero,0(sp)
    a91c:	01800074 	movhi	r6,1
    a920:	31aa6204 	addi	r6,r6,-22136
    a924:	e1fffd17 	ldw	r7,-12(fp)
    a928:	000b6a80 	call	b6a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a92c:	e0bffd17 	ldw	r2,-12(fp)
    a930:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a934:	e0bffd17 	ldw	r2,-12(fp)
    a938:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a93c:	00800074 	movhi	r2,1
    a940:	10bff204 	addi	r2,r2,-56
    a944:	10800017 	ldw	r2,0(r2)
    a948:	100b883a 	mov	r5,r2
    a94c:	01800074 	movhi	r6,1
    a950:	31aaec04 	addi	r6,r6,-21584
    a954:	e1fffd17 	ldw	r7,-12(fp)
    a958:	000b32c0 	call	b32c <alt_alarm_start>
    a95c:	1004403a 	cmpge	r2,r2,zero
    a960:	1000041e 	bne	r2,zero,a974 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a964:	e0fffd17 	ldw	r3,-12(fp)
    a968:	00a00034 	movhi	r2,32768
    a96c:	10bfffc4 	addi	r2,r2,-1
    a970:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a974:	e037883a 	mov	sp,fp
    a978:	dfc00117 	ldw	ra,4(sp)
    a97c:	df000017 	ldw	fp,0(sp)
    a980:	dec00204 	addi	sp,sp,8
    a984:	f800283a 	ret

0000a988 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a988:	defff804 	addi	sp,sp,-32
    a98c:	df000715 	stw	fp,28(sp)
    a990:	df000704 	addi	fp,sp,28
    a994:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a998:	e0bfff17 	ldw	r2,-4(fp)
    a99c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    a9a0:	e0bffe17 	ldw	r2,-8(fp)
    a9a4:	10800017 	ldw	r2,0(r2)
    a9a8:	e0bffd15 	stw	r2,-12(fp)
    a9ac:	00000006 	br	a9b0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a9b0:	e0bffd17 	ldw	r2,-12(fp)
    a9b4:	10800104 	addi	r2,r2,4
    a9b8:	10800037 	ldwio	r2,0(r2)
    a9bc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a9c0:	e0bffc17 	ldw	r2,-16(fp)
    a9c4:	1080c00c 	andi	r2,r2,768
    a9c8:	1005003a 	cmpeq	r2,r2,zero
    a9cc:	1000741e 	bne	r2,zero,aba0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a9d0:	e0bffc17 	ldw	r2,-16(fp)
    a9d4:	1080400c 	andi	r2,r2,256
    a9d8:	1005003a 	cmpeq	r2,r2,zero
    a9dc:	1000351e 	bne	r2,zero,aab4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a9e0:	00800074 	movhi	r2,1
    a9e4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a9e8:	e0bffe17 	ldw	r2,-8(fp)
    a9ec:	10800a17 	ldw	r2,40(r2)
    a9f0:	10800044 	addi	r2,r2,1
    a9f4:	1081ffcc 	andi	r2,r2,2047
    a9f8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    a9fc:	e0bffe17 	ldw	r2,-8(fp)
    aa00:	10c00b17 	ldw	r3,44(r2)
    aa04:	e0bffa17 	ldw	r2,-24(fp)
    aa08:	18801626 	beq	r3,r2,aa64 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    aa0c:	e0bffd17 	ldw	r2,-12(fp)
    aa10:	10800037 	ldwio	r2,0(r2)
    aa14:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    aa18:	e0bffb17 	ldw	r2,-20(fp)
    aa1c:	10a0000c 	andi	r2,r2,32768
    aa20:	1005003a 	cmpeq	r2,r2,zero
    aa24:	10000f1e 	bne	r2,zero,aa64 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    aa28:	e0bffe17 	ldw	r2,-8(fp)
    aa2c:	10c00a17 	ldw	r3,40(r2)
    aa30:	e0bffb17 	ldw	r2,-20(fp)
    aa34:	1009883a 	mov	r4,r2
    aa38:	e0bffe17 	ldw	r2,-8(fp)
    aa3c:	1885883a 	add	r2,r3,r2
    aa40:	10800e04 	addi	r2,r2,56
    aa44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aa48:	e0bffe17 	ldw	r2,-8(fp)
    aa4c:	10800a17 	ldw	r2,40(r2)
    aa50:	10800044 	addi	r2,r2,1
    aa54:	10c1ffcc 	andi	r3,r2,2047
    aa58:	e0bffe17 	ldw	r2,-8(fp)
    aa5c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    aa60:	003fe106 	br	a9e8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    aa64:	e0bffb17 	ldw	r2,-20(fp)
    aa68:	10bfffec 	andhi	r2,r2,65535
    aa6c:	1005003a 	cmpeq	r2,r2,zero
    aa70:	1000101e 	bne	r2,zero,aab4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa74:	e0bffe17 	ldw	r2,-8(fp)
    aa78:	10c00817 	ldw	r3,32(r2)
    aa7c:	00bfff84 	movi	r2,-2
    aa80:	1886703a 	and	r3,r3,r2
    aa84:	e0bffe17 	ldw	r2,-8(fp)
    aa88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    aa8c:	e0bffd17 	ldw	r2,-12(fp)
    aa90:	11000104 	addi	r4,r2,4
    aa94:	e0bffe17 	ldw	r2,-8(fp)
    aa98:	10800817 	ldw	r2,32(r2)
    aa9c:	1007883a 	mov	r3,r2
    aaa0:	2005883a 	mov	r2,r4
    aaa4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    aaa8:	e0bffd17 	ldw	r2,-12(fp)
    aaac:	10800104 	addi	r2,r2,4
    aab0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    aab4:	e0bffc17 	ldw	r2,-16(fp)
    aab8:	1080800c 	andi	r2,r2,512
    aabc:	1005003a 	cmpeq	r2,r2,zero
    aac0:	103fbb1e 	bne	r2,zero,a9b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    aac4:	e0bffc17 	ldw	r2,-16(fp)
    aac8:	10bfffec 	andhi	r2,r2,65535
    aacc:	1004d43a 	srli	r2,r2,16
    aad0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    aad4:	00001506 	br	ab2c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    aad8:	e13ffd17 	ldw	r4,-12(fp)
    aadc:	e0bffe17 	ldw	r2,-8(fp)
    aae0:	10c00d17 	ldw	r3,52(r2)
    aae4:	e0bffe17 	ldw	r2,-8(fp)
    aae8:	1885883a 	add	r2,r3,r2
    aaec:	10820e04 	addi	r2,r2,2104
    aaf0:	10800003 	ldbu	r2,0(r2)
    aaf4:	10c03fcc 	andi	r3,r2,255
    aaf8:	18c0201c 	xori	r3,r3,128
    aafc:	18ffe004 	addi	r3,r3,-128
    ab00:	2005883a 	mov	r2,r4
    ab04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab08:	e0bffe17 	ldw	r2,-8(fp)
    ab0c:	10800d17 	ldw	r2,52(r2)
    ab10:	10800044 	addi	r2,r2,1
    ab14:	10c1ffcc 	andi	r3,r2,2047
    ab18:	e0bffe17 	ldw	r2,-8(fp)
    ab1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ab20:	e0bff917 	ldw	r2,-28(fp)
    ab24:	10bfffc4 	addi	r2,r2,-1
    ab28:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ab2c:	e0bff917 	ldw	r2,-28(fp)
    ab30:	1005003a 	cmpeq	r2,r2,zero
    ab34:	1000051e 	bne	r2,zero,ab4c <altera_avalon_jtag_uart_irq+0x1c4>
    ab38:	e0bffe17 	ldw	r2,-8(fp)
    ab3c:	10c00d17 	ldw	r3,52(r2)
    ab40:	e0bffe17 	ldw	r2,-8(fp)
    ab44:	10800c17 	ldw	r2,48(r2)
    ab48:	18bfe31e 	bne	r3,r2,aad8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ab4c:	e0bff917 	ldw	r2,-28(fp)
    ab50:	1005003a 	cmpeq	r2,r2,zero
    ab54:	103f961e 	bne	r2,zero,a9b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ab58:	e0bffe17 	ldw	r2,-8(fp)
    ab5c:	10c00817 	ldw	r3,32(r2)
    ab60:	00bfff44 	movi	r2,-3
    ab64:	1886703a 	and	r3,r3,r2
    ab68:	e0bffe17 	ldw	r2,-8(fp)
    ab6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ab70:	e0bffe17 	ldw	r2,-8(fp)
    ab74:	10800017 	ldw	r2,0(r2)
    ab78:	11000104 	addi	r4,r2,4
    ab7c:	e0bffe17 	ldw	r2,-8(fp)
    ab80:	10800817 	ldw	r2,32(r2)
    ab84:	1007883a 	mov	r3,r2
    ab88:	2005883a 	mov	r2,r4
    ab8c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800104 	addi	r2,r2,4
    ab98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ab9c:	003f8406 	br	a9b0 <altera_avalon_jtag_uart_irq+0x28>
}
    aba0:	e037883a 	mov	sp,fp
    aba4:	df000017 	ldw	fp,0(sp)
    aba8:	dec00104 	addi	sp,sp,4
    abac:	f800283a 	ret

0000abb0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    abb0:	defffc04 	addi	sp,sp,-16
    abb4:	df000315 	stw	fp,12(sp)
    abb8:	df000304 	addi	fp,sp,12
    abbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    abc0:	e0bfff17 	ldw	r2,-4(fp)
    abc4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    abc8:	e0bffe17 	ldw	r2,-8(fp)
    abcc:	10800017 	ldw	r2,0(r2)
    abd0:	10800104 	addi	r2,r2,4
    abd4:	10800037 	ldwio	r2,0(r2)
    abd8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    abdc:	e0bffd17 	ldw	r2,-12(fp)
    abe0:	1081000c 	andi	r2,r2,1024
    abe4:	1005003a 	cmpeq	r2,r2,zero
    abe8:	10000c1e 	bne	r2,zero,ac1c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    abec:	e0bffe17 	ldw	r2,-8(fp)
    abf0:	10800017 	ldw	r2,0(r2)
    abf4:	11000104 	addi	r4,r2,4
    abf8:	e0bffe17 	ldw	r2,-8(fp)
    abfc:	10800817 	ldw	r2,32(r2)
    ac00:	10810014 	ori	r2,r2,1024
    ac04:	1007883a 	mov	r3,r2
    ac08:	2005883a 	mov	r2,r4
    ac0c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ac10:	e0bffe17 	ldw	r2,-8(fp)
    ac14:	10000915 	stw	zero,36(r2)
    ac18:	00000a06 	br	ac44 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ac1c:	e0bffe17 	ldw	r2,-8(fp)
    ac20:	10c00917 	ldw	r3,36(r2)
    ac24:	00a00034 	movhi	r2,32768
    ac28:	10bfff04 	addi	r2,r2,-4
    ac2c:	10c00536 	bltu	r2,r3,ac44 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ac30:	e0bffe17 	ldw	r2,-8(fp)
    ac34:	10800917 	ldw	r2,36(r2)
    ac38:	10c00044 	addi	r3,r2,1
    ac3c:	e0bffe17 	ldw	r2,-8(fp)
    ac40:	10c00915 	stw	r3,36(r2)
    ac44:	00800074 	movhi	r2,1
    ac48:	10bff204 	addi	r2,r2,-56
    ac4c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ac50:	e037883a 	mov	sp,fp
    ac54:	df000017 	ldw	fp,0(sp)
    ac58:	dec00104 	addi	sp,sp,4
    ac5c:	f800283a 	ret

0000ac60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ac60:	defffc04 	addi	sp,sp,-16
    ac64:	df000315 	stw	fp,12(sp)
    ac68:	df000304 	addi	fp,sp,12
    ac6c:	e13ffd15 	stw	r4,-12(fp)
    ac70:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ac74:	00000706 	br	ac94 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ac78:	e0bffe17 	ldw	r2,-8(fp)
    ac7c:	1090000c 	andi	r2,r2,16384
    ac80:	1005003a 	cmpeq	r2,r2,zero
    ac84:	1000031e 	bne	r2,zero,ac94 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ac88:	00bffd44 	movi	r2,-11
    ac8c:	e0bfff15 	stw	r2,-4(fp)
    ac90:	00000b06 	br	acc0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ac94:	e0bffd17 	ldw	r2,-12(fp)
    ac98:	10c00d17 	ldw	r3,52(r2)
    ac9c:	e0bffd17 	ldw	r2,-12(fp)
    aca0:	10800c17 	ldw	r2,48(r2)
    aca4:	18800526 	beq	r3,r2,acbc <altera_avalon_jtag_uart_close+0x5c>
    aca8:	e0bffd17 	ldw	r2,-12(fp)
    acac:	10c00917 	ldw	r3,36(r2)
    acb0:	e0bffd17 	ldw	r2,-12(fp)
    acb4:	10800117 	ldw	r2,4(r2)
    acb8:	18bfef36 	bltu	r3,r2,ac78 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    acbc:	e03fff15 	stw	zero,-4(fp)
    acc0:	e0bfff17 	ldw	r2,-4(fp)
}
    acc4:	e037883a 	mov	sp,fp
    acc8:	df000017 	ldw	fp,0(sp)
    accc:	dec00104 	addi	sp,sp,4
    acd0:	f800283a 	ret

0000acd4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    acd4:	defff804 	addi	sp,sp,-32
    acd8:	df000715 	stw	fp,28(sp)
    acdc:	df000704 	addi	fp,sp,28
    ace0:	e13ffb15 	stw	r4,-20(fp)
    ace4:	e17ffc15 	stw	r5,-16(fp)
    ace8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    acec:	00bff9c4 	movi	r2,-25
    acf0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    acf4:	e0bffc17 	ldw	r2,-16(fp)
    acf8:	e0bfff15 	stw	r2,-4(fp)
    acfc:	e0ffff17 	ldw	r3,-4(fp)
    ad00:	189a8060 	cmpeqi	r2,r3,27137
    ad04:	1000041e 	bne	r2,zero,ad18 <altera_avalon_jtag_uart_ioctl+0x44>
    ad08:	e0ffff17 	ldw	r3,-4(fp)
    ad0c:	189a80a0 	cmpeqi	r2,r3,27138
    ad10:	10001b1e 	bne	r2,zero,ad80 <altera_avalon_jtag_uart_ioctl+0xac>
    ad14:	00002706 	br	adb4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ad18:	e0bffb17 	ldw	r2,-20(fp)
    ad1c:	10c00117 	ldw	r3,4(r2)
    ad20:	00a00034 	movhi	r2,32768
    ad24:	10bfffc4 	addi	r2,r2,-1
    ad28:	18802226 	beq	r3,r2,adb4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ad2c:	e0bffd17 	ldw	r2,-12(fp)
    ad30:	10800017 	ldw	r2,0(r2)
    ad34:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ad38:	e0bff917 	ldw	r2,-28(fp)
    ad3c:	10800090 	cmplti	r2,r2,2
    ad40:	1000071e 	bne	r2,zero,ad60 <altera_avalon_jtag_uart_ioctl+0x8c>
    ad44:	e0fff917 	ldw	r3,-28(fp)
    ad48:	00a00034 	movhi	r2,32768
    ad4c:	10bfffc4 	addi	r2,r2,-1
    ad50:	18800326 	beq	r3,r2,ad60 <altera_avalon_jtag_uart_ioctl+0x8c>
    ad54:	e0bff917 	ldw	r2,-28(fp)
    ad58:	e0bffe15 	stw	r2,-8(fp)
    ad5c:	00000306 	br	ad6c <altera_avalon_jtag_uart_ioctl+0x98>
    ad60:	00e00034 	movhi	r3,32768
    ad64:	18ffff84 	addi	r3,r3,-2
    ad68:	e0fffe15 	stw	r3,-8(fp)
    ad6c:	e0bffb17 	ldw	r2,-20(fp)
    ad70:	e0fffe17 	ldw	r3,-8(fp)
    ad74:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ad78:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ad7c:	00000d06 	br	adb4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ad80:	e0bffb17 	ldw	r2,-20(fp)
    ad84:	10c00117 	ldw	r3,4(r2)
    ad88:	00a00034 	movhi	r2,32768
    ad8c:	10bfffc4 	addi	r2,r2,-1
    ad90:	18800826 	beq	r3,r2,adb4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ad94:	e13ffd17 	ldw	r4,-12(fp)
    ad98:	e0bffb17 	ldw	r2,-20(fp)
    ad9c:	10c00917 	ldw	r3,36(r2)
    ada0:	e0bffb17 	ldw	r2,-20(fp)
    ada4:	10800117 	ldw	r2,4(r2)
    ada8:	1885803a 	cmpltu	r2,r3,r2
    adac:	20800015 	stw	r2,0(r4)
      rc = 0;
    adb0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    adb4:	e0bffa17 	ldw	r2,-24(fp)
}
    adb8:	e037883a 	mov	sp,fp
    adbc:	df000017 	ldw	fp,0(sp)
    adc0:	dec00104 	addi	sp,sp,4
    adc4:	f800283a 	ret

0000adc8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    adc8:	defff204 	addi	sp,sp,-56
    adcc:	dfc00d15 	stw	ra,52(sp)
    add0:	df000c15 	stw	fp,48(sp)
    add4:	df000c04 	addi	fp,sp,48
    add8:	e13ffb15 	stw	r4,-20(fp)
    addc:	e17ffc15 	stw	r5,-16(fp)
    ade0:	e1bffd15 	stw	r6,-12(fp)
    ade4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    ade8:	e0bffc17 	ldw	r2,-16(fp)
    adec:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    adf0:	00004806 	br	af14 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    adf4:	e0bffb17 	ldw	r2,-20(fp)
    adf8:	10800a17 	ldw	r2,40(r2)
    adfc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ae00:	e0bffb17 	ldw	r2,-20(fp)
    ae04:	10800b17 	ldw	r2,44(r2)
    ae08:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ae0c:	e0fff717 	ldw	r3,-36(fp)
    ae10:	e0bff617 	ldw	r2,-40(fp)
    ae14:	18800536 	bltu	r3,r2,ae2c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ae18:	e0bff717 	ldw	r2,-36(fp)
    ae1c:	e0fff617 	ldw	r3,-40(fp)
    ae20:	10c5c83a 	sub	r2,r2,r3
    ae24:	e0bff815 	stw	r2,-32(fp)
    ae28:	00000406 	br	ae3c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ae2c:	00820004 	movi	r2,2048
    ae30:	e0fff617 	ldw	r3,-40(fp)
    ae34:	10c5c83a 	sub	r2,r2,r3
    ae38:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    ae3c:	e0bff817 	ldw	r2,-32(fp)
    ae40:	1005003a 	cmpeq	r2,r2,zero
    ae44:	10001f1e 	bne	r2,zero,aec4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    ae48:	e0fffd17 	ldw	r3,-12(fp)
    ae4c:	e0bff817 	ldw	r2,-32(fp)
    ae50:	1880022e 	bgeu	r3,r2,ae5c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    ae54:	e0bffd17 	ldw	r2,-12(fp)
    ae58:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ae5c:	e0bffb17 	ldw	r2,-20(fp)
    ae60:	10c00e04 	addi	r3,r2,56
    ae64:	e0bff617 	ldw	r2,-40(fp)
    ae68:	1887883a 	add	r3,r3,r2
    ae6c:	e0bffa17 	ldw	r2,-24(fp)
    ae70:	1009883a 	mov	r4,r2
    ae74:	180b883a 	mov	r5,r3
    ae78:	e1bff817 	ldw	r6,-32(fp)
    ae7c:	00057940 	call	5794 <memcpy>
      ptr   += n;
    ae80:	e0fff817 	ldw	r3,-32(fp)
    ae84:	e0bffa17 	ldw	r2,-24(fp)
    ae88:	10c5883a 	add	r2,r2,r3
    ae8c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    ae90:	e0fffd17 	ldw	r3,-12(fp)
    ae94:	e0bff817 	ldw	r2,-32(fp)
    ae98:	1885c83a 	sub	r2,r3,r2
    ae9c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aea0:	e0fff617 	ldw	r3,-40(fp)
    aea4:	e0bff817 	ldw	r2,-32(fp)
    aea8:	1885883a 	add	r2,r3,r2
    aeac:	10c1ffcc 	andi	r3,r2,2047
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    aeb8:	e0bffd17 	ldw	r2,-12(fp)
    aebc:	10800048 	cmpgei	r2,r2,1
    aec0:	103fcc1e 	bne	r2,zero,adf4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    aec4:	e0fffa17 	ldw	r3,-24(fp)
    aec8:	e0bffc17 	ldw	r2,-16(fp)
    aecc:	1880141e 	bne	r3,r2,af20 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    aed0:	e0bffe17 	ldw	r2,-8(fp)
    aed4:	1090000c 	andi	r2,r2,16384
    aed8:	1004c03a 	cmpne	r2,r2,zero
    aedc:	1000101e 	bne	r2,zero,af20 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    aee0:	e0bffb17 	ldw	r2,-20(fp)
    aee4:	10c00a17 	ldw	r3,40(r2)
    aee8:	e0bff717 	ldw	r2,-36(fp)
    aeec:	1880051e 	bne	r3,r2,af04 <altera_avalon_jtag_uart_read+0x13c>
    aef0:	e0bffb17 	ldw	r2,-20(fp)
    aef4:	10c00917 	ldw	r3,36(r2)
    aef8:	e0bffb17 	ldw	r2,-20(fp)
    aefc:	10800117 	ldw	r2,4(r2)
    af00:	18bff736 	bltu	r3,r2,aee0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    af04:	e0bffb17 	ldw	r2,-20(fp)
    af08:	10c00a17 	ldw	r3,40(r2)
    af0c:	e0bff717 	ldw	r2,-36(fp)
    af10:	18800326 	beq	r3,r2,af20 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    af14:	e0bffd17 	ldw	r2,-12(fp)
    af18:	10800048 	cmpgei	r2,r2,1
    af1c:	103fb51e 	bne	r2,zero,adf4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    af20:	e0fffa17 	ldw	r3,-24(fp)
    af24:	e0bffc17 	ldw	r2,-16(fp)
    af28:	18801926 	beq	r3,r2,af90 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af2c:	0005303a 	rdctl	r2,status
    af30:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af34:	e0fff517 	ldw	r3,-44(fp)
    af38:	00bfff84 	movi	r2,-2
    af3c:	1884703a 	and	r2,r3,r2
    af40:	1001703a 	wrctl	status,r2
  
  return context;
    af44:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    af48:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    af4c:	e0bffb17 	ldw	r2,-20(fp)
    af50:	10800817 	ldw	r2,32(r2)
    af54:	10c00054 	ori	r3,r2,1
    af58:	e0bffb17 	ldw	r2,-20(fp)
    af5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    af60:	e0bffb17 	ldw	r2,-20(fp)
    af64:	10800017 	ldw	r2,0(r2)
    af68:	11000104 	addi	r4,r2,4
    af6c:	e0bffb17 	ldw	r2,-20(fp)
    af70:	10800817 	ldw	r2,32(r2)
    af74:	1007883a 	mov	r3,r2
    af78:	2005883a 	mov	r2,r4
    af7c:	10c00035 	stwio	r3,0(r2)
    af80:	e0bff917 	ldw	r2,-28(fp)
    af84:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af88:	e0bff417 	ldw	r2,-48(fp)
    af8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    af90:	e0fffa17 	ldw	r3,-24(fp)
    af94:	e0bffc17 	ldw	r2,-16(fp)
    af98:	18800526 	beq	r3,r2,afb0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    af9c:	e0fffa17 	ldw	r3,-24(fp)
    afa0:	e0bffc17 	ldw	r2,-16(fp)
    afa4:	1887c83a 	sub	r3,r3,r2
    afa8:	e0ffff15 	stw	r3,-4(fp)
    afac:	00000906 	br	afd4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    afb0:	e0bffe17 	ldw	r2,-8(fp)
    afb4:	1090000c 	andi	r2,r2,16384
    afb8:	1005003a 	cmpeq	r2,r2,zero
    afbc:	1000031e 	bne	r2,zero,afcc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    afc0:	00bffd44 	movi	r2,-11
    afc4:	e0bfff15 	stw	r2,-4(fp)
    afc8:	00000206 	br	afd4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    afcc:	00bffec4 	movi	r2,-5
    afd0:	e0bfff15 	stw	r2,-4(fp)
    afd4:	e0bfff17 	ldw	r2,-4(fp)
}
    afd8:	e037883a 	mov	sp,fp
    afdc:	dfc00117 	ldw	ra,4(sp)
    afe0:	df000017 	ldw	fp,0(sp)
    afe4:	dec00204 	addi	sp,sp,8
    afe8:	f800283a 	ret

0000afec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    afec:	defff204 	addi	sp,sp,-56
    aff0:	dfc00d15 	stw	ra,52(sp)
    aff4:	df000c15 	stw	fp,48(sp)
    aff8:	df000c04 	addi	fp,sp,48
    affc:	e13ffb15 	stw	r4,-20(fp)
    b000:	e17ffc15 	stw	r5,-16(fp)
    b004:	e1bffd15 	stw	r6,-12(fp)
    b008:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b00c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b010:	e0bffc17 	ldw	r2,-16(fp)
    b014:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b018:	00003a06 	br	b104 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b01c:	e0bffb17 	ldw	r2,-20(fp)
    b020:	10800c17 	ldw	r2,48(r2)
    b024:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b028:	e0bffb17 	ldw	r2,-20(fp)
    b02c:	10800d17 	ldw	r2,52(r2)
    b030:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b034:	e0fffa17 	ldw	r3,-24(fp)
    b038:	e0bff917 	ldw	r2,-28(fp)
    b03c:	1880062e 	bgeu	r3,r2,b058 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b040:	e0fff917 	ldw	r3,-28(fp)
    b044:	e0bffa17 	ldw	r2,-24(fp)
    b048:	1885c83a 	sub	r2,r3,r2
    b04c:	10bfffc4 	addi	r2,r2,-1
    b050:	e0bff815 	stw	r2,-32(fp)
    b054:	00000c06 	br	b088 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b058:	e0bff917 	ldw	r2,-28(fp)
    b05c:	1005003a 	cmpeq	r2,r2,zero
    b060:	1000051e 	bne	r2,zero,b078 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b064:	00820004 	movi	r2,2048
    b068:	e0fffa17 	ldw	r3,-24(fp)
    b06c:	10c5c83a 	sub	r2,r2,r3
    b070:	e0bff815 	stw	r2,-32(fp)
    b074:	00000406 	br	b088 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b078:	0081ffc4 	movi	r2,2047
    b07c:	e0fffa17 	ldw	r3,-24(fp)
    b080:	10c5c83a 	sub	r2,r2,r3
    b084:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b088:	e0bff817 	ldw	r2,-32(fp)
    b08c:	1005003a 	cmpeq	r2,r2,zero
    b090:	10001f1e 	bne	r2,zero,b110 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b094:	e0fffd17 	ldw	r3,-12(fp)
    b098:	e0bff817 	ldw	r2,-32(fp)
    b09c:	1880022e 	bgeu	r3,r2,b0a8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b0a0:	e0bffd17 	ldw	r2,-12(fp)
    b0a4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b0a8:	e0bffb17 	ldw	r2,-20(fp)
    b0ac:	10c20e04 	addi	r3,r2,2104
    b0b0:	e0bffa17 	ldw	r2,-24(fp)
    b0b4:	1885883a 	add	r2,r3,r2
    b0b8:	e0fffc17 	ldw	r3,-16(fp)
    b0bc:	1009883a 	mov	r4,r2
    b0c0:	180b883a 	mov	r5,r3
    b0c4:	e1bff817 	ldw	r6,-32(fp)
    b0c8:	00057940 	call	5794 <memcpy>
      ptr   += n;
    b0cc:	e0fff817 	ldw	r3,-32(fp)
    b0d0:	e0bffc17 	ldw	r2,-16(fp)
    b0d4:	10c5883a 	add	r2,r2,r3
    b0d8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b0dc:	e0fffd17 	ldw	r3,-12(fp)
    b0e0:	e0bff817 	ldw	r2,-32(fp)
    b0e4:	1885c83a 	sub	r2,r3,r2
    b0e8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b0ec:	e0fffa17 	ldw	r3,-24(fp)
    b0f0:	e0bff817 	ldw	r2,-32(fp)
    b0f4:	1885883a 	add	r2,r3,r2
    b0f8:	10c1ffcc 	andi	r3,r2,2047
    b0fc:	e0bffb17 	ldw	r2,-20(fp)
    b100:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b104:	e0bffd17 	ldw	r2,-12(fp)
    b108:	10800048 	cmpgei	r2,r2,1
    b10c:	103fc31e 	bne	r2,zero,b01c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b110:	0005303a 	rdctl	r2,status
    b114:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b118:	e0fff517 	ldw	r3,-44(fp)
    b11c:	00bfff84 	movi	r2,-2
    b120:	1884703a 	and	r2,r3,r2
    b124:	1001703a 	wrctl	status,r2
  
  return context;
    b128:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b12c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b130:	e0bffb17 	ldw	r2,-20(fp)
    b134:	10800817 	ldw	r2,32(r2)
    b138:	10c00094 	ori	r3,r2,2
    b13c:	e0bffb17 	ldw	r2,-20(fp)
    b140:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b144:	e0bffb17 	ldw	r2,-20(fp)
    b148:	10800017 	ldw	r2,0(r2)
    b14c:	11000104 	addi	r4,r2,4
    b150:	e0bffb17 	ldw	r2,-20(fp)
    b154:	10800817 	ldw	r2,32(r2)
    b158:	1007883a 	mov	r3,r2
    b15c:	2005883a 	mov	r2,r4
    b160:	10c00035 	stwio	r3,0(r2)
    b164:	e0bff717 	ldw	r2,-36(fp)
    b168:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b16c:	e0bff417 	ldw	r2,-48(fp)
    b170:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b174:	e0bffd17 	ldw	r2,-12(fp)
    b178:	10800050 	cmplti	r2,r2,1
    b17c:	1000111e 	bne	r2,zero,b1c4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b180:	e0bffe17 	ldw	r2,-8(fp)
    b184:	1090000c 	andi	r2,r2,16384
    b188:	1004c03a 	cmpne	r2,r2,zero
    b18c:	1000101e 	bne	r2,zero,b1d0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b190:	e0bffb17 	ldw	r2,-20(fp)
    b194:	10c00d17 	ldw	r3,52(r2)
    b198:	e0bff917 	ldw	r2,-28(fp)
    b19c:	1880051e 	bne	r3,r2,b1b4 <altera_avalon_jtag_uart_write+0x1c8>
    b1a0:	e0bffb17 	ldw	r2,-20(fp)
    b1a4:	10c00917 	ldw	r3,36(r2)
    b1a8:	e0bffb17 	ldw	r2,-20(fp)
    b1ac:	10800117 	ldw	r2,4(r2)
    b1b0:	18bff736 	bltu	r3,r2,b190 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b1b4:	e0bffb17 	ldw	r2,-20(fp)
    b1b8:	10c00d17 	ldw	r3,52(r2)
    b1bc:	e0bff917 	ldw	r2,-28(fp)
    b1c0:	18800326 	beq	r3,r2,b1d0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    b1c4:	e0bffd17 	ldw	r2,-12(fp)
    b1c8:	10800048 	cmpgei	r2,r2,1
    b1cc:	103fcd1e 	bne	r2,zero,b104 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b1d0:	e0fffc17 	ldw	r3,-16(fp)
    b1d4:	e0bff617 	ldw	r2,-40(fp)
    b1d8:	18800526 	beq	r3,r2,b1f0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b1dc:	e0fffc17 	ldw	r3,-16(fp)
    b1e0:	e0bff617 	ldw	r2,-40(fp)
    b1e4:	1887c83a 	sub	r3,r3,r2
    b1e8:	e0ffff15 	stw	r3,-4(fp)
    b1ec:	00000906 	br	b214 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b1f0:	e0bffe17 	ldw	r2,-8(fp)
    b1f4:	1090000c 	andi	r2,r2,16384
    b1f8:	1005003a 	cmpeq	r2,r2,zero
    b1fc:	1000031e 	bne	r2,zero,b20c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b200:	00bffd44 	movi	r2,-11
    b204:	e0bfff15 	stw	r2,-4(fp)
    b208:	00000206 	br	b214 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b20c:	00bffec4 	movi	r2,-5
    b210:	e0bfff15 	stw	r2,-4(fp)
    b214:	e0bfff17 	ldw	r2,-4(fp)
}
    b218:	e037883a 	mov	sp,fp
    b21c:	dfc00117 	ldw	ra,4(sp)
    b220:	df000017 	ldw	fp,0(sp)
    b224:	dec00204 	addi	sp,sp,8
    b228:	f800283a 	ret

0000b22c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b22c:	defffa04 	addi	sp,sp,-24
    b230:	dfc00515 	stw	ra,20(sp)
    b234:	df000415 	stw	fp,16(sp)
    b238:	df000404 	addi	fp,sp,16
    b23c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b240:	e0bfff17 	ldw	r2,-4(fp)
    b244:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b248:	e0bfff17 	ldw	r2,-4(fp)
    b24c:	10800104 	addi	r2,r2,4
    b250:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b254:	0005303a 	rdctl	r2,status
    b258:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b25c:	e0fffd17 	ldw	r3,-12(fp)
    b260:	00bfff84 	movi	r2,-2
    b264:	1884703a 	and	r2,r3,r2
    b268:	1001703a 	wrctl	status,r2
  
  return context;
    b26c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b270:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b274:	000be0c0 	call	be0c <alt_tick>
    b278:	e0bffe17 	ldw	r2,-8(fp)
    b27c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b280:	e0bffc17 	ldw	r2,-16(fp)
    b284:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b288:	e037883a 	mov	sp,fp
    b28c:	dfc00117 	ldw	ra,4(sp)
    b290:	df000017 	ldw	fp,0(sp)
    b294:	dec00204 	addi	sp,sp,8
    b298:	f800283a 	ret

0000b29c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b29c:	defff804 	addi	sp,sp,-32
    b2a0:	dfc00715 	stw	ra,28(sp)
    b2a4:	df000615 	stw	fp,24(sp)
    b2a8:	df000604 	addi	fp,sp,24
    b2ac:	e13ffc15 	stw	r4,-16(fp)
    b2b0:	e17ffd15 	stw	r5,-12(fp)
    b2b4:	e1bffe15 	stw	r6,-8(fp)
    b2b8:	e1ffff15 	stw	r7,-4(fp)
    b2bc:	e0bfff17 	ldw	r2,-4(fp)
    b2c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b2c4:	00800074 	movhi	r2,1
    b2c8:	10bff204 	addi	r2,r2,-56
    b2cc:	10800017 	ldw	r2,0(r2)
    b2d0:	1004c03a 	cmpne	r2,r2,zero
    b2d4:	1000041e 	bne	r2,zero,b2e8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b2d8:	00c00074 	movhi	r3,1
    b2dc:	18fff204 	addi	r3,r3,-56
    b2e0:	e0bffb17 	ldw	r2,-20(fp)
    b2e4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b2e8:	e0bffc17 	ldw	r2,-16(fp)
    b2ec:	10800104 	addi	r2,r2,4
    b2f0:	1007883a 	mov	r3,r2
    b2f4:	008001c4 	movi	r2,7
    b2f8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b2fc:	d8000015 	stw	zero,0(sp)
    b300:	e13ffd17 	ldw	r4,-12(fp)
    b304:	e17ffe17 	ldw	r5,-8(fp)
    b308:	01800074 	movhi	r6,1
    b30c:	31ac8b04 	addi	r6,r6,-19924
    b310:	e1fffc17 	ldw	r7,-16(fp)
    b314:	000b6a80 	call	b6a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b318:	e037883a 	mov	sp,fp
    b31c:	dfc00117 	ldw	ra,4(sp)
    b320:	df000017 	ldw	fp,0(sp)
    b324:	dec00204 	addi	sp,sp,8
    b328:	f800283a 	ret

0000b32c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b32c:	defff404 	addi	sp,sp,-48
    b330:	df000b15 	stw	fp,44(sp)
    b334:	df000b04 	addi	fp,sp,44
    b338:	e13ffb15 	stw	r4,-20(fp)
    b33c:	e17ffc15 	stw	r5,-16(fp)
    b340:	e1bffd15 	stw	r6,-12(fp)
    b344:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b348:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b34c:	00800074 	movhi	r2,1
    b350:	10bff204 	addi	r2,r2,-56
    b354:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b358:	1005003a 	cmpeq	r2,r2,zero
    b35c:	1000411e 	bne	r2,zero,b464 <alt_alarm_start+0x138>
  {
    if (alarm)
    b360:	e0bffb17 	ldw	r2,-20(fp)
    b364:	1005003a 	cmpeq	r2,r2,zero
    b368:	10003b1e 	bne	r2,zero,b458 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    b36c:	e0fffb17 	ldw	r3,-20(fp)
    b370:	e0bffd17 	ldw	r2,-12(fp)
    b374:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    b378:	e0fffb17 	ldw	r3,-20(fp)
    b37c:	e0bffe17 	ldw	r2,-8(fp)
    b380:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b384:	0005303a 	rdctl	r2,status
    b388:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b38c:	e0fff817 	ldw	r3,-32(fp)
    b390:	00bfff84 	movi	r2,-2
    b394:	1884703a 	and	r2,r3,r2
    b398:	1001703a 	wrctl	status,r2
  
  return context;
    b39c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b3a0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b3a4:	00800074 	movhi	r2,1
    b3a8:	10bff304 	addi	r2,r2,-52
    b3ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b3b0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b3b4:	e0fffc17 	ldw	r3,-16(fp)
    b3b8:	e0bff917 	ldw	r2,-28(fp)
    b3bc:	1885883a 	add	r2,r3,r2
    b3c0:	10c00044 	addi	r3,r2,1
    b3c4:	e0bffb17 	ldw	r2,-20(fp)
    b3c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b3cc:	e0bffb17 	ldw	r2,-20(fp)
    b3d0:	10c00217 	ldw	r3,8(r2)
    b3d4:	e0bff917 	ldw	r2,-28(fp)
    b3d8:	1880042e 	bgeu	r3,r2,b3ec <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    b3dc:	e0fffb17 	ldw	r3,-20(fp)
    b3e0:	00800044 	movi	r2,1
    b3e4:	18800405 	stb	r2,16(r3)
    b3e8:	00000206 	br	b3f4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    b3ec:	e0bffb17 	ldw	r2,-20(fp)
    b3f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b3f4:	e0fffb17 	ldw	r3,-20(fp)
    b3f8:	00800074 	movhi	r2,1
    b3fc:	10b92c04 	addi	r2,r2,-6992
    b400:	e0bff615 	stw	r2,-40(fp)
    b404:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b408:	e0fff717 	ldw	r3,-36(fp)
    b40c:	e0bff617 	ldw	r2,-40(fp)
    b410:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b414:	e0bff617 	ldw	r2,-40(fp)
    b418:	10c00017 	ldw	r3,0(r2)
    b41c:	e0bff717 	ldw	r2,-36(fp)
    b420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b424:	e0bff617 	ldw	r2,-40(fp)
    b428:	10c00017 	ldw	r3,0(r2)
    b42c:	e0bff717 	ldw	r2,-36(fp)
    b430:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b434:	e0fff617 	ldw	r3,-40(fp)
    b438:	e0bff717 	ldw	r2,-36(fp)
    b43c:	18800015 	stw	r2,0(r3)
    b440:	e0bffa17 	ldw	r2,-24(fp)
    b444:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b448:	e0bff517 	ldw	r2,-44(fp)
    b44c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b450:	e03fff15 	stw	zero,-4(fp)
    b454:	00000506 	br	b46c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    b458:	00bffa84 	movi	r2,-22
    b45c:	e0bfff15 	stw	r2,-4(fp)
    b460:	00000206 	br	b46c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    b464:	00bfde84 	movi	r2,-134
    b468:	e0bfff15 	stw	r2,-4(fp)
    b46c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b470:	e037883a 	mov	sp,fp
    b474:	df000017 	ldw	fp,0(sp)
    b478:	dec00104 	addi	sp,sp,4
    b47c:	f800283a 	ret

0000b480 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b480:	deffff04 	addi	sp,sp,-4
    b484:	df000015 	stw	fp,0(sp)
    b488:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b48c:	e037883a 	mov	sp,fp
    b490:	df000017 	ldw	fp,0(sp)
    b494:	dec00104 	addi	sp,sp,4
    b498:	f800283a 	ret

0000b49c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b49c:	defff904 	addi	sp,sp,-28
    b4a0:	dfc00615 	stw	ra,24(sp)
    b4a4:	df000515 	stw	fp,20(sp)
    b4a8:	df000504 	addi	fp,sp,20
    b4ac:	e13ffd15 	stw	r4,-12(fp)
    b4b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b4b4:	e0bffd17 	ldw	r2,-12(fp)
    b4b8:	1005003a 	cmpeq	r2,r2,zero
    b4bc:	1000041e 	bne	r2,zero,b4d0 <alt_dev_llist_insert+0x34>
    b4c0:	e0bffd17 	ldw	r2,-12(fp)
    b4c4:	10800217 	ldw	r2,8(r2)
    b4c8:	1004c03a 	cmpne	r2,r2,zero
    b4cc:	1000071e 	bne	r2,zero,b4ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b4d0:	000b5500 	call	b550 <alt_get_errno>
    b4d4:	1007883a 	mov	r3,r2
    b4d8:	00800584 	movi	r2,22
    b4dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b4e0:	00bffa84 	movi	r2,-22
    b4e4:	e0bfff15 	stw	r2,-4(fp)
    b4e8:	00001306 	br	b538 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b4ec:	e0fffd17 	ldw	r3,-12(fp)
    b4f0:	e0bffe17 	ldw	r2,-8(fp)
    b4f4:	e0bffb15 	stw	r2,-20(fp)
    b4f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b4fc:	e0fffc17 	ldw	r3,-16(fp)
    b500:	e0bffb17 	ldw	r2,-20(fp)
    b504:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b508:	e0bffb17 	ldw	r2,-20(fp)
    b50c:	10c00017 	ldw	r3,0(r2)
    b510:	e0bffc17 	ldw	r2,-16(fp)
    b514:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b518:	e0bffb17 	ldw	r2,-20(fp)
    b51c:	10c00017 	ldw	r3,0(r2)
    b520:	e0bffc17 	ldw	r2,-16(fp)
    b524:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b528:	e0fffb17 	ldw	r3,-20(fp)
    b52c:	e0bffc17 	ldw	r2,-16(fp)
    b530:	18800015 	stw	r2,0(r3)

  return 0;  
    b534:	e03fff15 	stw	zero,-4(fp)
    b538:	e0bfff17 	ldw	r2,-4(fp)
}
    b53c:	e037883a 	mov	sp,fp
    b540:	dfc00117 	ldw	ra,4(sp)
    b544:	df000017 	ldw	fp,0(sp)
    b548:	dec00204 	addi	sp,sp,8
    b54c:	f800283a 	ret

0000b550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b550:	defffd04 	addi	sp,sp,-12
    b554:	dfc00215 	stw	ra,8(sp)
    b558:	df000115 	stw	fp,4(sp)
    b55c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b560:	00800074 	movhi	r2,1
    b564:	10b92904 	addi	r2,r2,-7004
    b568:	10800017 	ldw	r2,0(r2)
    b56c:	1005003a 	cmpeq	r2,r2,zero
    b570:	1000061e 	bne	r2,zero,b58c <alt_get_errno+0x3c>
    b574:	00800074 	movhi	r2,1
    b578:	10b92904 	addi	r2,r2,-7004
    b57c:	10800017 	ldw	r2,0(r2)
    b580:	103ee83a 	callr	r2
    b584:	e0bfff15 	stw	r2,-4(fp)
    b588:	00000306 	br	b598 <alt_get_errno+0x48>
    b58c:	00800074 	movhi	r2,1
    b590:	10bfed04 	addi	r2,r2,-76
    b594:	e0bfff15 	stw	r2,-4(fp)
    b598:	e0bfff17 	ldw	r2,-4(fp)
}
    b59c:	e037883a 	mov	sp,fp
    b5a0:	dfc00117 	ldw	ra,4(sp)
    b5a4:	df000017 	ldw	fp,0(sp)
    b5a8:	dec00204 	addi	sp,sp,8
    b5ac:	f800283a 	ret

0000b5b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b5b0:	defffd04 	addi	sp,sp,-12
    b5b4:	dfc00215 	stw	ra,8(sp)
    b5b8:	df000115 	stw	fp,4(sp)
    b5bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b5c0:	00bfff04 	movi	r2,-4
    b5c4:	00c00074 	movhi	r3,1
    b5c8:	18f19004 	addi	r3,r3,-14784
    b5cc:	1885883a 	add	r2,r3,r2
    b5d0:	e0bfff15 	stw	r2,-4(fp)
    b5d4:	00000606 	br	b5f0 <_do_ctors+0x40>
        (*ctor) (); 
    b5d8:	e0bfff17 	ldw	r2,-4(fp)
    b5dc:	10800017 	ldw	r2,0(r2)
    b5e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b5e4:	e0bfff17 	ldw	r2,-4(fp)
    b5e8:	10bfff04 	addi	r2,r2,-4
    b5ec:	e0bfff15 	stw	r2,-4(fp)
    b5f0:	e0ffff17 	ldw	r3,-4(fp)
    b5f4:	00800074 	movhi	r2,1
    b5f8:	10b18f04 	addi	r2,r2,-14788
    b5fc:	18bff62e 	bgeu	r3,r2,b5d8 <_do_ctors+0x28>
        (*ctor) (); 
}
    b600:	e037883a 	mov	sp,fp
    b604:	dfc00117 	ldw	ra,4(sp)
    b608:	df000017 	ldw	fp,0(sp)
    b60c:	dec00204 	addi	sp,sp,8
    b610:	f800283a 	ret

0000b614 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b614:	defffd04 	addi	sp,sp,-12
    b618:	dfc00215 	stw	ra,8(sp)
    b61c:	df000115 	stw	fp,4(sp)
    b620:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b624:	00bfff04 	movi	r2,-4
    b628:	00c00074 	movhi	r3,1
    b62c:	18f19004 	addi	r3,r3,-14784
    b630:	1885883a 	add	r2,r3,r2
    b634:	e0bfff15 	stw	r2,-4(fp)
    b638:	00000606 	br	b654 <_do_dtors+0x40>
        (*dtor) (); 
    b63c:	e0bfff17 	ldw	r2,-4(fp)
    b640:	10800017 	ldw	r2,0(r2)
    b644:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b648:	e0bfff17 	ldw	r2,-4(fp)
    b64c:	10bfff04 	addi	r2,r2,-4
    b650:	e0bfff15 	stw	r2,-4(fp)
    b654:	e0ffff17 	ldw	r3,-4(fp)
    b658:	00800074 	movhi	r2,1
    b65c:	10b19004 	addi	r2,r2,-14784
    b660:	18bff62e 	bgeu	r3,r2,b63c <_do_dtors+0x28>
        (*dtor) (); 
}
    b664:	e037883a 	mov	sp,fp
    b668:	dfc00117 	ldw	ra,4(sp)
    b66c:	df000017 	ldw	fp,0(sp)
    b670:	dec00204 	addi	sp,sp,8
    b674:	f800283a 	ret

0000b678 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b678:	defffe04 	addi	sp,sp,-8
    b67c:	dfc00115 	stw	ra,4(sp)
    b680:	df000015 	stw	fp,0(sp)
    b684:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    b688:	0009883a 	mov	r4,zero
    b68c:	01420004 	movi	r5,2048
    b690:	000c1a40 	call	c1a4 <alt_icache_flush>
#endif
}
    b694:	e037883a 	mov	sp,fp
    b698:	dfc00117 	ldw	ra,4(sp)
    b69c:	df000017 	ldw	fp,0(sp)
    b6a0:	dec00204 	addi	sp,sp,8
    b6a4:	f800283a 	ret

0000b6a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b6a8:	defff904 	addi	sp,sp,-28
    b6ac:	dfc00615 	stw	ra,24(sp)
    b6b0:	df000515 	stw	fp,20(sp)
    b6b4:	df000504 	addi	fp,sp,20
    b6b8:	e13ffc15 	stw	r4,-16(fp)
    b6bc:	e17ffd15 	stw	r5,-12(fp)
    b6c0:	e1bffe15 	stw	r6,-8(fp)
    b6c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b6c8:	e0800217 	ldw	r2,8(fp)
    b6cc:	d8800015 	stw	r2,0(sp)
    b6d0:	e13ffc17 	ldw	r4,-16(fp)
    b6d4:	e17ffd17 	ldw	r5,-12(fp)
    b6d8:	e1bffe17 	ldw	r6,-8(fp)
    b6dc:	e1ffff17 	ldw	r7,-4(fp)
    b6e0:	000b87c0 	call	b87c <alt_iic_isr_register>
}  
    b6e4:	e037883a 	mov	sp,fp
    b6e8:	dfc00117 	ldw	ra,4(sp)
    b6ec:	df000017 	ldw	fp,0(sp)
    b6f0:	dec00204 	addi	sp,sp,8
    b6f4:	f800283a 	ret

0000b6f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b6f8:	defff904 	addi	sp,sp,-28
    b6fc:	df000615 	stw	fp,24(sp)
    b700:	df000604 	addi	fp,sp,24
    b704:	e13ffe15 	stw	r4,-8(fp)
    b708:	e17fff15 	stw	r5,-4(fp)
    b70c:	e0bfff17 	ldw	r2,-4(fp)
    b710:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b714:	0005303a 	rdctl	r2,status
    b718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b71c:	e0fffb17 	ldw	r3,-20(fp)
    b720:	00bfff84 	movi	r2,-2
    b724:	1884703a 	and	r2,r3,r2
    b728:	1001703a 	wrctl	status,r2
  
  return context;
    b72c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b730:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b734:	e0fffc17 	ldw	r3,-16(fp)
    b738:	00800044 	movi	r2,1
    b73c:	10c4983a 	sll	r2,r2,r3
    b740:	1007883a 	mov	r3,r2
    b744:	00800074 	movhi	r2,1
    b748:	10bff104 	addi	r2,r2,-60
    b74c:	10800017 	ldw	r2,0(r2)
    b750:	1886b03a 	or	r3,r3,r2
    b754:	00800074 	movhi	r2,1
    b758:	10bff104 	addi	r2,r2,-60
    b75c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b760:	00800074 	movhi	r2,1
    b764:	10bff104 	addi	r2,r2,-60
    b768:	10800017 	ldw	r2,0(r2)
    b76c:	100170fa 	wrctl	ienable,r2
    b770:	e0bffd17 	ldw	r2,-12(fp)
    b774:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b778:	e0bffa17 	ldw	r2,-24(fp)
    b77c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b780:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b784:	e037883a 	mov	sp,fp
    b788:	df000017 	ldw	fp,0(sp)
    b78c:	dec00104 	addi	sp,sp,4
    b790:	f800283a 	ret

0000b794 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b794:	defff904 	addi	sp,sp,-28
    b798:	df000615 	stw	fp,24(sp)
    b79c:	df000604 	addi	fp,sp,24
    b7a0:	e13ffe15 	stw	r4,-8(fp)
    b7a4:	e17fff15 	stw	r5,-4(fp)
    b7a8:	e0bfff17 	ldw	r2,-4(fp)
    b7ac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7b0:	0005303a 	rdctl	r2,status
    b7b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7b8:	e0fffb17 	ldw	r3,-20(fp)
    b7bc:	00bfff84 	movi	r2,-2
    b7c0:	1884703a 	and	r2,r3,r2
    b7c4:	1001703a 	wrctl	status,r2
  
  return context;
    b7c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b7cc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b7d0:	e0fffc17 	ldw	r3,-16(fp)
    b7d4:	00800044 	movi	r2,1
    b7d8:	10c4983a 	sll	r2,r2,r3
    b7dc:	0084303a 	nor	r2,zero,r2
    b7e0:	1007883a 	mov	r3,r2
    b7e4:	00800074 	movhi	r2,1
    b7e8:	10bff104 	addi	r2,r2,-60
    b7ec:	10800017 	ldw	r2,0(r2)
    b7f0:	1886703a 	and	r3,r3,r2
    b7f4:	00800074 	movhi	r2,1
    b7f8:	10bff104 	addi	r2,r2,-60
    b7fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b800:	00800074 	movhi	r2,1
    b804:	10bff104 	addi	r2,r2,-60
    b808:	10800017 	ldw	r2,0(r2)
    b80c:	100170fa 	wrctl	ienable,r2
    b810:	e0bffd17 	ldw	r2,-12(fp)
    b814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b818:	e0bffa17 	ldw	r2,-24(fp)
    b81c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b820:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b824:	e037883a 	mov	sp,fp
    b828:	df000017 	ldw	fp,0(sp)
    b82c:	dec00104 	addi	sp,sp,4
    b830:	f800283a 	ret

0000b834 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b834:	defffc04 	addi	sp,sp,-16
    b838:	df000315 	stw	fp,12(sp)
    b83c:	df000304 	addi	fp,sp,12
    b840:	e13ffe15 	stw	r4,-8(fp)
    b844:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    b848:	000530fa 	rdctl	r2,ienable
    b84c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    b850:	e0ffff17 	ldw	r3,-4(fp)
    b854:	00800044 	movi	r2,1
    b858:	10c4983a 	sll	r2,r2,r3
    b85c:	1007883a 	mov	r3,r2
    b860:	e0bffd17 	ldw	r2,-12(fp)
    b864:	1884703a 	and	r2,r3,r2
    b868:	1004c03a 	cmpne	r2,r2,zero
}
    b86c:	e037883a 	mov	sp,fp
    b870:	df000017 	ldw	fp,0(sp)
    b874:	dec00104 	addi	sp,sp,4
    b878:	f800283a 	ret

0000b87c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b87c:	defff404 	addi	sp,sp,-48
    b880:	dfc00b15 	stw	ra,44(sp)
    b884:	df000a15 	stw	fp,40(sp)
    b888:	df000a04 	addi	fp,sp,40
    b88c:	e13ffb15 	stw	r4,-20(fp)
    b890:	e17ffc15 	stw	r5,-16(fp)
    b894:	e1bffd15 	stw	r6,-12(fp)
    b898:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    b89c:	00bffa84 	movi	r2,-22
    b8a0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    b8a4:	e0bffc17 	ldw	r2,-16(fp)
    b8a8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b8ac:	e0bff917 	ldw	r2,-28(fp)
    b8b0:	10800808 	cmpgei	r2,r2,32
    b8b4:	1000291e 	bne	r2,zero,b95c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8b8:	0005303a 	rdctl	r2,status
    b8bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8c0:	e0fff717 	ldw	r3,-36(fp)
    b8c4:	00bfff84 	movi	r2,-2
    b8c8:	1884703a 	and	r2,r3,r2
    b8cc:	1001703a 	wrctl	status,r2
  
  return context;
    b8d0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    b8d4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    b8d8:	e0bff917 	ldw	r2,-28(fp)
    b8dc:	00c00074 	movhi	r3,1
    b8e0:	18fffe04 	addi	r3,r3,-8
    b8e4:	100490fa 	slli	r2,r2,3
    b8e8:	10c7883a 	add	r3,r2,r3
    b8ec:	e0bffd17 	ldw	r2,-12(fp)
    b8f0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    b8f4:	e0bff917 	ldw	r2,-28(fp)
    b8f8:	00c00074 	movhi	r3,1
    b8fc:	18fffe04 	addi	r3,r3,-8
    b900:	100490fa 	slli	r2,r2,3
    b904:	10c5883a 	add	r2,r2,r3
    b908:	10c00104 	addi	r3,r2,4
    b90c:	e0bffe17 	ldw	r2,-8(fp)
    b910:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    b914:	e0bffd17 	ldw	r2,-12(fp)
    b918:	1005003a 	cmpeq	r2,r2,zero
    b91c:	1000051e 	bne	r2,zero,b934 <alt_iic_isr_register+0xb8>
    b920:	e17ff917 	ldw	r5,-28(fp)
    b924:	e13ffb17 	ldw	r4,-20(fp)
    b928:	000b6f80 	call	b6f8 <alt_ic_irq_enable>
    b92c:	e0bfff15 	stw	r2,-4(fp)
    b930:	00000406 	br	b944 <alt_iic_isr_register+0xc8>
    b934:	e17ff917 	ldw	r5,-28(fp)
    b938:	e13ffb17 	ldw	r4,-20(fp)
    b93c:	000b7940 	call	b794 <alt_ic_irq_disable>
    b940:	e0bfff15 	stw	r2,-4(fp)
    b944:	e0bfff17 	ldw	r2,-4(fp)
    b948:	e0bffa15 	stw	r2,-24(fp)
    b94c:	e0bff817 	ldw	r2,-32(fp)
    b950:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b954:	e0bff617 	ldw	r2,-40(fp)
    b958:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    b95c:	e0bffa17 	ldw	r2,-24(fp)
}
    b960:	e037883a 	mov	sp,fp
    b964:	dfc00117 	ldw	ra,4(sp)
    b968:	df000017 	ldw	fp,0(sp)
    b96c:	dec00204 	addi	sp,sp,8
    b970:	f800283a 	ret

0000b974 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    b974:	defff904 	addi	sp,sp,-28
    b978:	dfc00615 	stw	ra,24(sp)
    b97c:	df000515 	stw	fp,20(sp)
    b980:	df000504 	addi	fp,sp,20
    b984:	e13ffc15 	stw	r4,-16(fp)
    b988:	e17ffd15 	stw	r5,-12(fp)
    b98c:	e1bffe15 	stw	r6,-8(fp)
    b990:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    b994:	e13ffd17 	ldw	r4,-12(fp)
    b998:	e17ffe17 	ldw	r5,-8(fp)
    b99c:	e1bfff17 	ldw	r6,-4(fp)
    b9a0:	000bb8c0 	call	bb8c <open>
    b9a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    b9a8:	e0bffb17 	ldw	r2,-20(fp)
    b9ac:	1004803a 	cmplt	r2,r2,zero
    b9b0:	10001c1e 	bne	r2,zero,ba24 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    b9b4:	e0bffb17 	ldw	r2,-20(fp)
    b9b8:	00c00074 	movhi	r3,1
    b9bc:	18f48504 	addi	r3,r3,-11756
    b9c0:	10800324 	muli	r2,r2,12
    b9c4:	10c5883a 	add	r2,r2,r3
    b9c8:	10c00017 	ldw	r3,0(r2)
    b9cc:	e0bffc17 	ldw	r2,-16(fp)
    b9d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    b9d4:	e0bffb17 	ldw	r2,-20(fp)
    b9d8:	00c00074 	movhi	r3,1
    b9dc:	18f48504 	addi	r3,r3,-11756
    b9e0:	10800324 	muli	r2,r2,12
    b9e4:	10c5883a 	add	r2,r2,r3
    b9e8:	10800104 	addi	r2,r2,4
    b9ec:	10c00017 	ldw	r3,0(r2)
    b9f0:	e0bffc17 	ldw	r2,-16(fp)
    b9f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    b9f8:	e0bffb17 	ldw	r2,-20(fp)
    b9fc:	00c00074 	movhi	r3,1
    ba00:	18f48504 	addi	r3,r3,-11756
    ba04:	10800324 	muli	r2,r2,12
    ba08:	10c5883a 	add	r2,r2,r3
    ba0c:	10800204 	addi	r2,r2,8
    ba10:	10c00017 	ldw	r3,0(r2)
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ba1c:	e13ffb17 	ldw	r4,-20(fp)
    ba20:	000a3f80 	call	a3f8 <alt_release_fd>
  }
} 
    ba24:	e037883a 	mov	sp,fp
    ba28:	dfc00117 	ldw	ra,4(sp)
    ba2c:	df000017 	ldw	fp,0(sp)
    ba30:	dec00204 	addi	sp,sp,8
    ba34:	f800283a 	ret

0000ba38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    ba38:	defffb04 	addi	sp,sp,-20
    ba3c:	dfc00415 	stw	ra,16(sp)
    ba40:	df000315 	stw	fp,12(sp)
    ba44:	df000304 	addi	fp,sp,12
    ba48:	e13ffd15 	stw	r4,-12(fp)
    ba4c:	e17ffe15 	stw	r5,-8(fp)
    ba50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ba54:	01000074 	movhi	r4,1
    ba58:	21348804 	addi	r4,r4,-11744
    ba5c:	e17ffd17 	ldw	r5,-12(fp)
    ba60:	01800044 	movi	r6,1
    ba64:	01c07fc4 	movi	r7,511
    ba68:	000b9740 	call	b974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ba6c:	01000074 	movhi	r4,1
    ba70:	21348504 	addi	r4,r4,-11756
    ba74:	e17ffe17 	ldw	r5,-8(fp)
    ba78:	000d883a 	mov	r6,zero
    ba7c:	01c07fc4 	movi	r7,511
    ba80:	000b9740 	call	b974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ba84:	01000074 	movhi	r4,1
    ba88:	21348b04 	addi	r4,r4,-11732
    ba8c:	e17fff17 	ldw	r5,-4(fp)
    ba90:	01800044 	movi	r6,1
    ba94:	01c07fc4 	movi	r7,511
    ba98:	000b9740 	call	b974 <alt_open_fd>
}  
    ba9c:	e037883a 	mov	sp,fp
    baa0:	dfc00117 	ldw	ra,4(sp)
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00204 	addi	sp,sp,8
    baac:	f800283a 	ret

0000bab0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bab0:	defffc04 	addi	sp,sp,-16
    bab4:	df000315 	stw	fp,12(sp)
    bab8:	df000304 	addi	fp,sp,12
    babc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bac0:	e0bffe17 	ldw	r2,-8(fp)
    bac4:	10800217 	ldw	r2,8(r2)
    bac8:	10d00034 	orhi	r3,r2,16384
    bacc:	e0bffe17 	ldw	r2,-8(fp)
    bad0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bad4:	e03ffd15 	stw	zero,-12(fp)
    bad8:	00002006 	br	bb5c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    badc:	e0bffd17 	ldw	r2,-12(fp)
    bae0:	00c00074 	movhi	r3,1
    bae4:	18f48504 	addi	r3,r3,-11756
    bae8:	10800324 	muli	r2,r2,12
    baec:	10c5883a 	add	r2,r2,r3
    baf0:	10c00017 	ldw	r3,0(r2)
    baf4:	e0bffe17 	ldw	r2,-8(fp)
    baf8:	10800017 	ldw	r2,0(r2)
    bafc:	1880141e 	bne	r3,r2,bb50 <alt_file_locked+0xa0>
    bb00:	e0bffd17 	ldw	r2,-12(fp)
    bb04:	00c00074 	movhi	r3,1
    bb08:	18f48504 	addi	r3,r3,-11756
    bb0c:	10800324 	muli	r2,r2,12
    bb10:	10c5883a 	add	r2,r2,r3
    bb14:	10800204 	addi	r2,r2,8
    bb18:	10800017 	ldw	r2,0(r2)
    bb1c:	1004403a 	cmpge	r2,r2,zero
    bb20:	10000b1e 	bne	r2,zero,bb50 <alt_file_locked+0xa0>
    bb24:	e0bffd17 	ldw	r2,-12(fp)
    bb28:	10800324 	muli	r2,r2,12
    bb2c:	1007883a 	mov	r3,r2
    bb30:	00800074 	movhi	r2,1
    bb34:	10b48504 	addi	r2,r2,-11756
    bb38:	1887883a 	add	r3,r3,r2
    bb3c:	e0bffe17 	ldw	r2,-8(fp)
    bb40:	18800326 	beq	r3,r2,bb50 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bb44:	00bffcc4 	movi	r2,-13
    bb48:	e0bfff15 	stw	r2,-4(fp)
    bb4c:	00000a06 	br	bb78 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bb50:	e0bffd17 	ldw	r2,-12(fp)
    bb54:	10800044 	addi	r2,r2,1
    bb58:	e0bffd15 	stw	r2,-12(fp)
    bb5c:	00800074 	movhi	r2,1
    bb60:	10b92804 	addi	r2,r2,-7008
    bb64:	10800017 	ldw	r2,0(r2)
    bb68:	1007883a 	mov	r3,r2
    bb6c:	e0bffd17 	ldw	r2,-12(fp)
    bb70:	18bfda2e 	bgeu	r3,r2,badc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bb74:	e03fff15 	stw	zero,-4(fp)
    bb78:	e0bfff17 	ldw	r2,-4(fp)
}
    bb7c:	e037883a 	mov	sp,fp
    bb80:	df000017 	ldw	fp,0(sp)
    bb84:	dec00104 	addi	sp,sp,4
    bb88:	f800283a 	ret

0000bb8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bb8c:	defff404 	addi	sp,sp,-48
    bb90:	dfc00b15 	stw	ra,44(sp)
    bb94:	df000a15 	stw	fp,40(sp)
    bb98:	df000a04 	addi	fp,sp,40
    bb9c:	e13ffb15 	stw	r4,-20(fp)
    bba0:	e17ffc15 	stw	r5,-16(fp)
    bba4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bba8:	00bfffc4 	movi	r2,-1
    bbac:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bbb0:	00bffb44 	movi	r2,-19
    bbb4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bbb8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bbbc:	e13ffb17 	ldw	r4,-20(fp)
    bbc0:	01400074 	movhi	r5,1
    bbc4:	29792604 	addi	r5,r5,-7016
    bbc8:	000bf380 	call	bf38 <alt_find_dev>
    bbcc:	e0bffa15 	stw	r2,-24(fp)
    bbd0:	e0bffa17 	ldw	r2,-24(fp)
    bbd4:	1004c03a 	cmpne	r2,r2,zero
    bbd8:	1000051e 	bne	r2,zero,bbf0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bbdc:	e13ffb17 	ldw	r4,-20(fp)
    bbe0:	000bfcc0 	call	bfcc <alt_find_file>
    bbe4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    bbe8:	00800044 	movi	r2,1
    bbec:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bbf0:	e0bffa17 	ldw	r2,-24(fp)
    bbf4:	1005003a 	cmpeq	r2,r2,zero
    bbf8:	1000301e 	bne	r2,zero,bcbc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bbfc:	e13ffa17 	ldw	r4,-24(fp)
    bc00:	000c0ec0 	call	c0ec <alt_get_fd>
    bc04:	e0bff815 	stw	r2,-32(fp)
    bc08:	e0bff817 	ldw	r2,-32(fp)
    bc0c:	1004403a 	cmpge	r2,r2,zero
    bc10:	1000031e 	bne	r2,zero,bc20 <open+0x94>
    {
      status = index;
    bc14:	e0bff817 	ldw	r2,-32(fp)
    bc18:	e0bff715 	stw	r2,-36(fp)
    bc1c:	00002906 	br	bcc4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    bc20:	e0bff817 	ldw	r2,-32(fp)
    bc24:	10800324 	muli	r2,r2,12
    bc28:	1007883a 	mov	r3,r2
    bc2c:	00800074 	movhi	r2,1
    bc30:	10b48504 	addi	r2,r2,-11756
    bc34:	1885883a 	add	r2,r3,r2
    bc38:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bc3c:	e0fffc17 	ldw	r3,-16(fp)
    bc40:	00900034 	movhi	r2,16384
    bc44:	10bfffc4 	addi	r2,r2,-1
    bc48:	1886703a 	and	r3,r3,r2
    bc4c:	e0bff917 	ldw	r2,-28(fp)
    bc50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bc54:	e0bff617 	ldw	r2,-40(fp)
    bc58:	1004c03a 	cmpne	r2,r2,zero
    bc5c:	1000061e 	bne	r2,zero,bc78 <open+0xec>
    bc60:	e13ff917 	ldw	r4,-28(fp)
    bc64:	000bab00 	call	bab0 <alt_file_locked>
    bc68:	e0bff715 	stw	r2,-36(fp)
    bc6c:	e0bff717 	ldw	r2,-36(fp)
    bc70:	1004803a 	cmplt	r2,r2,zero
    bc74:	1000131e 	bne	r2,zero,bcc4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bc78:	e0bffa17 	ldw	r2,-24(fp)
    bc7c:	10800317 	ldw	r2,12(r2)
    bc80:	1005003a 	cmpeq	r2,r2,zero
    bc84:	1000091e 	bne	r2,zero,bcac <open+0x120>
    bc88:	e0bffa17 	ldw	r2,-24(fp)
    bc8c:	10800317 	ldw	r2,12(r2)
    bc90:	e13ff917 	ldw	r4,-28(fp)
    bc94:	e17ffb17 	ldw	r5,-20(fp)
    bc98:	e1bffc17 	ldw	r6,-16(fp)
    bc9c:	e1fffd17 	ldw	r7,-12(fp)
    bca0:	103ee83a 	callr	r2
    bca4:	e0bfff15 	stw	r2,-4(fp)
    bca8:	00000106 	br	bcb0 <open+0x124>
    bcac:	e03fff15 	stw	zero,-4(fp)
    bcb0:	e0bfff17 	ldw	r2,-4(fp)
    bcb4:	e0bff715 	stw	r2,-36(fp)
    bcb8:	00000206 	br	bcc4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bcbc:	00bffb44 	movi	r2,-19
    bcc0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bcc4:	e0bff717 	ldw	r2,-36(fp)
    bcc8:	1004403a 	cmpge	r2,r2,zero
    bccc:	1000091e 	bne	r2,zero,bcf4 <open+0x168>
  {
    alt_release_fd (index);  
    bcd0:	e13ff817 	ldw	r4,-32(fp)
    bcd4:	000a3f80 	call	a3f8 <alt_release_fd>
    ALT_ERRNO = -status;
    bcd8:	000bd140 	call	bd14 <alt_get_errno>
    bcdc:	e0fff717 	ldw	r3,-36(fp)
    bce0:	00c7c83a 	sub	r3,zero,r3
    bce4:	10c00015 	stw	r3,0(r2)
    return -1;
    bce8:	00bfffc4 	movi	r2,-1
    bcec:	e0bffe15 	stw	r2,-8(fp)
    bcf0:	00000206 	br	bcfc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    bcf4:	e0bff817 	ldw	r2,-32(fp)
    bcf8:	e0bffe15 	stw	r2,-8(fp)
    bcfc:	e0bffe17 	ldw	r2,-8(fp)
}
    bd00:	e037883a 	mov	sp,fp
    bd04:	dfc00117 	ldw	ra,4(sp)
    bd08:	df000017 	ldw	fp,0(sp)
    bd0c:	dec00204 	addi	sp,sp,8
    bd10:	f800283a 	ret

0000bd14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd14:	defffd04 	addi	sp,sp,-12
    bd18:	dfc00215 	stw	ra,8(sp)
    bd1c:	df000115 	stw	fp,4(sp)
    bd20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd24:	00800074 	movhi	r2,1
    bd28:	10b92904 	addi	r2,r2,-7004
    bd2c:	10800017 	ldw	r2,0(r2)
    bd30:	1005003a 	cmpeq	r2,r2,zero
    bd34:	1000061e 	bne	r2,zero,bd50 <alt_get_errno+0x3c>
    bd38:	00800074 	movhi	r2,1
    bd3c:	10b92904 	addi	r2,r2,-7004
    bd40:	10800017 	ldw	r2,0(r2)
    bd44:	103ee83a 	callr	r2
    bd48:	e0bfff15 	stw	r2,-4(fp)
    bd4c:	00000306 	br	bd5c <alt_get_errno+0x48>
    bd50:	00800074 	movhi	r2,1
    bd54:	10bfed04 	addi	r2,r2,-76
    bd58:	e0bfff15 	stw	r2,-4(fp)
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd60:	e037883a 	mov	sp,fp
    bd64:	dfc00117 	ldw	ra,4(sp)
    bd68:	df000017 	ldw	fp,0(sp)
    bd6c:	dec00204 	addi	sp,sp,8
    bd70:	f800283a 	ret

0000bd74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bd74:	defffa04 	addi	sp,sp,-24
    bd78:	df000515 	stw	fp,20(sp)
    bd7c:	df000504 	addi	fp,sp,20
    bd80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd84:	0005303a 	rdctl	r2,status
    bd88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd8c:	e0fffd17 	ldw	r3,-12(fp)
    bd90:	00bfff84 	movi	r2,-2
    bd94:	1884703a 	and	r2,r3,r2
    bd98:	1001703a 	wrctl	status,r2
  
  return context;
    bd9c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bda0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    bda4:	e0bfff17 	ldw	r2,-4(fp)
    bda8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bdac:	e0bffc17 	ldw	r2,-16(fp)
    bdb0:	10c00017 	ldw	r3,0(r2)
    bdb4:	e0bffc17 	ldw	r2,-16(fp)
    bdb8:	10800117 	ldw	r2,4(r2)
    bdbc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    bdc0:	e0bffc17 	ldw	r2,-16(fp)
    bdc4:	10c00117 	ldw	r3,4(r2)
    bdc8:	e0bffc17 	ldw	r2,-16(fp)
    bdcc:	10800017 	ldw	r2,0(r2)
    bdd0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bdd4:	e0fffc17 	ldw	r3,-16(fp)
    bdd8:	e0bffc17 	ldw	r2,-16(fp)
    bddc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bde0:	e0fffc17 	ldw	r3,-16(fp)
    bde4:	e0bffc17 	ldw	r2,-16(fp)
    bde8:	18800015 	stw	r2,0(r3)
    bdec:	e0bffe17 	ldw	r2,-8(fp)
    bdf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdf4:	e0bffb17 	ldw	r2,-20(fp)
    bdf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bdfc:	e037883a 	mov	sp,fp
    be00:	df000017 	ldw	fp,0(sp)
    be04:	dec00104 	addi	sp,sp,4
    be08:	f800283a 	ret

0000be0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    be0c:	defffb04 	addi	sp,sp,-20
    be10:	dfc00415 	stw	ra,16(sp)
    be14:	df000315 	stw	fp,12(sp)
    be18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    be1c:	d0a00e17 	ldw	r2,-32712(gp)
    be20:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    be24:	d0a6d517 	ldw	r2,-25772(gp)
    be28:	10800044 	addi	r2,r2,1
    be2c:	d0a6d515 	stw	r2,-25772(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    be30:	00003106 	br	bef8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    be34:	e0bffe17 	ldw	r2,-8(fp)
    be38:	10800017 	ldw	r2,0(r2)
    be3c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    be40:	e0bffe17 	ldw	r2,-8(fp)
    be44:	10800403 	ldbu	r2,16(r2)
    be48:	10803fcc 	andi	r2,r2,255
    be4c:	1005003a 	cmpeq	r2,r2,zero
    be50:	1000051e 	bne	r2,zero,be68 <alt_tick+0x5c>
    be54:	d0a6d517 	ldw	r2,-25772(gp)
    be58:	1004c03a 	cmpne	r2,r2,zero
    be5c:	1000021e 	bne	r2,zero,be68 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    be68:	e0bffe17 	ldw	r2,-8(fp)
    be6c:	10c00217 	ldw	r3,8(r2)
    be70:	d0a6d517 	ldw	r2,-25772(gp)
    be74:	10c01e36 	bltu	r2,r3,bef0 <alt_tick+0xe4>
    be78:	e0bffe17 	ldw	r2,-8(fp)
    be7c:	10800403 	ldbu	r2,16(r2)
    be80:	10803fcc 	andi	r2,r2,255
    be84:	1004c03a 	cmpne	r2,r2,zero
    be88:	1000191e 	bne	r2,zero,bef0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    be8c:	e0bffe17 	ldw	r2,-8(fp)
    be90:	10c00317 	ldw	r3,12(r2)
    be94:	e0bffe17 	ldw	r2,-8(fp)
    be98:	11000517 	ldw	r4,20(r2)
    be9c:	183ee83a 	callr	r3
    bea0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bea4:	e0bffd17 	ldw	r2,-12(fp)
    bea8:	1004c03a 	cmpne	r2,r2,zero
    beac:	1000031e 	bne	r2,zero,bebc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    beb0:	e13ffe17 	ldw	r4,-8(fp)
    beb4:	000bd740 	call	bd74 <alt_alarm_stop>
    beb8:	00000d06 	br	bef0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    bebc:	e0bffe17 	ldw	r2,-8(fp)
    bec0:	10c00217 	ldw	r3,8(r2)
    bec4:	e0bffd17 	ldw	r2,-12(fp)
    bec8:	1887883a 	add	r3,r3,r2
    becc:	e0bffe17 	ldw	r2,-8(fp)
    bed0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bed4:	e0bffe17 	ldw	r2,-8(fp)
    bed8:	10c00217 	ldw	r3,8(r2)
    bedc:	d0a6d517 	ldw	r2,-25772(gp)
    bee0:	1880032e 	bgeu	r3,r2,bef0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    bee4:	e0fffe17 	ldw	r3,-8(fp)
    bee8:	00800044 	movi	r2,1
    beec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    bef0:	e0bfff17 	ldw	r2,-4(fp)
    bef4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bef8:	d0e00e04 	addi	r3,gp,-32712
    befc:	e0bffe17 	ldw	r2,-8(fp)
    bf00:	10ffcc1e 	bne	r2,r3,be34 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    bf04:	e037883a 	mov	sp,fp
    bf08:	dfc00117 	ldw	ra,4(sp)
    bf0c:	df000017 	ldw	fp,0(sp)
    bf10:	dec00204 	addi	sp,sp,8
    bf14:	f800283a 	ret

0000bf18 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    bf18:	deffff04 	addi	sp,sp,-4
    bf1c:	df000015 	stw	fp,0(sp)
    bf20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    bf24:	000170fa 	wrctl	ienable,zero
}
    bf28:	e037883a 	mov	sp,fp
    bf2c:	df000017 	ldw	fp,0(sp)
    bf30:	dec00104 	addi	sp,sp,4
    bf34:	f800283a 	ret

0000bf38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    bf38:	defff904 	addi	sp,sp,-28
    bf3c:	dfc00615 	stw	ra,24(sp)
    bf40:	df000515 	stw	fp,20(sp)
    bf44:	df000504 	addi	fp,sp,20
    bf48:	e13ffd15 	stw	r4,-12(fp)
    bf4c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    bf50:	e0bffe17 	ldw	r2,-8(fp)
    bf54:	10800017 	ldw	r2,0(r2)
    bf58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    bf5c:	e13ffd17 	ldw	r4,-12(fp)
    bf60:	000727c0 	call	727c <strlen>
    bf64:	10800044 	addi	r2,r2,1
    bf68:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bf6c:	00000d06 	br	bfa4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    bf70:	e0bffc17 	ldw	r2,-16(fp)
    bf74:	11000217 	ldw	r4,8(r2)
    bf78:	e1bffb17 	ldw	r6,-20(fp)
    bf7c:	e17ffd17 	ldw	r5,-12(fp)
    bf80:	000c2800 	call	c280 <memcmp>
    bf84:	1004c03a 	cmpne	r2,r2,zero
    bf88:	1000031e 	bne	r2,zero,bf98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    bf8c:	e0bffc17 	ldw	r2,-16(fp)
    bf90:	e0bfff15 	stw	r2,-4(fp)
    bf94:	00000706 	br	bfb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    bf98:	e0bffc17 	ldw	r2,-16(fp)
    bf9c:	10800017 	ldw	r2,0(r2)
    bfa0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bfa4:	e0fffe17 	ldw	r3,-8(fp)
    bfa8:	e0bffc17 	ldw	r2,-16(fp)
    bfac:	10fff01e 	bne	r2,r3,bf70 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    bfb0:	e03fff15 	stw	zero,-4(fp)
    bfb4:	e0bfff17 	ldw	r2,-4(fp)
}
    bfb8:	e037883a 	mov	sp,fp
    bfbc:	dfc00117 	ldw	ra,4(sp)
    bfc0:	df000017 	ldw	fp,0(sp)
    bfc4:	dec00204 	addi	sp,sp,8
    bfc8:	f800283a 	ret

0000bfcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    bfcc:	defffa04 	addi	sp,sp,-24
    bfd0:	dfc00515 	stw	ra,20(sp)
    bfd4:	df000415 	stw	fp,16(sp)
    bfd8:	df000404 	addi	fp,sp,16
    bfdc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    bfe0:	00800074 	movhi	r2,1
    bfe4:	10b92404 	addi	r2,r2,-7024
    bfe8:	10800017 	ldw	r2,0(r2)
    bfec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    bff0:	00003306 	br	c0c0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    bff4:	e0bffd17 	ldw	r2,-12(fp)
    bff8:	11000217 	ldw	r4,8(r2)
    bffc:	000727c0 	call	727c <strlen>
    c000:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c004:	e0bffd17 	ldw	r2,-12(fp)
    c008:	10c00217 	ldw	r3,8(r2)
    c00c:	e0bffc17 	ldw	r2,-16(fp)
    c010:	1885883a 	add	r2,r3,r2
    c014:	10bfffc4 	addi	r2,r2,-1
    c018:	10800003 	ldbu	r2,0(r2)
    c01c:	10803fcc 	andi	r2,r2,255
    c020:	1080201c 	xori	r2,r2,128
    c024:	10bfe004 	addi	r2,r2,-128
    c028:	10800bd8 	cmpnei	r2,r2,47
    c02c:	1000031e 	bne	r2,zero,c03c <alt_find_file+0x70>
    {
      len -= 1;
    c030:	e0bffc17 	ldw	r2,-16(fp)
    c034:	10bfffc4 	addi	r2,r2,-1
    c038:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c03c:	e0bffc17 	ldw	r2,-16(fp)
    c040:	1007883a 	mov	r3,r2
    c044:	e0bffe17 	ldw	r2,-8(fp)
    c048:	1885883a 	add	r2,r3,r2
    c04c:	10800003 	ldbu	r2,0(r2)
    c050:	10803fcc 	andi	r2,r2,255
    c054:	1080201c 	xori	r2,r2,128
    c058:	10bfe004 	addi	r2,r2,-128
    c05c:	10800be0 	cmpeqi	r2,r2,47
    c060:	10000a1e 	bne	r2,zero,c08c <alt_find_file+0xc0>
    c064:	e0bffc17 	ldw	r2,-16(fp)
    c068:	1007883a 	mov	r3,r2
    c06c:	e0bffe17 	ldw	r2,-8(fp)
    c070:	1885883a 	add	r2,r3,r2
    c074:	10800003 	ldbu	r2,0(r2)
    c078:	10803fcc 	andi	r2,r2,255
    c07c:	1080201c 	xori	r2,r2,128
    c080:	10bfe004 	addi	r2,r2,-128
    c084:	1004c03a 	cmpne	r2,r2,zero
    c088:	10000a1e 	bne	r2,zero,c0b4 <alt_find_file+0xe8>
    c08c:	e0bffd17 	ldw	r2,-12(fp)
    c090:	11000217 	ldw	r4,8(r2)
    c094:	e1bffc17 	ldw	r6,-16(fp)
    c098:	e17ffe17 	ldw	r5,-8(fp)
    c09c:	000c2800 	call	c280 <memcmp>
    c0a0:	1004c03a 	cmpne	r2,r2,zero
    c0a4:	1000031e 	bne	r2,zero,c0b4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c0a8:	e0bffd17 	ldw	r2,-12(fp)
    c0ac:	e0bfff15 	stw	r2,-4(fp)
    c0b0:	00000806 	br	c0d4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c0b4:	e0bffd17 	ldw	r2,-12(fp)
    c0b8:	10800017 	ldw	r2,0(r2)
    c0bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c0c0:	00c00074 	movhi	r3,1
    c0c4:	18f92404 	addi	r3,r3,-7024
    c0c8:	e0bffd17 	ldw	r2,-12(fp)
    c0cc:	10ffc91e 	bne	r2,r3,bff4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c0d0:	e03fff15 	stw	zero,-4(fp)
    c0d4:	e0bfff17 	ldw	r2,-4(fp)
}
    c0d8:	e037883a 	mov	sp,fp
    c0dc:	dfc00117 	ldw	ra,4(sp)
    c0e0:	df000017 	ldw	fp,0(sp)
    c0e4:	dec00204 	addi	sp,sp,8
    c0e8:	f800283a 	ret

0000c0ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c0ec:	defffc04 	addi	sp,sp,-16
    c0f0:	df000315 	stw	fp,12(sp)
    c0f4:	df000304 	addi	fp,sp,12
    c0f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c0fc:	00bffa04 	movi	r2,-24
    c100:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c104:	e03ffe15 	stw	zero,-8(fp)
    c108:	00001e06 	br	c184 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c10c:	e0bffe17 	ldw	r2,-8(fp)
    c110:	00c00074 	movhi	r3,1
    c114:	18f48504 	addi	r3,r3,-11756
    c118:	10800324 	muli	r2,r2,12
    c11c:	10c5883a 	add	r2,r2,r3
    c120:	10800017 	ldw	r2,0(r2)
    c124:	1004c03a 	cmpne	r2,r2,zero
    c128:	1000131e 	bne	r2,zero,c178 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c12c:	e0bffe17 	ldw	r2,-8(fp)
    c130:	00c00074 	movhi	r3,1
    c134:	18f48504 	addi	r3,r3,-11756
    c138:	10800324 	muli	r2,r2,12
    c13c:	10c7883a 	add	r3,r2,r3
    c140:	e0bfff17 	ldw	r2,-4(fp)
    c144:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c148:	00800074 	movhi	r2,1
    c14c:	10b92804 	addi	r2,r2,-7008
    c150:	10c00017 	ldw	r3,0(r2)
    c154:	e0bffe17 	ldw	r2,-8(fp)
    c158:	1880040e 	bge	r3,r2,c16c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c15c:	00c00074 	movhi	r3,1
    c160:	18f92804 	addi	r3,r3,-7008
    c164:	e0bffe17 	ldw	r2,-8(fp)
    c168:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c16c:	e0bffe17 	ldw	r2,-8(fp)
    c170:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c174:	00000606 	br	c190 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c178:	e0bffe17 	ldw	r2,-8(fp)
    c17c:	10800044 	addi	r2,r2,1
    c180:	e0bffe15 	stw	r2,-8(fp)
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	10800810 	cmplti	r2,r2,32
    c18c:	103fdf1e 	bne	r2,zero,c10c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c190:	e0bffd17 	ldw	r2,-12(fp)
}
    c194:	e037883a 	mov	sp,fp
    c198:	df000017 	ldw	fp,0(sp)
    c19c:	dec00104 	addi	sp,sp,4
    c1a0:	f800283a 	ret

0000c1a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c1a4:	defffb04 	addi	sp,sp,-20
    c1a8:	df000415 	stw	fp,16(sp)
    c1ac:	df000404 	addi	fp,sp,16
    c1b0:	e13ffe15 	stw	r4,-8(fp)
    c1b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c1b8:	e0bfff17 	ldw	r2,-4(fp)
    c1bc:	10820070 	cmpltui	r2,r2,2049
    c1c0:	1000021e 	bne	r2,zero,c1cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c1c4:	00820004 	movi	r2,2048
    c1c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c1cc:	e0fffe17 	ldw	r3,-8(fp)
    c1d0:	e0bfff17 	ldw	r2,-4(fp)
    c1d4:	1885883a 	add	r2,r3,r2
    c1d8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c1dc:	e0bffe17 	ldw	r2,-8(fp)
    c1e0:	e0bffd15 	stw	r2,-12(fp)
    c1e4:	00000506 	br	c1fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c1e8:	e0bffd17 	ldw	r2,-12(fp)
    c1ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	10800804 	addi	r2,r2,32
    c1f8:	e0bffd15 	stw	r2,-12(fp)
    c1fc:	e0fffd17 	ldw	r3,-12(fp)
    c200:	e0bffc17 	ldw	r2,-16(fp)
    c204:	18bff836 	bltu	r3,r2,c1e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c208:	e0bffe17 	ldw	r2,-8(fp)
    c20c:	108007cc 	andi	r2,r2,31
    c210:	1005003a 	cmpeq	r2,r2,zero
    c214:	1000021e 	bne	r2,zero,c220 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c218:	e0bffd17 	ldw	r2,-12(fp)
    c21c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c220:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c224:	e037883a 	mov	sp,fp
    c228:	df000017 	ldw	fp,0(sp)
    c22c:	dec00104 	addi	sp,sp,4
    c230:	f800283a 	ret

0000c234 <atexit>:
    c234:	200b883a 	mov	r5,r4
    c238:	000d883a 	mov	r6,zero
    c23c:	0009883a 	mov	r4,zero
    c240:	000f883a 	mov	r7,zero
    c244:	000c2f41 	jmpi	c2f4 <__register_exitproc>

0000c248 <exit>:
    c248:	defffe04 	addi	sp,sp,-8
    c24c:	000b883a 	mov	r5,zero
    c250:	dc000015 	stw	r16,0(sp)
    c254:	dfc00115 	stw	ra,4(sp)
    c258:	2021883a 	mov	r16,r4
    c25c:	000c42c0 	call	c42c <__call_exitprocs>
    c260:	00800074 	movhi	r2,1
    c264:	10b91f04 	addi	r2,r2,-7044
    c268:	11000017 	ldw	r4,0(r2)
    c26c:	20800f17 	ldw	r2,60(r4)
    c270:	10000126 	beq	r2,zero,c278 <exit+0x30>
    c274:	103ee83a 	callr	r2
    c278:	8009883a 	mov	r4,r16
    c27c:	000c61c0 	call	c61c <_exit>

0000c280 <memcmp>:
    c280:	00c000c4 	movi	r3,3
    c284:	1980032e 	bgeu	r3,r6,c294 <memcmp+0x14>
    c288:	2144b03a 	or	r2,r4,r5
    c28c:	10c4703a 	and	r2,r2,r3
    c290:	10000f26 	beq	r2,zero,c2d0 <memcmp+0x50>
    c294:	31ffffc4 	addi	r7,r6,-1
    c298:	3000061e 	bne	r6,zero,c2b4 <memcmp+0x34>
    c29c:	00000a06 	br	c2c8 <memcmp+0x48>
    c2a0:	39ffffc4 	addi	r7,r7,-1
    c2a4:	00bfffc4 	movi	r2,-1
    c2a8:	21000044 	addi	r4,r4,1
    c2ac:	29400044 	addi	r5,r5,1
    c2b0:	38800526 	beq	r7,r2,c2c8 <memcmp+0x48>
    c2b4:	20c00003 	ldbu	r3,0(r4)
    c2b8:	28800003 	ldbu	r2,0(r5)
    c2bc:	18bff826 	beq	r3,r2,c2a0 <memcmp+0x20>
    c2c0:	1885c83a 	sub	r2,r3,r2
    c2c4:	f800283a 	ret
    c2c8:	0005883a 	mov	r2,zero
    c2cc:	f800283a 	ret
    c2d0:	180f883a 	mov	r7,r3
    c2d4:	20c00017 	ldw	r3,0(r4)
    c2d8:	28800017 	ldw	r2,0(r5)
    c2dc:	18bfed1e 	bne	r3,r2,c294 <memcmp+0x14>
    c2e0:	31bfff04 	addi	r6,r6,-4
    c2e4:	21000104 	addi	r4,r4,4
    c2e8:	29400104 	addi	r5,r5,4
    c2ec:	39bff936 	bltu	r7,r6,c2d4 <memcmp+0x54>
    c2f0:	003fe806 	br	c294 <memcmp+0x14>

0000c2f4 <__register_exitproc>:
    c2f4:	defffa04 	addi	sp,sp,-24
    c2f8:	00800074 	movhi	r2,1
    c2fc:	10b91f04 	addi	r2,r2,-7044
    c300:	dc000015 	stw	r16,0(sp)
    c304:	14000017 	ldw	r16,0(r2)
    c308:	dd000415 	stw	r20,16(sp)
    c30c:	2829883a 	mov	r20,r5
    c310:	81405217 	ldw	r5,328(r16)
    c314:	dcc00315 	stw	r19,12(sp)
    c318:	dc800215 	stw	r18,8(sp)
    c31c:	dc400115 	stw	r17,4(sp)
    c320:	dfc00515 	stw	ra,20(sp)
    c324:	2023883a 	mov	r17,r4
    c328:	3027883a 	mov	r19,r6
    c32c:	3825883a 	mov	r18,r7
    c330:	28002526 	beq	r5,zero,c3c8 <__register_exitproc+0xd4>
    c334:	29000117 	ldw	r4,4(r5)
    c338:	008007c4 	movi	r2,31
    c33c:	11002716 	blt	r2,r4,c3dc <__register_exitproc+0xe8>
    c340:	8800101e 	bne	r17,zero,c384 <__register_exitproc+0x90>
    c344:	2105883a 	add	r2,r4,r4
    c348:	1085883a 	add	r2,r2,r2
    c34c:	20c00044 	addi	r3,r4,1
    c350:	1145883a 	add	r2,r2,r5
    c354:	0009883a 	mov	r4,zero
    c358:	15000215 	stw	r20,8(r2)
    c35c:	28c00115 	stw	r3,4(r5)
    c360:	2005883a 	mov	r2,r4
    c364:	dfc00517 	ldw	ra,20(sp)
    c368:	dd000417 	ldw	r20,16(sp)
    c36c:	dcc00317 	ldw	r19,12(sp)
    c370:	dc800217 	ldw	r18,8(sp)
    c374:	dc400117 	ldw	r17,4(sp)
    c378:	dc000017 	ldw	r16,0(sp)
    c37c:	dec00604 	addi	sp,sp,24
    c380:	f800283a 	ret
    c384:	29802204 	addi	r6,r5,136
    c388:	00800044 	movi	r2,1
    c38c:	110e983a 	sll	r7,r2,r4
    c390:	30c04017 	ldw	r3,256(r6)
    c394:	2105883a 	add	r2,r4,r4
    c398:	1085883a 	add	r2,r2,r2
    c39c:	1185883a 	add	r2,r2,r6
    c3a0:	19c6b03a 	or	r3,r3,r7
    c3a4:	14802015 	stw	r18,128(r2)
    c3a8:	14c00015 	stw	r19,0(r2)
    c3ac:	00800084 	movi	r2,2
    c3b0:	30c04015 	stw	r3,256(r6)
    c3b4:	88bfe31e 	bne	r17,r2,c344 <__register_exitproc+0x50>
    c3b8:	30804117 	ldw	r2,260(r6)
    c3bc:	11c4b03a 	or	r2,r2,r7
    c3c0:	30804115 	stw	r2,260(r6)
    c3c4:	003fdf06 	br	c344 <__register_exitproc+0x50>
    c3c8:	00800074 	movhi	r2,1
    c3cc:	10803e04 	addi	r2,r2,248
    c3d0:	100b883a 	mov	r5,r2
    c3d4:	80805215 	stw	r2,328(r16)
    c3d8:	003fd606 	br	c334 <__register_exitproc+0x40>
    c3dc:	00800034 	movhi	r2,0
    c3e0:	10800004 	addi	r2,r2,0
    c3e4:	1000021e 	bne	r2,zero,c3f0 <__register_exitproc+0xfc>
    c3e8:	013fffc4 	movi	r4,-1
    c3ec:	003fdc06 	br	c360 <__register_exitproc+0x6c>
    c3f0:	01006404 	movi	r4,400
    c3f4:	103ee83a 	callr	r2
    c3f8:	1007883a 	mov	r3,r2
    c3fc:	103ffa26 	beq	r2,zero,c3e8 <__register_exitproc+0xf4>
    c400:	80805217 	ldw	r2,328(r16)
    c404:	180b883a 	mov	r5,r3
    c408:	18000115 	stw	zero,4(r3)
    c40c:	18800015 	stw	r2,0(r3)
    c410:	80c05215 	stw	r3,328(r16)
    c414:	18006215 	stw	zero,392(r3)
    c418:	18006315 	stw	zero,396(r3)
    c41c:	0009883a 	mov	r4,zero
    c420:	883fc826 	beq	r17,zero,c344 <__register_exitproc+0x50>
    c424:	003fd706 	br	c384 <__register_exitproc+0x90>

0000c428 <register_fini>:
    c428:	f800283a 	ret

0000c42c <__call_exitprocs>:
    c42c:	00800074 	movhi	r2,1
    c430:	10b91f04 	addi	r2,r2,-7044
    c434:	10800017 	ldw	r2,0(r2)
    c438:	defff304 	addi	sp,sp,-52
    c43c:	df000b15 	stw	fp,44(sp)
    c440:	d8800115 	stw	r2,4(sp)
    c444:	00800034 	movhi	r2,0
    c448:	10800004 	addi	r2,r2,0
    c44c:	1005003a 	cmpeq	r2,r2,zero
    c450:	d8800215 	stw	r2,8(sp)
    c454:	d8800117 	ldw	r2,4(sp)
    c458:	dd400815 	stw	r21,32(sp)
    c45c:	dd000715 	stw	r20,28(sp)
    c460:	10805204 	addi	r2,r2,328
    c464:	dfc00c15 	stw	ra,48(sp)
    c468:	ddc00a15 	stw	r23,40(sp)
    c46c:	dd800915 	stw	r22,36(sp)
    c470:	dcc00615 	stw	r19,24(sp)
    c474:	dc800515 	stw	r18,20(sp)
    c478:	dc400415 	stw	r17,16(sp)
    c47c:	dc000315 	stw	r16,12(sp)
    c480:	282b883a 	mov	r21,r5
    c484:	2039883a 	mov	fp,r4
    c488:	d8800015 	stw	r2,0(sp)
    c48c:	2829003a 	cmpeq	r20,r5,zero
    c490:	d8800117 	ldw	r2,4(sp)
    c494:	14405217 	ldw	r17,328(r2)
    c498:	88001026 	beq	r17,zero,c4dc <__call_exitprocs+0xb0>
    c49c:	ddc00017 	ldw	r23,0(sp)
    c4a0:	88800117 	ldw	r2,4(r17)
    c4a4:	8c802204 	addi	r18,r17,136
    c4a8:	143fffc4 	addi	r16,r2,-1
    c4ac:	80000916 	blt	r16,zero,c4d4 <__call_exitprocs+0xa8>
    c4b0:	05bfffc4 	movi	r22,-1
    c4b4:	a000151e 	bne	r20,zero,c50c <__call_exitprocs+0xe0>
    c4b8:	8409883a 	add	r4,r16,r16
    c4bc:	2105883a 	add	r2,r4,r4
    c4c0:	1485883a 	add	r2,r2,r18
    c4c4:	10c02017 	ldw	r3,128(r2)
    c4c8:	a8c01126 	beq	r21,r3,c510 <__call_exitprocs+0xe4>
    c4cc:	843fffc4 	addi	r16,r16,-1
    c4d0:	85bff81e 	bne	r16,r22,c4b4 <__call_exitprocs+0x88>
    c4d4:	d8800217 	ldw	r2,8(sp)
    c4d8:	10003126 	beq	r2,zero,c5a0 <__call_exitprocs+0x174>
    c4dc:	dfc00c17 	ldw	ra,48(sp)
    c4e0:	df000b17 	ldw	fp,44(sp)
    c4e4:	ddc00a17 	ldw	r23,40(sp)
    c4e8:	dd800917 	ldw	r22,36(sp)
    c4ec:	dd400817 	ldw	r21,32(sp)
    c4f0:	dd000717 	ldw	r20,28(sp)
    c4f4:	dcc00617 	ldw	r19,24(sp)
    c4f8:	dc800517 	ldw	r18,20(sp)
    c4fc:	dc400417 	ldw	r17,16(sp)
    c500:	dc000317 	ldw	r16,12(sp)
    c504:	dec00d04 	addi	sp,sp,52
    c508:	f800283a 	ret
    c50c:	8409883a 	add	r4,r16,r16
    c510:	88c00117 	ldw	r3,4(r17)
    c514:	2105883a 	add	r2,r4,r4
    c518:	1445883a 	add	r2,r2,r17
    c51c:	18ffffc4 	addi	r3,r3,-1
    c520:	11800217 	ldw	r6,8(r2)
    c524:	1c001526 	beq	r3,r16,c57c <__call_exitprocs+0x150>
    c528:	10000215 	stw	zero,8(r2)
    c52c:	303fe726 	beq	r6,zero,c4cc <__call_exitprocs+0xa0>
    c530:	00c00044 	movi	r3,1
    c534:	1c06983a 	sll	r3,r3,r16
    c538:	90804017 	ldw	r2,256(r18)
    c53c:	8cc00117 	ldw	r19,4(r17)
    c540:	1884703a 	and	r2,r3,r2
    c544:	10001426 	beq	r2,zero,c598 <__call_exitprocs+0x16c>
    c548:	90804117 	ldw	r2,260(r18)
    c54c:	1884703a 	and	r2,r3,r2
    c550:	10000c1e 	bne	r2,zero,c584 <__call_exitprocs+0x158>
    c554:	2105883a 	add	r2,r4,r4
    c558:	1485883a 	add	r2,r2,r18
    c55c:	11400017 	ldw	r5,0(r2)
    c560:	e009883a 	mov	r4,fp
    c564:	303ee83a 	callr	r6
    c568:	88800117 	ldw	r2,4(r17)
    c56c:	98bfc81e 	bne	r19,r2,c490 <__call_exitprocs+0x64>
    c570:	b8800017 	ldw	r2,0(r23)
    c574:	147fd526 	beq	r2,r17,c4cc <__call_exitprocs+0xa0>
    c578:	003fc506 	br	c490 <__call_exitprocs+0x64>
    c57c:	8c000115 	stw	r16,4(r17)
    c580:	003fea06 	br	c52c <__call_exitprocs+0x100>
    c584:	2105883a 	add	r2,r4,r4
    c588:	1485883a 	add	r2,r2,r18
    c58c:	11000017 	ldw	r4,0(r2)
    c590:	303ee83a 	callr	r6
    c594:	003ff406 	br	c568 <__call_exitprocs+0x13c>
    c598:	303ee83a 	callr	r6
    c59c:	003ff206 	br	c568 <__call_exitprocs+0x13c>
    c5a0:	88800117 	ldw	r2,4(r17)
    c5a4:	1000081e 	bne	r2,zero,c5c8 <__call_exitprocs+0x19c>
    c5a8:	89000017 	ldw	r4,0(r17)
    c5ac:	20000726 	beq	r4,zero,c5cc <__call_exitprocs+0x1a0>
    c5b0:	b9000015 	stw	r4,0(r23)
    c5b4:	8809883a 	mov	r4,r17
    c5b8:	00000000 	call	0 <__alt_mem_SDRAM>
    c5bc:	bc400017 	ldw	r17,0(r23)
    c5c0:	883fb71e 	bne	r17,zero,c4a0 <__call_exitprocs+0x74>
    c5c4:	003fc506 	br	c4dc <__call_exitprocs+0xb0>
    c5c8:	89000017 	ldw	r4,0(r17)
    c5cc:	882f883a 	mov	r23,r17
    c5d0:	2023883a 	mov	r17,r4
    c5d4:	883fb21e 	bne	r17,zero,c4a0 <__call_exitprocs+0x74>
    c5d8:	003fc006 	br	c4dc <__call_exitprocs+0xb0>

0000c5dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c5dc:	defffd04 	addi	sp,sp,-12
    c5e0:	df000215 	stw	fp,8(sp)
    c5e4:	df000204 	addi	fp,sp,8
    c5e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c5ec:	e0bfff17 	ldw	r2,-4(fp)
    c5f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c5f4:	e0bffe17 	ldw	r2,-8(fp)
    c5f8:	1005003a 	cmpeq	r2,r2,zero
    c5fc:	1000021e 	bne	r2,zero,c608 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c600:	002af070 	cmpltui	zero,zero,43969
    c604:	00000106 	br	c60c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c608:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c60c:	e037883a 	mov	sp,fp
    c610:	df000017 	ldw	fp,0(sp)
    c614:	dec00104 	addi	sp,sp,4
    c618:	f800283a 	ret

0000c61c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c61c:	defffd04 	addi	sp,sp,-12
    c620:	dfc00215 	stw	ra,8(sp)
    c624:	df000115 	stw	fp,4(sp)
    c628:	df000104 	addi	fp,sp,4
    c62c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c630:	e13fff17 	ldw	r4,-4(fp)
    c634:	000c5dc0 	call	c5dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c638:	003fff06 	br	c638 <_exit+0x1c>
    c63c:	0000c428 	cmpgeui	zero,zero,784
